{
  "openapi": "3.0.1",
  "info": {
    "title": "Entrust Identity as a Service Administration API",
    "description": "\n# Identity as a Service Administration API documentation\nThis document describes how to manage your Identity as a Service account using Administration (Admin) API calls. This API allows you to seamlessly perform administrative actions on Identity as a Service without logging in to the Identity as a Service Administrator portal.\n# Prerequisites\nConfirm the following before executing the Admin API calls included in this guide:\n - An Admin API application has been created on your Identity as a Service account. The application must be configured with a role that has the permissions needed by your application. Identity as a Service allows you to download a JSON file once the application is created.\n - The Application ID and Shared Secret parameter values are easily accessible. They must be entered into the body of the Admin APi request. The required values are displayed after creating the Administration API application on Identity as a Service. Upon creation, you can either copy these values to your clipboard or download them as a JSON file.\n - The Admin API application configuration data has been downloaded and is available for use.\n\n# Identity as a Service Administration APIs\nIdentity as a Service administration APIs are grouped into the following categories. You can only perform the API calls permitted by the role assigned to your Administration API application on Identity as a Service. See the **Identity as a Service Administrator Help** for more information on Identity as a Service roles:\n ### Admin Authentication\nThese APIs facilitate authentication between your Admin API application and Identity as a Service. You must make this call before making any other Admin API calls. The call generates an authentication token value that must be included in all other Admin API requests.\n\nThe Admin API authentication response includes the token's expiration time. For instance:\n```\n{\n    \"authToken\": \"GLrKMuDGiIWPJooDRFTZIHc65RyjJBiPdy4b5xNR8fKxXfwy4tbSIvh+xiFHlJ2p6tm3FuOZ34sxjCHYbDa77eLrxFcMuwYjRMmLWsUIGfkpfg33Wb/5X01Xag4Vdjz5DpVKfCg/OL2rnd4tfCfzM9FoY+vY/sllGgRtQkGeZodsi+QvazqQS1iJ5e6i5ouR05P52YsLgmMlZ4mUfH3JiXZmkkAJvXuM3oj9msi/a4ULWeUGYW5oHM5Gs6ab37baa5xzVykzowHdIoZMVeC8+zVqDr+yXTAHVysBYQHngyckgBizDc2g49RgRTEz2k+yRIvwUU5swGzKtgt6kYtyyFM8YdeODB59Fkl8w5mQQDpxIyZcclCFv2C+MBWdnbM0kJIgNtE1ZeRA+zxwS6avE8EKw3T9Nczs6KBfycV3NxgxTvTQIxNi3kPA8XdJtAmCkUR/gyLkqJXk7bGDvFo4+rWR4uX2XxHm2NZGTNA1QezK96Y7JVjImfoHlUJnxGm207/kVPIVtSUD+6XuEl0uVvrtnTPmQnpq3P0gTYvon3Cw1caQvIydtrUv4yfs4Q/WVvSF3GQh3uet/IkUeGbkxLn43CSVz2hCQoeF8jxIoiJuSAxs1e3phylp0plijvok01Tbit6um/x4tK5UZYCRZYmeSD/ltXGtZNOoA4YHh5cDK+KcDy2tuWaexi2Hf+nJ5adqiMHwuozIH69Eqc6OZ9o86t75mIdux8zLgWt0T3SFOphtCvF0L8BdxICrEXGMDhguRRH7f+/IPU0ggFwnxsIV2a3c4oOayFfHwVSg4rGSKfWuWtkfNavA8RI5y6JOKzMrulrdg+gzuBMms2nKn38HNIRu2pKMVzQ2jU8CrtPgOT8=\",\n    \"expirationTime\": \"2020-01-23T16:30:58Z\",\n    \"creationTime\": \"2020-01-23T16:15:58Z\"\n}\n```\nIf you use this authentication token to make requests after it expires, the service will return an UNAUTHORIZED response code (401) and you will need to reauthenticate to obtain a new token.\n\nSome workarounds to prevent this are:\n- Always reauthenticate before making a request; or\n- Track the expiration time and reauthenticate when you detect that it has expired; or\n- Send an OPTIONS request to the same end-point to detect whether the token has expired. This can be useful with end-points receiving a large payload such as images where the token can expire before the request has completed. In these cases the request may fail with a 500 error.\n\nWhen an admin API application authenticates, there is an option to enable a web session to add additional security to the session.  This is done by setting the enableWebSession argument passed to the authentication controller to true.  When a web session is enabled, a HTTP session cookie named Identity as a Service_SESSION_ID will be returned with the authentication results.  This cookie must be included with all subsequent admin API calls along with the authentication token.\n ### Users\nThese APIs facilitate user management operations on an Identity as a Service account.\n ### Smart Credentials\nThe Entrust® Mobile Smart Credential (MSC) application allows users to perform authentications to their Identity as a Service account and configured applications. This API call facilitates mobile smart credential management operations on an Identity as a Service account.\n ### Tokens\nThese APIs facilitate hardware and soft token management operations on an Identity as a Service account.\n ### FIDO2 Tokens\n These APIs faciliate management of FIDO2 tokens.  FIDO2 tokens cannot be registered using the administration API but they can be viewed, deleted and updated.\n ### Grid Cards\n Grid authentication uses cards with a grid as the authentication lookup tool. This API call facilitates Grid Card management operations on an Identity as a Service account.\n ### Temporary Access Codes\nTemporary Access Codes can be used to log in when a user cannot access their one-time passcode (OTP), Grid Card, or token authenticator. This API call facilitates Temporary Access Code management operations on an Identity as a Service account.\n ### KBA - Knowledge-based Authenticators\nKnowledge-based authentication (or knowledge-based authenticators) (KBA) (also known as question-and-answer (Q&A) authentication) allows users to authenticate to SAML application accounts using Identity as a Service by providing the correct answer to one or more preregistered questions. This API call facilitates Knowledge-based Authenticator management operations on an Identity as a Service account.\n ### Passwords\nThere are two types of password authenticators available on Identity as a Service —Identity as a Service passwords and Active Directory (AD) passwords. Identity as a Service passwords are passwords that can be manually or automatically assigned to users on Identity as a Service. Active Directory (AD) passwords are passwords that have already been assigned to a user on their corporate directory - not through Identity as a Service. This API call facilitates password management operations on an Identity as a Service account for either type of password.\n ### OTPs\nThese APIs facilitate OTP management operations on an Identity as a Service account.\n ### User Risk-based authentication (RBA) Settings\n Risk-based authentication (RBA) identifies the level of risk associated with a user who tries to authenticate. This API call facilitates Risk-based authentication management operations on an Identity as a Service account.\n ### Machine authenticators\nMachine Authentication (MA) provides identification information on the Web browser being used to access a SAML application. This API call facilitates Machine Authenticator management operations on an Identity as a Service account.\n ### User Attributes\nUser attributes are the information fields listed as part of each user's Profile information. This API call facilitates user attribute management operations on an Identity as a Service account.\n ### Roles\nRoles control what operations a user can perform on their Identity as a Service account. These roles distinguish the amount of access given to each account, ranging from administrators with full access to end users (who can only access the user portal features).This API call facilitates role management operations on an Identity as a Service account.\n ### Groups\nAn Identity as a Service group is a collection of users given access to applications based on the resource rules they are assigned to. This API call facilitates group management operations on an Identity as a Service account.\n ### Reports\nThese APIs allows you to access the Audit Log on your Identity as a Service account. This Log lists the actions performed on your account within a period of time.\n ### Settings\n These APIs provide management of the settings used to configure Identity as a Service behavior.  Settings that can be managed using the administration API include General settings, OTP settings and Token settings.\n ### Applications\n These APIs provide management of authentication API applications using the administration API.\n ### Resource Rules\n Resource rules define what authenticators are required to authenticate to an application.  The resource rules APIs provide management of resource rules using the administration API.\n ### Directories\n These APIs provide directory related information using the administration API.\n ### Tenants\n For service provider accounts, the tenant APIs provide management of their child tenants as well as management of entitlements for those tenants. These APIs are only available for accounts that are service providers.\n ### Account Info\n The account info APIs provide functionality to fetch and modify account related information such as the company name and the license acknowledged flag.\n ### ActiveSync Access\n These APIs facilitate management of Exchange ActiveSync Devices available on your Microsoft Office 365 account.\n ### ID Proofing\nThese APIs are used to validate the identity of a person by performing a liveness check using a government-issued identity document, such as a driver's license or a passport, and comparing the document photograph with a self-portrait digital photograph (selfie) taken on a mobile device.\n### Entitlements\nThese APIs are used by child tenants to retrieve their own entitlement information.\n\n# Examples\nThe following are examples of Admin API calls that can be used to perform administrative actions. The examples below are not an exhaustive list of possible Admin API actions.\n\n**Important:** You must execute the Authentication (Admin API) call before executing any other Admin API calls. The Authentication (Admin API) call generates a token value that must be included in every other request to be successful.\n\n## Authentication (Admin API)\nTo perform this action, the first step is to submit a POST request to the Admin application. This is the Admin application created on your Identity as a Service account. The URL address of the Admin application includes your Identity as a Service account URL. The format of the URL is:\n```\nhttps://<domainname>.<region>.trustedauth.com/api/web/v1/adminapi/authenticate\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v1/adminapi/authenticate\n```\nThe body of this request should contain the JSON object with an Application ID and Shared Secret. This JSON file was generated during creation of Admin Application on Identity as a Service. For example:\n```\n{\t\"applicationId\": \"d3737e0f-4d8e-431c-b1d8-cd17ad4d633d\",\"sharedSecret\": \"randomSharedSecret\"}\n```\nAn API response is received if the call is successful . For example:\n```\n{\n    \"authToken\": \"GLb6JWz966gCayVNw4lZSSKV6W3PGgsJZ4CagZjoZNMaa2Me7F5OX+CKOVx8sOXsBEdLemVEruixXoaVsjQc1j+GPBy5Qn+KlilA9GXrSEQujsmfiJono3Gta7Uc8b3VUkEBvU193UqWPtmW1NXsSnPV2Z9B2AjZT17zNlHAyOvFpOXTI5bkmj6f2cKses6cBem5kLSbGHH9lHBv4JvXBjNxtPf7urAUkFn8cJariZyb0/q/AYqYL9do8nFrPFmSCTjYeNmxuWm5CACRi17K5XSyhZpu979b3i7MQEeOq1Pfjw7WzdKfrSvLJg/qgYeLD4aSOrQu4HAixZSFBmW9RGDxlo0J0Y1uAAy4lR57yG3p6E8H6OcV3Vakso4CT8yHAFH8xmdsUXXfyv9v+hr5QKh+7iVYro8tjjByRzj6XXAOx0vDO2yhpOd4migv33aWlFEhbgxIzNseJ8je6wauST0O+hJ5kKjl5yLBXS3iKhZJZMG2FNcU5pbD7SnUh79OWoCuOsehOM2pDFDPnMEms5ri/y0yaKIZmtz9Poy6KH1BDd+645+xX8iqW4IeqJ3zW8RZtnJgzAkUFeCjuDtbvotIcR45p8ibXF0GWLFAbxzvc5daf21bBV29A33C7mFoX4id44BZJ6OC8fztmthRzR2l0uP04STG0dgRRTNgZpoqKiMczwbOVNDv7ZQeSf/Kh3n2S1O8SZXHZT+zUvPwCLg9mnhOTYEqPjoMlqTZycttFYv3D4hKbU7NzYmFdtGYreaI2rNNue7aOzn+J8BN0j3+ZHkhimfO/ZfhF89Bn02IRzDER1ENdcwBSO8frWeAR+nCy0m4Eg==\",\n    \"expirationTime\": \"2018-05-28T19:07:50.328+0000\",\n    \"creationTime\": \"2018-05-28T18:52:50.329+0000\"\n}\n```\nYou must include the **auth token** value displayed in this response in subsequent API calls. Without it, other Admin API calls will fail.\n\nAn error code is displayed if the call is unsuccessful. A different error code is displayed for each type of error.\n## Users\n### Create A User\nSubmit a POST request to create a User on your account.\nThe format of the URL is:\n```\nhttps://<domainname>.<region>.trustedauth.com/api/web/v3/users\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n```\nThe body of this request must contain all the fields mentioned in the example below that are configured as mandatory:\n```\n{\n   \"firstName\":\"john\",\n   \"lastName\":\"smith\",\n   \"email\":\"johnsmith@organization.com\",\n   \"userId\":\"john\",\n   \"mobile\":\"+16138561234\",\n   \"phone\":\"+161385699876\",\n   \"locale\":\"\",\n   \"state\":\"ACTIVE\",\n   \"externaId\":null,\n   \"externalSource\":null,\n   \"userAttributeValues\":[\n   ],\n   \"userAliases\": [\n      {\n         \"value\": \"johnny\",\n         \"type\": \"CUSTOM\"\n      }\n   ]\n}\n```\nIn this example, all the required input parameters have been provided. The request would succeed and generate a response that includes all the details of the create user. For example:\n```\n{\n    \"id\": \"2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n    \"userId\": \"john\",\n    \"firstName\": \"john\",\n    \"lastName\": \"smith\",\n    \"email\": \"johnsmith@organization.com\",\n    \"mobile\": \"+16138561234\",\n    \"phone\":\"+161385699876\",\n    \"locale\": null,\n    \"state\": \"ACTIVE\",\n    \"externalId\": null,\n    \"externalSource\": null,\n    \"migrated\": null,\n    \"locked\": false,\n    \"lockoutExpiry\": null,\n    \"otpCreateTime\": null,\n    \"grids\": [],\n    \"tokens\": [\n        {\n            \"id\": \"9a2edcc5-46f0-4fff-89b1-13c0f73e1a5c\",\n            \"type\": \"ENTRUST_SOFT_TOKEN\",\n            \"serialNumber\": \"62461-69384\",\n            \"loadDate\": \"2018-05-29T19:12:54.000+0000\",\n            \"lastUsedDate\": null,\n            \"state\": \"ACTIVATING\",\n            \"platform\": null,\n            \"registeredForTransactions\": false,\n            \"name\": null,\n            \"allowedActions\": [\n                \"REACTIVATE\",\n                \"ACTIVATE_COMPLETE\",\n                \"DELETE\"\n            ],\n            \"description\": null,\n            \"userId\": null\n        }\n    ],\n    \"smartCredentials\": [],\n    \"tempAccessCode\": null,\n    \"userAttributeValues\": [],\n    \"userAliases\": [\n        {\n            \"id\": \"43422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n            \"userId\": \"c633a710-70bd-411e-86be-e1898f1b19f5\",\n            \"value\": \"johnny\",\n            \"type\": \"CUSTOM\"\n        },\n        {\n            \"id\": \"2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n            \"userId\": \"c633a710-70bd-411e-86be-e1898f1b19f5\",\n            \"value\": \"john\",\n            \"type\": \"USERID\"\n        }\n    ],\n    \"groups\": [],\n    \"type\": \"MGMT_UI\"\n}\n```\n### Get a User by UserID\nSubmit a POST request to retrieve user details for a particular User Id. The format of the URL is:\n```\nhttps://<domainname>.<region>.trustedauth.com/api/web/v3/users/userid\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n``` \nThe body of this request must contain **UserID**. For example:\n```\n{\"userId\":\"John\"}\n```\nIn this example, all the required input parameters have been provided. The request would succeed and generate a response that includes the user's information. For example:\n```\n{\n    \"id\": \"2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n    \"userId\": \"john\",\n    \"firstName\": \"john\",\n    \"lastName\": \"smith\",\n    \"email\": \"johnsmith@organization.com\",\n    \"mobile\": \"+16138561234\",\n    \"phone\":\"+161385699876\",\n    \"locale\": null,\n    \"state\": \"ACTIVE\",\n    \"externalId\": null,\n    \"externalSource\": null,\n    \"migrated\": null,\n    \"locked\": false,\n    \"lockoutExpiry\": null,\n    \"otpCreateTime\": null,\n    \"grids\": [],\n    \"tokens\": [\n        {\n            \"id\": \"9a2edcc5-46f0-4fff-89b1-13c0f73e1a5c\",\n            \"type\": \"ENTRUST_SOFT_TOKEN\",\n            \"serialNumber\": \"62461-69384\",\n            \"loadDate\": \"2018-05-29T19:12:54.000+0000\",\n            \"lastUsedDate\": null,\n            \"state\": \"ACTIVATING\",\n            \"platform\": null,\n            \"registeredForTransactions\": false,\n            \"name\": null,\n            \"allowedActions\": [\n                \"REACTIVATE\",\n                \"ACTIVATE_COMPLETE\",\n                \"DELETE\"\n            ],\n            \"description\": null,\n            \"userId\": null\n        }\n    ],\n    \"smartCredentials\": [],\n    \"tempAccessCode\": null,\n    \"userAttributeValues\": [],\n    \"userAliases\": [\n        {\n            \"id\": \"43422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n            \"userId\": \"c633a710-70bd-411e-86be-e1898f1b19f5\",\n            \"value\": \"johnny\",\n            \"type\": \"CUSTOM\"\n        },\n        {\n            \"id\": \"2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n            \"userId\": \"c633a710-70bd-411e-86be-e1898f1b19f5\",\n            \"value\": \"john\",\n            \"type\": \"USERID\"\n        }\n    ],\n    \"groups\": [],\n    \"type\": \"MGMT_UI\"\n}\n```\n## Grids\n### Create a Grid\nSubmit a POST request to create a new Grid Card and assign it to a user. You must include the UUID of the user that you want to assign a Grid Card in the API request. The format of the URL is:\n```\nhttps://<domainname>.<region>.trustedauth.com/api/web/v2/users/{userid}/grids\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v2/users/2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0/grids\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n```\nIn this example, all the required input parameters have been provided. The request would succeed and generate a response that includes the desired Grid Card information. For example:\n```\n{\n    \"id\": \"6c5ad3b4-888c-4d3b-88f2-8ab71ae4f917\",\n    \"serialNumber\": 2,\n    \"createDate\": \"2018-05-29T19:48:24.249+0000\",\n    \"assignDate\": null,\n    \"expiryDate\": null,\n    \"expired\": false,\n    \"lastUsedDate\": null,\n    \"state\": \"ACTIVE\",\n    \"gridContents\": [\n        [\n            \"TP\",\n            \"0M\",\n            \"P8\",\n            \"KW\",\n            \"3D\",\n            \"KR\",\n            \"M1\",\n            \"W0\",\n            \"TJ\",\n            \"F4\"\n        ],\n        [\n            \"9M\",\n            \"MV\",\n            \"88\",\n            \"DX\",\n            \"H3\",\n            \"DV\",\n            \"44\",\n            \"PW\",\n            \"V1\",\n            \"CX\"\n        ],\n        [\n            \"F2\",\n            \"FE\",\n            \"0Q\",\n            \"XN\",\n            \"CD\",\n            \"36\",\n            \"MQ\",\n            \"PN\",\n            \"WF\",\n            \"DD\"\n        ],\n        [\n            \"WN\",\n            \"9F\",\n            \"J4\",\n            \"TF\",\n            \"7J\",\n            \"W4\",\n            \"7M\",\n            \"9Q\",\n            \"1H\",\n            \"W5\"\n        ],\n        [\n            \"QM\",\n            \"21\",\n            \"VQ\",\n            \"39\",\n            \"1N\",\n            \"EV\",\n            \"PT\",\n            \"P4\",\n            \"28\",\n            \"WY\"\n        ]\n    ],\n    \"allowedActions\": [\n        \"DELETE\",\n        \"DISABLE\"\n    ],\n    \"userId\": \"2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n    \"userName\": \"john\"\n}\n```\n### Get a Grid by Id\nSubmit a POST request to display a Grid Card's details. You must include the Grid Card's ID string in the request. The ID is required to identify which Grid Card's details to display. The format of the request URL is:\n```\nhttps://customer.region.trustedauth.com/api/web/v2/users/grids/{gridid}\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v1/users/grids/6c5ad3b4-888c-4d3b-88f2-8ab71ae4f917\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n```\nIn this example, all the required input parameters have been provided. The request would succeed and generate a response that includes Grid Card details. For example:\n```\n{\n    \"id\": \"6c5ad3b4-888c-4d3b-88f2-8ab71ae4f917\",\n    \"serialNumber\": 2,\n    \"createDate\": \"2018-05-29T19:48:24.000+0000\",\n    \"assignDate\": null,\n    \"expiryDate\": null,\n    \"expired\": false,\n    \"lastUsedDate\": null,\n    \"state\": \"ACTIVE\",\n    \"gridContents\": [\n        [\n            \"TP\",\n            \"0M\",\n            \"P8\",\n            \"KW\",\n            \"3D\",\n            \"KR\",\n            \"M1\",\n            \"W0\",\n            \"TJ\",\n            \"F4\"\n        ],\n        [\n            \"9M\",\n            \"MV\",\n            \"88\",\n            \"DX\",\n            \"H3\",\n            \"DV\",\n            \"44\",\n            \"PW\",\n            \"V1\",\n            \"CX\"\n        ],\n        [\n            \"F2\",\n            \"FE\",\n            \"0Q\",\n            \"XN\",\n            \"CD\",\n            \"36\",\n            \"MQ\",\n            \"PN\",\n            \"WF\",\n            \"DD\"\n        ],\n        [\n            \"WN\",\n            \"9F\",\n            \"J4\",\n            \"TF\",\n            \"7J\",\n            \"W4\",\n            \"7M\",\n            \"9Q\",\n            \"1H\",\n            \"W5\"\n        ],\n        [\n            \"QM\",\n            \"21\",\n            \"VQ\",\n            \"39\",\n            \"1N\",\n            \"EV\",\n            \"PT\",\n            \"P4\",\n            \"28\",\n            \"WY\"\n        ]\n    ],\n    \"allowedActions\": [\n        \"DELETE\",\n        \"DISABLE\"\n    ],\n    \"userId\": \"2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0\",\n    \"userName\": \"john\"\n}\n```\n## ID Proofing\n### Initiate an ID Proofing Transaction\nSubmit a POST request to initiate the transaction and obtain the mobile SDK license. You must include a device fingerprint in the request if the service is configured to require it. The format of the request URL is:\n```\nhttps://customer.region.trustedauth.com/api/web/v1/idproofing/init\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v1/idproofing/init\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n``` \nThe body of this request should contain **firstPartyBlackbox**. For example:\n```\n{\n\t\"clientIp\": \"1.2.3.4\",\n\t\"firstPartyBlackbox\": \"0610Jy4JhpaIbhJOJAyOFS...CpysKGn9rI0cgfvRE=\"\n}\n```\n> Checking the reputation of a device using a fingerprint is not supported in this release.\n>\nIn this example, the request would succeed and generate a response that includes the license. For example:\n```\n{\n    \"requestId\": \"0ba70f09-58c8-4a8e-bb87-cf98f4f4c111\",\n    \"deviceCheckResult\": \"ALLOW\",\n    \"deviceCheckReason\": \"\",\n    \"deviceCheckDetails\": {\n        \"device.alias\": \"115993746090684075\",\n        \"device.bb.age\": \"9756913\",\n        \"device.bb.timestamp\": \"2019-09-24T13:56:53Z\",\n        \"device.firstseen\": \"2019-09-19T14:01:06.004Z\",\n        \"device.flash.storage.enabled\": \"0\",\n        \"device.js.enabled\": \"0\",\n        \"device.new\": \"0\",\n        \"device.os\": \"IPHONE 12.4.1\",\n        \"device.type\": \"IPHONE\",\n        ...\n    },\n    \"subscriberId\": \"5f5edd7f-bf52-4c4e-6da3-56a278148bbe\",\n    \"subscriberAccount\": \"example@company.com\",\n    \"subscriberPassword\": \"xyz34@19fdjt&sw2\",\n    ...\n}\n```\nNote the requestId attribute returned. This value must be used in the following interactions with the service.\n\nIf a fingerprint is provided (firstPartyBlackbox attribute in the request) and the deviceCheckResult attribute value is DENY, then the transaction cannot be continued.\n\n### Upload the Front Side Image of a Document ID\nSubmit a PUT request to upload the front image of a supported document ID. The format of the request URL is:\n```\nhttps://customer.region.trustedauth.com/api/web/v1/idproofing/<requestId>/image/0\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v1/idproofing/a63b0b66-1d1d-4834-b393-38a52c5e8304/image/0\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n``` \nThe binary image must be submitted in the body of the HTTP request.\n> If the authentication token has expired and the image is very large, the response sometimes can be a generic Internal Error (500) instead of UNAUTHORIZED (401).  To prevent this, it's recommended to submit an OPTIONS request before submitting the PUT request with the image.  The OPTIONS request will always return UNAUTHORIZED (401) if the authentication token is expired.\n>\n\nIn this example, the image is successfully classified into a well-known document class. For example:\n```\n{\n    \"presentationChanged\": false,\n    \"documentClass\": \"DRIVERSLICENSE\",\n    \"countryCode\": \"USA\",\n    \"supportedFrontImage\": true,\n    \"supportedBackImage\": true\n}\n```\nIf the documentClass attribute value is UNKNOWN, then you need to upload a better image to continue.\n\n### Upload the Back Side Image of a Document ID\nIf the response after submitting a valid Front image includes the \"supportedBackImage\" attribute with value \"true\", then you can submit a PUT request to upload the back image of a supported document ID. The format of the request URL is:\n\nNote that uploading the back of a document is optional as in some cases all the relevant information is available in the front of the document.\n```\nhttps://customer.region.trustedauth.com/api/web/v1/idproofing/<requestId>/image/1\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v1/idproofing/a63b0b66-1d1d-4834-b393-38a52c5e8304/image/1\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n``` \nThe binary image must be submitted in the body of the HTTP request.\n> If the authentication token has expired and the image is very large, the response sometimes can be a generic Internal Error (500) instead of UNAUTHORIZED (401).  To prevent this, it's recommended to submit an OPTIONS request before submitting the PUT request with the image.  The OPTIONS request will always return UNAUTHORIZED (401) if the authentication token is expired.\n>\nIn this example, the image is successfully classified into a well-known document class. For example:\n```\n{\n    \"presentationChanged\": false,\n    \"documentClass\": \"DRIVERSLICENSE\",\n    \"countryCode\": \"USA\",\n    \"supportedFrontImage\": true,\n    \"supportedBackImage\": true\n}\n```\nIf the documentClass attribute value is UNKNOWN, then you need to upload a better image to continue.\n\n### Complete an ID Proofing Transaction using an Standard Facial Recognition License\nIf you are using an Standard Facial Recognition license and the document images uploaded in the previous requests classified correctly, you can now submit a PUT request to upload the selfie that the mobile SDK takes.\n\n```\nhttps://customer.region.trustedauth.com/api/web/v1/idproofing/<requestId>/completeselfie\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v1/idproofing/a63b0b66-1d1d-4834-b393-38a52c5e8304/completeselfie\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n``` \n<p>\nThe binary selfie image must be submitted in the body of the HTTP request.\n\nIn this example, the selfie matches the document ID photo (faceMatch true) but document ID authentication indicates ATTENTION as one of the tests performed on the document didn't PASS--see documentTestResults:\n```\n{\n    \"faceMatch\": true,\n    \"faceMatchScore\": 84,\n    \"documentAuthenticationResult\": \"ATTENTION\",\n    \"documentDataFields\": [\n        {\n            \"description\": \"The person's legal, residence, or mailing address\",\n            \"name\": \"Address\",\n            \"type\": \"STRING\",\n            \"value\": \"WICKENBURG AZ 85390\"\n        },\n        {\n            \"description\": \"City of the person's legal, residence, or mailing address\",\n            \"name\": \"Address City\",\n            \"type\": \"STRING\",\n            \"value\": \"WICKENBURG\"\n        },\n        {\n            \"description\": \"Postal code of the person's address\",\n            \"name\": \"Address Postal Code\",\n            \"type\": \"STRING\",\n            \"value\": \"85390\"\n        },\n        {\n            \"description\": \"State of the person's legal, residence, or mailing address\",\n            \"name\": \"Address State\",\n            \"type\": \"STRING\",\n            \"value\": \"AZ\"\n        },\n        {\n            \"description\": \"The person's date of birth\",\n            \"name\": \"Birth Date\",\n            \"type\": \"DATETIME\",\n            \"value\": \"1987-03-01T00:00:00Z\"\n        },\n        {\n            \"description\": \"The localized version of the document class of the document type\",\n            \"name\": \"Document Class Name\",\n            \"type\": \"STRING\",\n            \"value\": \"Drivers License\"\n        },\n        {\n            \"description\": \"A number that identifies a document\",\n            \"name\": \"Document Number\",\n            \"type\": \"STRING\",\n            \"value\": \"D01405395\"\n        },\n        {\n            \"description\": \"Date that the document will expire\",\n            \"name\": \"Expiration Date\",\n            \"type\": \"DATETIME\",\n            \"value\": \"2007-01-01T00:00:00Z\"\n        },\n        {\n            \"description\": \"The person's first name\",\n            \"name\": \"First Name\",\n            \"type\": \"STRING\",\n            \"value\": \"SAMANTHA\"\n        },\n        {\n            \"description\": \"The person's full name (given name plus surname)\",\n            \"name\": \"Full Name\",\n            \"type\": \"STRING\",\n            \"value\": \"SAMANTHA JANE SAMPLE\"\n        },\n        {\n            \"description\": \"The person's given name\",\n            \"name\": \"Given Name\",\n            \"type\": \"STRING\",\n            \"value\": \"SAMANTHA JANE\"\n        },\n        {\n            \"description\": \"Date that the document was issued\",\n            \"name\": \"Issue Date\",\n            \"type\": \"DATETIME\",\n            \"value\": \"2006-02-23T00:00:00Z\"\n        },\n        {\n            \"description\": \"Abbreviated ID code of the state or country that issued the document\",\n            \"name\": \"Issuing State Code\",\n            \"type\": \"STRING\",\n            \"value\": \"AZ\"\n        },\n        {\n            \"description\": \"Full name of the state or country that issued the document\",\n            \"name\": \"Issuing State Name\",\n            \"type\": \"STRING\",\n            \"value\": \"Arizona\"\n        },\n        {\n            \"description\": \"The person's middle name\",\n            \"name\": \"Middle Name\",\n            \"type\": \"STRING\",\n            \"value\": \"JANE\"\n        },\n        {\n            \"description\": \"Indicates whether the document is a form of identification that meets the increased security standards for US state-issued driver's licenses and identification cards under the REAL ID Act\",\n            \"name\": \"REAL ID Compliant\",\n            \"type\": \"STRING\",\n            \"value\": \"False\"\n        },\n        {\n            \"description\": \"A single character (translated into M/F from other languages) that identifies the person's gender\",\n            \"name\": \"Sex\",\n            \"type\": \"STRING\",\n            \"value\": \"F\"\n        },\n        {\n            \"description\": \"The person's surname or family name\",\n            \"name\": \"Surname\",\n            \"type\": \"STRING\",\n            \"value\": \"SAMPLE\"\n        }\n    ],\n    \"documentTestResults\": [\n        {\n            \"name\": \"Document Expired\",\n            \"description\": \"Checked if the document is expired.\",\n            \"disposition\": \"The document has expired\",\n            \"information\": \"Verified that the document expiration date does not occur before the current date.\",\n            \"actions\": \"The expiration date on the document may have been misread.  Confirm that it is legible and occurs on or after the current date.  Also confirm that the current date and time of the host computer is correctly set.\",\n            \"result\": \"ATTENTION\"\n        },\n        {\n            \"name\": \"Birth Date Valid\",\n            \"description\": \"Verified that the birth date is valid.\",\n            \"disposition\": \"The birth date is valid\",\n            \"information\": \"Verified that the birth date is valid, in the expected format, and occurs on or before the current date and not outside a reasonable range.\",\n            \"actions\": \"The birth date on the document may have been misread.  Confirm that it is legible.\",\n            \"result\": \"PASSED\"\n        },\n        {\n            \"name\": \"Document Classification\",\n            \"description\": \"Verified that the type of document is supported and is able to be fully authenticated.\",\n            \"disposition\": \"The document type is supported\",\n            \"information\": \"Verified that the document is recognized as a supported document type and that the type of document can be fully authenticated.\",\n            \"actions\": \"This test may fail if a document cannot be successfully classified as a supported document type.  This may occur if the document is fraudulent as some fraudulent documents differ so much from authentic documents that they will not be recognized as that type of document.  This may also occur if a valid document is significantly worn or damaged or if the document is of a new or different type that is not yet supported by the library.  The document should be examined manually.\",\n            \"result\": \"PASSED\"\n        },\n        {\n            \"name\": \"Expiration Date Valid\",\n            \"description\": \"Verified that the expiration date is valid.\",\n            \"disposition\": \"The expiration date is valid\",\n            \"information\": \"Verified that the document expiration date is valid, in the expected format, and occurs after the issue and birth dates.\",\n            \"actions\": \"The expiration date on the document may have been misread.  Confirm that it is legible and occurs after the issue and birth dates.\",\n            \"result\": \"PASSED\"\n        },\n        {\n            \"name\": \"Issue Date Valid\",\n            \"description\": \"Verified that the issue date is valid.\",\n            \"disposition\": \"The issue date is valid\",\n            \"information\": \"Verified that the document issue date is valid, in the expected format, does not occur in the future, does not occur before the date of birth, and does not occur after the expiration date.\",\n            \"actions\": \"The issue date on the document may have been misread.  Confirm that all of the dates are legible, the issue date occurs on or before the current date, and is before the expiration date.\",\n            \"result\": \"PASSED\"\n        },\n        {\n            \"name\": \"Visible Pattern\",\n            \"description\": \"Verified the presence of a pattern on the visible image.\",\n            \"disposition\": \"A visible pattern was found\",\n            \"information\": \"Verified that a security feature in the visible spectrum is present and in an expected location on the document.\",\n            \"actions\": \"Check the visible (white) document image to verify the presence of the security feature.  Possible reasons this test may fail for a valid document may be that the document was moving during the capture, or the document may be excessively worn or damaged.\",\n            \"result\": \"PASSED\"\n        }\n    ]\n}\n```\n### Complete an ID Proofing Transaction using an Enhanced Facial Recognition License\nIf you are using an Enhanced Facial Recognition license and the document images uploaded in the previous requests classified correctly, you can now submit a PUT request with the liveness test result that the mobile SDK provides.\n\n```\nhttps://customer.region.trustedauth.com/api/web/v1/idproofing/<requestId>/complete\n```\nFor example:\n```\nhttps://example.us.trustedauth.com/api/web/v1/idproofing/a63b0b66-1d1d-4834-b393-38a52c5e8304/complete\n```\nAn Authorization header field must be included in the header section of this request. The Authorization header stores the value received as \"token\" in the authentication request. The Authorization header can be sent with or without a type value of \"Bearer\". For example:\n```\nAuthorization: Bearer <token>\n```\nor\n```\nAuthorization: <token>\n``` \nThe body of this request must contain **livenessUserId** and **livenessToken**. For example:\n```\n{\n  \"livenessUserId\" : \"919ce7d3-1194-465d-9588-8668b8ac3bac\",\n  \"livenessToken\" : \"31706131726336496d655177346e55503279616b69547344446e5258684c7542\"\n}\n```\n\nThe response from this request is identical to the one you can see in the previous section.\n",
    "contact": {
      "name": "Entrust Identity as a Service",
      "url": "https://www.entrust.com/",
      "email": "support@entrust.com"
    },
    "license": {
      "name": "© 2023 Entrust Corporation. All rights reserved."
    },
    "version": "5.28",
    "x-logo": {
      "altText": "Entrust",
      "url": "entrust.png"
    }
  },
  "servers": [
    {
      "url": "https://customer.region.trustedauth.com"
    }
  ],
  "tags": [
    {
      "name": "Admin Auth",
      "description": "Administration authentication controllers"
    },
    {
      "name": "Users",
      "description": "User controllers"
    },
    {
      "name": "Smart Credentials",
      "description": "Smart Credential controllers"
    },
    {
      "name": "Tokens",
      "description": "Token controllers"
    },
    {
      "name": "Grids",
      "description": "Grid controllers"
    },
    {
      "name": "FIDO Tokens",
      "description": "FIDO Token controllers"
    },
    {
      "name": "Temp Access Codes",
      "description": "Temporary Access Code controllers"
    },
    {
      "name": "KBA",
      "description": "Knowledge-based Authentication controllers"
    },
    {
      "name": "Passwords",
      "description": "Password controllers"
    },
    {
      "name": "OTPs",
      "description": "OTP controllers"
    },
    {
      "name": "User RBA Settings",
      "description": "User RBA Settings controllers"
    },
    {
      "name": "Machine Auth",
      "description": "Machine Authenticator controllers"
    },
    {
      "name": "User Attributes",
      "description": "User Attribute controllers"
    },
    {
      "name": "Roles",
      "description": "Role controllers"
    },
    {
      "name": "Groups",
      "description": "Group controllers"
    },
    {
      "name": "Reports",
      "description": "Reports controllers"
    },
    {
      "name": "Settings",
      "description": "Settings controllers"
    },
    {
      "name": "Applications",
      "description": "Application controllers"
    },
    {
      "name": "Resource Rules",
      "description": "Resource Rules controllers"
    },
    {
      "name": "Directories",
      "description": "Directory controllers"
    },
    {
      "name": "Tenants",
      "description": "Tenant controllers"
    },
    {
      "name": "Account Info",
      "description": "Account information controllers"
    },
    {
      "name": "Devices",
      "description": "Device controllers"
    },
    {
      "name": "ID Proofing",
      "description": "ID Proofing controllers"
    },
    {
      "name": "OAuth Roles",
      "description": "OAuth Role controllers"
    },
    {
      "name": "Entitlements",
      "description": "Entitlement controllers"
    }
  ],
  "paths": {
    "/api/web/v1/accountinfo": {
      "get": {
        "tags": [
          "Account Info"
        ],
        "summary": "Get account info",
        "description": "Get account information. Caller requires the SUBSCRIBERS:VIEW permission.",
        "operationId": "getAccoutInfoUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SUBSCRIBERS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Account Info"
        ],
        "summary": "Update account info",
        "description": "Update account information. Caller requires the SUBSCRIBERS:EDIT permission.",
        "operationId": "updateAccountInfoUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountInfoParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SUBSCRIBERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/adminapi/authenticate": {
      "post": {
        "tags": [
          "Admin Auth"
        ],
        "summary": "Authenticate to an Admin API application.",
        "operationId": "authenticateAdminApiUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminApiAuthentication"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminApiAuthenticationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/web/v1/applications/adminapi": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Admin API application",
        "description": "List Admin API application. Caller requires the APPLICATIONS:VIEW permission.",
        "operationId": "listAdminApiApplicationsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminApiApplication"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:VIEW"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Admin API application",
        "description": "Create an Admin API application. Caller requires the APPLICATIONS:ADD permission.",
        "operationId": "createAdminApiApplicationUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminApiApplicationParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminApiApplication"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/applications/adminapi/regenerate/{id}": {
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Regenerate Admin API application shared secret",
        "description": "Regenerate the shared secret for an Admin API application. Caller requires the APPLICATIONS:EDIT permission.",
        "operationId": "updateAdminApiSharedSecretUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the application to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/applications/adminapi/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Admin API application",
        "description": "Get an Admin API application. Caller requires the APPLICATIONS:VIEW permission.",
        "operationId": "getAdminApiApplicationUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the application to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminApiApplication"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Update Admin API application",
        "description": "Update an Admin API application. Caller requires the APPLICATIONS:EDIT permission.",
        "operationId": "updateAdminApiApplicationUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the application to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminApiApplicationParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminApiApplication"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Remove Admin API application",
        "description": "Remove an Admin API application. Caller requires the APPLICATIONS:REMOVE permission.",
        "operationId": "removeAdminApiApplicationUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the application to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/applications/authapi": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List Auth API applications",
        "description": "List all auth API applications. Caller requires the APPLICATIONS:VIEW permission.",
        "operationId": "listAuthApiApplicationsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuthApiApplication"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:VIEW"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Applications"
        ],
        "summary": "Create Auth API application",
        "description": "Create an auth API application. Caller requires the APPLICATIONS:ADD permission.",
        "operationId": "createAuthApiApplicationUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthApiApplicationParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthApiApplication"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/applications/authapi/{id}": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "Get Auth API application",
        "description": "Get the specified auth API application. Caller requires the APPLICATIONS:VIEW permission.",
        "operationId": "getAuthApiApplicationUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the application to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthApiApplication"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Applications"
        ],
        "summary": "Update Auth API application",
        "description": "Update the specified auth API application. Caller requires the APPLICATIONS:EDIT permission.",
        "operationId": "updateAuthApiApplicationUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the application to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthApiApplicationParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Applications"
        ],
        "summary": "Remove Auth API application",
        "description": "Remove the specified auth API application. Caller requires the APPLICATIONS:REMOVE permission.",
        "operationId": "removeAuthApiApplicationUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the application to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "APPLICATIONS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/applications/templates": {
      "get": {
        "tags": [
          "Applications"
        ],
        "summary": "List application templates",
        "description": "List application templates. Caller requires the TEMPLATES:VIEW permission.",
        "operationId": "listApplicationTemplatesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTemplate"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TEMPLATES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/attributemappings/{id}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get a directory attribute mapping",
        "description": "Get the specified directory attribute mapping. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getDirectoryAttrMappingUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory attribute mapping to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectoryAttributeMapping"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directories": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "List directories",
        "description": "List all directories. Caller requires the DIRECTORIES:VIEW permission.<br><br>The following attributes are not included in the returned Directory object: directoryAttributeMappings, directorySync, groupFilters, searchBases. The get directory API can be used to acquire these attribute for a specific directory.",
        "operationId": "listDirectoriesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Directory"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directories/{id}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get a directory",
        "description": "Get the specified directory. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getDirectoryUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Directory"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directories/{id}/attributemappings": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "List directory attribute mappings",
        "description": "List all directory attribute mappings for a given directory. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getDirectoryAttrMappingsUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory whose directory attribute mappings are to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectoryAttributeMapping"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directories/{id}/directorysyncs": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "List directory sync settings",
        "description": "List all directory sync settings associated with the given directory sync agent. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getDirectorySyncsUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory sync agent whose directory sync settings are to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DirectorySync"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directories/{id}/groupfilters": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "List directory group filters",
        "description": "List all directory group filters for a given directory. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getGroupFiltersUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory whose group filters are to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupFilter"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directories/{id}/searchbases": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "List directory searchbases",
        "description": "List all searchbases for a given directory. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getSearchBasesUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory whose searchbases are to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchBase"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directorysyncinfo/{id}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get directory synchronization status",
        "description": "Get the specified directory synchronization status details. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getDirectorySyncStatusInfoUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory whose synchronization status is to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectorySyncStatusInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/directorysyncs/{id}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get directory synchronization settings",
        "description": "Get the specified directory synchronization settings. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getDirectorySyncUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory synchronization settings to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DirectorySync"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/entitlements/info": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Get entitlement info",
        "description": "Get entitlement info. Caller requires the ENTITLEMENTS:VIEW permission.",
        "operationId": "getSubscriberAccountActiveEntitlementsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountEntitlement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "ENTITLEMENTS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/fidotokens/{fidoid}": {
      "get": {
        "tags": [
          "FIDO Tokens"
        ],
        "summary": "Get a FIDO token",
        "description": "Get the specified FIDO token. Caller requires the FIDOTOKENS:VIEW permission.",
        "operationId": "getFIDOTokenUsingGET",
        "parameters": [
          {
            "name": "fidoid",
            "in": "path",
            "description": "The UUID of the FIDO token to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6c5ad3b4-888c-4d3b-88f2-8ab71ae4f917"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FIDOToken"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "FIDOTOKENS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "FIDO Tokens"
        ],
        "summary": "Update a FIDO token",
        "description": "Update the specified FIDO token. Caller requires the FIDOTOKENS:EDIT permission.",
        "operationId": "updateFIDOTokenUsingPUT",
        "parameters": [
          {
            "name": "fidoid",
            "in": "path",
            "description": "The UUID of the FIDO token to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FIDOTokenParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "FIDOTOKENS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "FIDO Tokens"
        ],
        "summary": "Delete a FIDO token",
        "description": "Delete the specified FIDO token. Caller requires the FIDOTOKENS:REMOVE permission.",
        "operationId": "deleteFIDOTokenUsingDELETE",
        "parameters": [
          {
            "name": "fidoid",
            "in": "path",
            "description": "The UUID of the FIDO token to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "FIDOTOKENS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/grids": {
      "post": {
        "tags": [
          "Grids"
        ],
        "summary": "Create unassigned grids",
        "description": "Create the specified number of unassigned grids. Caller requires the GRIDS:ADD permission.",
        "operationId": "createUnassignedGridsUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridCreateParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Grid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/grids/properties": {
      "get": {
        "tags": [
          "Grids"
        ],
        "summary": "Get grid properties",
        "description": "Get grid properties. Caller requires the GRIDS:VIEW permission.",
        "operationId": "getGridPropertiesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GridProperties"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/grids/{gridid}/email": {
      "post": {
        "tags": [
          "Grids"
        ],
        "summary": "Email a grid card to the card owner",
        "description": "Email a grid card to the card owner. Caller requires the GRIDS:VIEW permission.",
        "operationId": "deliverAssignedGridByEmailUsingPOST",
        "parameters": [
          {
            "name": "gridid",
            "in": "path",
            "description": "The ID of the grid to email.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/grids/{gridid}/export": {
      "get": {
        "tags": [
          "Grids"
        ],
        "summary": "Export a grid to PDF format",
        "description": "Export a grid to PDF format. Caller requires the GRIDS:VIEW permission.",
        "operationId": "getSingleGridExportUsingGET",
        "parameters": [
          {
            "name": "gridid",
            "in": "path",
            "description": "The ID of the grid to export.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GridExport"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/grids/{gridserialnumber}/assign": {
      "put": {
        "tags": [
          "Grids"
        ],
        "summary": "Assign a grid to a user by serial number",
        "description": "Assign the specified grid to a user. Caller requires the GRIDS:EDIT permission.",
        "operationId": "assignGridByIdUsingPUT",
        "parameters": [
          {
            "name": "gridserialnumber",
            "in": "path",
            "description": "The Serial Number of the grid to assign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridAssignParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/grids/{id}/unassign": {
      "put": {
        "tags": [
          "Grids"
        ],
        "summary": "Unassign a grid",
        "description": "Unassigned the specified grid. Caller requires the GRIDS:EDIT permission.",
        "operationId": "unassignGridUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the grid to unassign.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/gridspaged/unassigned": {
      "post": {
        "tags": [
          "Grids"
        ],
        "summary": "Lists a page of unassigned grids",
        "description": "Returns unassigned grids for the provided search parameters. Caller requires the GRIDS:VIEW permission. The following searchByAttributes are supported: <ul><li>serialNumber: a numeric value. Allowed operators are: EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>createDate: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>groupId: a String value should be a UUID of an existing group. Allowed operator: EQUALS. </li></ul>If you provide more than one search attribute, they are joined with an AND condition.<br><br>The orderByAttribute supports these attribute names: serialNumber, createDate.",
        "operationId": "unassignedGridsPageUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GridsPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/groupfilters/{id}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get directory group filter",
        "description": "Get the specified directory group filter. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getGroupFilterUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the directory group filter to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupFilter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "List groups",
        "description": "List all groups. Caller requires the GROUPS:VIEW permission.",
        "operationId": "groupsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GROUPS:VIEW"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Create a group",
        "description": "Create a group with the specified name. Caller requires the GROUPS:ADD permission.",
        "operationId": "createGroupUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GROUPS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/groups/externalid": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "Get a group by externalId",
        "description": "Get the specified group by externalId. Caller requires the GROUPS:VIEW permission.",
        "operationId": "groupByExternalIdUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupId"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GROUPS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/groups/{id}": {
      "get": {
        "tags": [
          "Groups"
        ],
        "summary": "Get a group",
        "description": "Get the specified group. Caller requires the GROUPS:VIEW permission.",
        "operationId": "groupUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the group to fetch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GROUPS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Update a group",
        "description": "Update the specified group. Caller requires the GROUPS:EDIT permission.",
        "operationId": "updateGroupUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the group to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GROUPS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Groups"
        ],
        "summary": "Remove a group",
        "description": "Remove the specified group. Caller requires the GROUPS:REMOVE permission.",
        "operationId": "deleteGroupUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the group to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GROUPS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/groupspaged": {
      "post": {
        "tags": [
          "Groups"
        ],
        "summary": "List a page of groups",
        "description": "Returns groups for the provided search parameters. Caller requires the GROUPS:VIEW permission. The following searchByAttributes are supported: <ul><li>name: a string value that indicates the name of the group. Allowed operators are: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>type: a string with the value that indicates the type of the group. Allowed operator: EQUALS.</li></ul>If you provide more than one search attribute, they are joined with an AND condition.<br><br>The orderByAttribute supports this attribute name: name.<br><br>",
        "operationId": "groupsPagedUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupsPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GROUPS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/idproofing": {
      "post": {
        "tags": [
          "ID Proofing"
        ],
        "summary": "Lists a page of ID Proofing requests",
        "description": "Returns ID Proofing requests for the provided search parameters. Caller requires the IDPROOFING:VIEW permission. The following searchByAttributes are supported: <ul><li>requestTime: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are: GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL. </li><li>deviceCheckResult: a String value. Allowed operator: EQUALS. Allowed values: ALLOW, DENY, NONE, REVIEW.</li><li>state: a String value. Allowed operator: EQUALS. Allowed values: COMPLETE, DEVICE, IMAGE, INIT.</li><li>documentAuthenticationResult: a String value. Allowed operator: EQUALS. Allowed values: NONE, UNKNOWN, PASSED, FAILED, SKIPPED, ATTENTION.</li><li>faceMatch: true or false. Allowed operator: EQUALS. </li></ul>If you provide more than one search attribute, they are joined with an AND condition.<br><br>The orderByAttribute supports these attribute names: requestTime, deviceCheckResult, state, documentAuthenticationResult, faceMatch.<br>",
        "operationId": "idProofingRequestsPagedUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdProofingRequestPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "IDPROOFING:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/idproofing/init": {
      "post": {
        "tags": [
          "ID Proofing"
        ],
        "summary": "Initiates an ID Proofing request, checks the risk of a device and obtains license details",
        "description": "Caller requires the IDPROOFING:ADD permission.",
        "operationId": "idProofingInitUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdProofingInitParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdProofingInitResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "IDPROOFING:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/idproofing/{requestId}": {
      "get": {
        "tags": [
          "ID Proofing"
        ],
        "summary": "Gets an ID Proofing request",
        "description": "Gets an ID Proofing request. Caller requires the IDPROOFING:VIEW permission.",
        "operationId": "idProofingRequestUsingGET",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The UUID of the ID Proofing request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdProofingRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "IDPROOFING:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/idproofing/{requestId}/complete": {
      "put": {
        "tags": [
          "ID Proofing"
        ],
        "summary": "Send liveness check transaction data and performs a face match with the ID Document photo image.",
        "description": "Returns the document authentication result and the face match result.  This ID Proofing API call consumes two transactions and the ID Proofing request status is marked as COMPLETED. Any subsequent ID Proofing API calls using the same requestId will return an error. \nCaller requires the IDPROOFING:EDIT permission.",
        "operationId": "idProofingCompleteUsingPUT",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The UUID of the ID Proofing request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdProofingCompleteParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdProofingAuthenticationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "IDPROOFING:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/idproofing/{requestId}/completeselfie": {
      "put": {
        "tags": [
          "ID Proofing"
        ],
        "summary": "Upload a selfie image and performs a face match with the ID Document photo image.",
        "description": "Returns the document authentication result and the face match result.  This ID Proofing API call consumes two transactions and the ID Proofing request status is marked as COMPLETED. Any subsequent ID Proofing API calls using the same requestId will return an error. \nCaller requires the IDPROOFING:EDIT permission.",
        "operationId": "idProofingCompleteSelfieUsingPUT",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The UUID of the ID Proofing request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "description": "The selfie image.",
                "format": "byte"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdProofingAuthenticationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "IDPROOFING:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/idproofing/{requestId}/image/{side}": {
      "put": {
        "tags": [
          "ID Proofing"
        ],
        "summary": "Upload an ID Document image (binary)",
        "description": "Uploads the front (side = 0) or back (side = 1) of an ID document.\nCaller requires the IDPROOFING:EDIT permission.",
        "operationId": "idProofingImageUsingPUT",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The UUID of the ID Proofing request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "side",
            "in": "path",
            "description": "The side of the ID document image.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "description": "The ID document image.",
                "format": "byte"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdProofingDocumentClassification"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "IDPROOFING:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/iplocations": {
      "post": {
        "tags": [
          "User RBA Settings"
        ],
        "summary": "Create IP location",
        "description": "Gets IP location information for an IP address. The IP location can be used to create an ExpectedLocation. Caller requires the USERRBASETTINGS:ADD permission.",
        "operationId": "ipLocationFromIpAddressUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IpLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IpLocation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERRBASETTINGS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/oauthroles": {
      "get": {
        "tags": [
          "OAuth Roles"
        ],
        "summary": "List oauth roles",
        "description": "List all oauth roles. Caller requires the OAUTHROLES:VIEW permission.",
        "operationId": "listOAuthRolesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OAuthRole"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "OAUTHROLES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/otps": {
      "post": {
        "tags": [
          "OTPs"
        ],
        "summary": "Creates and returns an OTP.",
        "description": "Create and return an OTP. Caller requires the OTPS:ADD permission.",
        "operationId": "createOTPUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPCreateParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTP"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "OTPS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/resourcerules": {
      "get": {
        "tags": [
          "Resource Rules"
        ],
        "summary": "Get all resource rules",
        "description": "Get all resource rules. Caller requires the CONTEXTRULES:VIEW permission.",
        "operationId": "getResourceRulesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceRule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "CONTEXTRULES:VIEW"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Resource Rules"
        ],
        "summary": "Create a resource rule",
        "description": "Create a resource rule for a specified resource. Caller requires the CONTEXTRULES:ADD permission.",
        "operationId": "createResourceRuleUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceRuleParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "CONTEXTRULES:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/resourcerules/resource/{id}": {
      "get": {
        "tags": [
          "Resource Rules"
        ],
        "summary": "Get all resource rules for a resource",
        "description": "Get all resource rules for the specified resource. Caller requires the CONTEXTRULES:VIEW permission.",
        "operationId": "getResourceRulesForResourceUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the resource whose resource rules are to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceRule"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "CONTEXTRULES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/resourcerules/{id}": {
      "get": {
        "tags": [
          "Resource Rules"
        ],
        "summary": "Get a resource rule",
        "description": "Get the specified resource rule. Caller requires the CONTEXTRULES:VIEW permission.",
        "operationId": "getResourceRuleUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the resource rule to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceRule"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "CONTEXTRULES:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Resource Rules"
        ],
        "summary": "Update a resource rule",
        "description": "Update the specified resource rule. Caller requires the CONTEXTRULES:EDIT permission.",
        "operationId": "updateResourceRuleUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the resource rule to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceRuleParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "CONTEXTRULES:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Resource Rules"
        ],
        "summary": "Delete a resource rule",
        "description": "Delete the specified resource rule. Caller requires the CONTEXTRULES:REMOVE permission.",
        "operationId": "removeResourceRuleUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the resource rule to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "CONTEXTRULES:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List roles",
        "description": "List all roles. Caller requires the ROLES:VIEW permission.",
        "operationId": "listSiteRolesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleUser"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "ROLES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/roles/{id}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get a role",
        "description": "Get a specified role. Caller requires the ROLES:VIEW permission.",
        "operationId": "getSiteRoleUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the role to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "ROLES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/scdefns": {
      "get": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "List smart credential definitions",
        "description": "List all the smart credential definition. Caller requires the SCDEFNS:VIEW permission.",
        "operationId": "listSCDefnsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SCDefn"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SCDEFNS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/scdefns/name": {
      "post": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Get a smart credential definition by name",
        "description": "Get the smart credential definition for the specified name. Caller requires the SCDEFNS:VIEW permission.",
        "operationId": "getSCDefnByNameUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SCDefnGetParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SCDefn"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SCDEFNS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/scdefns/{id}": {
      "get": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Get a smart credential definition",
        "description": "Get the smart credential definition for the specified UUID. Caller requires the SCDEFNS:VIEW permission.",
        "operationId": "getSCDefnUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential definition to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SCDefn"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SCDEFNS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/searchbases/{searchbaseid}": {
      "get": {
        "tags": [
          "Directories"
        ],
        "summary": "Get a searchbase",
        "description": "Get the specified searchbase. Caller requires the DIRECTORIES:VIEW permission.",
        "operationId": "getSearchBaseUsingGET",
        "parameters": [
          {
            "name": "searchbaseid",
            "in": "path",
            "description": "The UUID of the searchbase to be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchBase"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "DIRECTORIES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/serviceipaddresses": {
      "get": {
        "tags": [
          "Account Info"
        ],
        "summary": "Get service IP addresses",
        "description": "Get service IP addresses. Caller requires the SUBSCRIBERS:VIEW permission.",
        "operationId": "getServiceIPAddressesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceIPAddresses"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SUBSCRIBERS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/settings/entrustst": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Entrust ST Authenticator settings",
        "description": "Get Entrust ST Authenticator settings. Caller requires the SETTINGS:VIEW permission.",
        "operationId": "getEntrustSTAuthenticatorSettingsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntrustSTAuthenticatorSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Entrust ST Authenticator settings",
        "description": "Update Entrust ST Authenticator settings. Caller requires the SETTINGS:EDIT permission.",
        "operationId": "updateEntrustSTAuthenticatorSettingsUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntrustSTAuthenticatorSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/settings/general": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get general settings",
        "description": "Get general settings. Caller requires the SETTINGS:VIEW permission.",
        "operationId": "getGeneralSettingsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update general settings",
        "description": "Update general settings. Caller requires the SETTINGS:EDIT permission.",
        "operationId": "updateGeneralSettingsUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneralSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/settings/google": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Google Authenticator settings",
        "description": "Get Google Authenticator settings. Caller requires the SETTINGS:VIEW permission.",
        "operationId": "getGoogleAuthenticatorSettingsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GoogleAuthenticatorSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Google Authenticator settings",
        "description": "Update Google Authenticator settings. Caller requires the SETTINGS:EDIT permission.",
        "operationId": "updateGoogleAuthenticatorSettingsUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GoogleAuthenticatorSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/settings/passwordreset": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get Password Reset settings",
        "description": "Get the password reset settings. Caller requires the SETTINGS:VIEW permission.",
        "operationId": "getPasswordResetSettingsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update Password Reset settings",
        "description": "Update the password reset settings. Caller requires the SETTINGS:EDIT permission.",
        "operationId": "updatePasswordResetSettingsUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials": {
      "post": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Create a smart credential",
        "description": "Create a smart credential for a user. Caller requires the SMARTCREDENTIALS:ADD permission.",
        "operationId": "createSmartCredentialUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartCredentialParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartCredential"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/certificate/{id}/export/{format}": {
      "get": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Export a certificate from a smart credential",
        "description": "Export the specified certificate. Caller requires the SMARTCREDENTIALS:VIEW permission.",
        "operationId": "exportCertificateUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the certificate to be exported.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "path",
            "description": "The format in which to export the certificate.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "CA",
                "P7",
                "CERT"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportCertificate"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/certificate/{id}/hold": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Hold a certificate from a smart credential",
        "description": "Hold the specified certificate. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "holdCertificateUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the certificate to be put on hold.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/certificate/{id}/revoke": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Revoke a certificate from a smart credential",
        "description": "Revoke the specified certificate. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "revokeCertificateUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the certificate to be revoked.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/certificate/{id}/unhold": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Unhold a certificate from a smart credential",
        "description": "Unhold the specified certificate. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "unholdCertificateUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the certificate to be put removed from hold.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/serialnumber/{sernum}": {
      "get": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Get a smart credential by serial number",
        "description": "Get the specified smart credential by serial number. Caller requires the SMARTCREDENTIALS:VIEW permission.",
        "operationId": "getSmartCredentialBySerialNumberUsingGET",
        "parameters": [
          {
            "name": "sernum",
            "in": "path",
            "description": "The serial number of the smart credential to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartCredential"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/{id}": {
      "get": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Get a smart credential",
        "description": "Get the specified smart credential. Caller requires the SMARTCREDENTIALS:VIEW permission.",
        "operationId": "getSmartCredentialUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revocationInfo",
            "in": "query",
            "description": "Optional flag indicating if revocation inforamtion should be returned. Defaults to false if not specified.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartCredential"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Update a smart credential",
        "description": "Update the specified smart credential. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "updateSmartCredentialUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartCredentialParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Delete a smart credential",
        "description": "Delete the specified smart credential. Caller requires the SMARTCREDENTIALS:REMOVE permission.",
        "operationId": "deleteSmartCredentialUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/{id}/activate": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Activate a smart credential",
        "description": "Activate the specified smart credential. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "activateSmartCredentialUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential to be activated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateSmartCredentialParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivateSmartCredentialResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/{id}/changestate": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Change smart credential state",
        "description": "Change the state of the specified smart credential. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "changeSmartCredentialStateUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential whose state is to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartCredentialChangeStateParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/{id}/completesign": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Smart credential complete signature",
        "description": "Smart credential complete sign. Caller requires the SMARTCREDENTIALSSIGNATURE:ADD permission.",
        "operationId": "completeSignSmartCredentialUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartCredentialCompleteSignParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartCredentialCompleteSignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALSSIGNATURE:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/{id}/startsign": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Smart credential start signature",
        "description": "Smart credential start sign. Caller requires the SMARTCREDENTIALSSIGNATURE:ADD permission.",
        "operationId": "startSignSmartCredentialUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartCredentialStartSignParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartCredentialStartSignResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALSSIGNATURE:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/{id}/unassign": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Unassign a smart credential",
        "description": "Unassign the specified smart credential. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "unassignSmartCredentialUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential to be unassigned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/smartcredentials/{id}/unblock": {
      "put": {
        "tags": [
          "Smart Credentials"
        ],
        "summary": "Unblock a smart credential",
        "description": "Unblock the specified smart credential. Caller requires the SMARTCREDENTIALS:EDIT permission.",
        "operationId": "unblockSmartCredentialUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the smart credential that is to be unblocked.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmartCredentialUnblockParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SmartCredentialUnblockResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SMARTCREDENTIALS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/syncusers/sync": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Synchronize a new user or an existing user",
        "description": "Synchronize a user. Caller requires the USERS:EDIT permission. An Identity as a Service directory must be configured and associated with an Identity as a Service Gateway 5.0 or later. If you unsynchronize a user using the unsync API, the user becomes locally managed. In order to set the user back to an AD Sync user, the user should be synchronized again using this API. Using an AD Sync crawl will only re-synchronize the user if the user is updated in AD (i.e., the user's last update time in AD is updated) or a new custom user attribute mapping is added for the directory (this resets The last update time for all users such that all AD users will be re-synchronlized).<br/><br/>The following response status attribute values are possible: <ul><li>CONVERTED:  the locally managed Identity as a Service user was converted into an AD Sync user.</li><li>CREATED: a new user was created as an AD Sync user.</li><li>DELETED: the user was not found in AD and has been deleted in Identity as a Service.</li><li>LOCALIZED_ENABLED: the user was not found in AD and has been set as locally managed and enabled in Identity as a Service.</li><li>LOCALIZED_DISABLED: the user was not found in AD and has been set as locally managed and disabled in Identity as a Service.</li><li>UPDATED: the user was synchronized.</li></ul>",
        "operationId": "syncUserUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUserParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncUser"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/syncusers/unsync": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Unsynchronize an existing user",
        "description": "Unsynchronize a user. Caller requires the USERS:EDIT permission. An Identity as a Service directory must be configured and associated with an Identity as a Service Gateway 5.0 or later. If you unsynchronize a user using this API, the user becomes locally managed. In order to set the user back to an AD Sync user, the user should be synchronized again using the sync API. Using an AD Sync crawl will only re-synchronize the user if the user is updated in AD (i.e., the user's last update time in AD is updated) or a new custom user attribute mapping is added for the directory (this resets the last update time for all users such that all AD users will be re-synchronlized).",
        "operationId": "unsyncUserUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsyncUserParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tenants/{id}/spidentityprovider": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get Tenant Identity Provider and Service Provider OIDC Application for Tenant Management.",
        "description": "Get Tenant Identity Provider and Service Provider OIDC Application for Tenant Management. Caller requires the SPIDENTITYPROVIDERS:VIEW permission.",
        "operationId": "getSpIdentityProviderUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the tenant to be obtained.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SPIDENTITYPROVIDERS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Set Tenant Identity Provider and Service Provider OIDC Application for Tenant Management",
        "description": "Set Tenant Identity Provider and Service Provider OIDC Application for Tenant Management. Caller requires the SPIDENTITYPROVIDERS:EDIT permission.",
        "operationId": "setSpIdentityProviderUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the tenant to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpIdentityProviderParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpIdentityProvider"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SPIDENTITYPROVIDERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/sernum/{sernum}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Get a token by serial number",
        "description": "Get the token for the specified serial number. Caller requires the TOKENS:VIEW permission.",
        "operationId": "getTokenBySerialNumberUsingGET",
        "parameters": [
          {
            "name": "sernum",
            "in": "path",
            "description": "The serial number of the token to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}": {
      "get": {
        "tags": [
          "Tokens"
        ],
        "summary": "Get a token",
        "description": "Get the token for the specified UUID. Caller requires the TOKENS:VIEW permission.",
        "operationId": "getTokenUsingGET",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Modify a token",
        "description": "Modify the specified token. Caller requires the TOKENS:EDIT permission.",
        "operationId": "modifyTokenUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tokens"
        ],
        "summary": "Delete a token",
        "description": "Delete the specified token. Caller requires the TOKENS:REMOVE permission.",
        "operationId": "deleteTokenUsingDELETE",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}/activation": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Complete token activation",
        "description": "Complete activation of the given token. Caller requires the TOKENS:ADD permission.",
        "operationId": "completeActivateTokenUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token for which activation is to be completed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateCompleteParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:ADD"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Start token activation",
        "description": "Start activation of the given token. Caller requires the TOKENS:ADD permission.",
        "operationId": "startActivateTokenUsingPOST",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token to be activated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateParms"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivateResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}/assign": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Assign token to user",
        "description": "Given a hardware token, assign it to a user. Caller requires the TOKENS:EDIT permission.",
        "operationId": "assignTokenByIdUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token to be assigned to a user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}/assigned": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Modify an assigned token",
        "description": "Modify an assigned token. Caller requires the TOKENS:EDIT permission.",
        "operationId": "modifyAssignedTokenUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the assigned token to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignedTokenParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}/changestate": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Change token state",
        "description": "Change the state of a token. Caller requires the TOKENS:EDIT permission.",
        "operationId": "changeTokenStateUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token that will have its state changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStateParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}/reset": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Reset a token",
        "description": "Reset a token. Caller requires the TOKENS:EDIT permission.",
        "operationId": "resetTokenUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token to be reset.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}/unassign": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Unassign a token",
        "description": "Unassign a token from a user. Caller requires the TOKENS:EDIT permission.",
        "operationId": "unassignTokenUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token to be unassigned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokens/{tokenid}/unlock": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Unlock a token",
        "description": "Unlock a token. Caller requires the TOKENS:EDIT permission.",
        "operationId": "unlockTokenUsingPUT",
        "parameters": [
          {
            "name": "tokenid",
            "in": "path",
            "description": "The UUID of the token that will be unlocked.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnlockParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnlockResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokenspaged/assigned": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Lists a page of assigned tokens",
        "description": "Returns assigned tokens for the provided search parameters. Caller requires the TOKENS:VIEW permission.The following searchByAttributes are supported: <ul><li>state: NEW, ACTIVE, ACTIVATING or INACTIVE. Allowed operator: EQUALS.</li><li>serialNumber: a String up to 100 characters. Allowed operators are: EQUALS, CONTAINS, STARTS_WITH.</li><li>type: ENTRUST_SOFT_TOKEN, GOOGLE_AUTHENTICATOR, OATH_PHYSICAL_TOKEN or ENTRUST_LEGACY_TOKEN. Allowed operator: EQUALS.</li><li>loadDate: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>lastUsedDate: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>groupId: a String value should be a UUID of an existing group. Allowed operator: EQUALS. </li><li>label: a String up to 100 characters. Allowed operator: CONTAINS. </li></ul>The orderByAttribute supports these attribute names: serialNumber, state, loadDate or lastUsedDate.Sorting by attributes containing Null values such as lastUsedDate is not possible. Therefore, any record containing Null in the orderByAttribute will be filtered out before doing the sorting.",
        "operationId": "assignedTokenPageUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/tokenspaged/unassigned": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Lists a page of unassigned hardware tokens",
        "description": "Returns unassigned hardware tokens for the provided search parameters. Caller requires the TOKENS:VIEW permission.The following searchByAttributes are supported: <ul><li>serialNumber: a String up to 100 characters. Allowed operators are: EQUALS, CONTAINS, STARTS_WITH.</li><li>type: OATH_PHYSICAL_TOKEN or ENTRUST_LEGACY_TOKEN. Allowed operator: EQUALS.</li><li>loadDate: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>groupId: a String value should be a UUID of an existing group. Allowed operator: EQUALS. </li></ul>The orderByAttribute supports these attribute names: serialNumber.",
        "operationId": "unassignedTokenPageUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokensPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/transactionrules": {
      "get": {
        "tags": [
          "Resource Rules"
        ],
        "summary": "List all transaction rules",
        "description": "Get all transaction rules. Caller requires the CONTEXTRULES:VIEW permission.",
        "operationId": "getTransactionRulesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionRuleDescription"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "CONTEXTRULES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/userattributes": {
      "get": {
        "tags": [
          "User Attributes"
        ],
        "summary": "List user attributes",
        "description": "List all user attributes defined for the account. Caller requires the USERATTRIBUTES:VIEW permission.",
        "operationId": "listUserAttributesUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAttribute"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERATTRIBUTES:VIEW"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "User Attributes"
        ],
        "summary": "Create a user attribute",
        "description": "Create a  user attribute. Caller requires the USERATTRIBUTES:ADD permission.",
        "operationId": "createUserAttributeUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAttributeParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERATTRIBUTES:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/userattributes/{id}": {
      "get": {
        "tags": [
          "User Attributes"
        ],
        "summary": "Get a user attribute",
        "description": "Get the specified user attribute. Caller requires the USERATTRIBUTES:VIEW permission.",
        "operationId": "getUserAttributeUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user attribute to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERATTRIBUTES:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User Attributes"
        ],
        "summary": "Modify a user attribute",
        "description": "Modify the specified user attribute. Caller requires the USERATTRIBUTES:EDIT permission.",
        "operationId": "modifyUserAttributeUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user attribute to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAttributeParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAttribute"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERATTRIBUTES:Edit"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User Attributes"
        ],
        "summary": "Delete a user attribute",
        "description": "Delete the specified user attribute. Caller requires the USERATTRIBUTES:REMOVE permission.",
        "operationId": "deleteUserAttributeUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user attribute to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERATTRIBUTES:Remove"
            ]
          }
        ]
      }
    },
    "/api/web/v1/userauthorizationgroup/{userid}/groups": {
      "put": {
        "tags": [
          "Groups"
        ],
        "summary": "Modify user group membership",
        "description": "Modify the list of groups assigned to a specified user. Caller requires the USERS:EDIT permission.",
        "operationId": "modifyUserAuthorizationGroupAssociationsUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose group membership is to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "A list of group UUIDs that will be assigned to the user.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/useroauthrole/{userid}/oauthroles": {
      "put": {
        "tags": [
          "OAuth Roles"
        ],
        "summary": "Modify user oauth role membership",
        "description": "Modify the list of oauth roles assigned to a specified user. Caller requires the USERS:EDIT permission.",
        "operationId": "modifyUserOAuthRoleAssociationsUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose oauth role membership is to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "A list of oauth role UUIDs that will be assigned to the user.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/userquestions/{locale}": {
      "get": {
        "tags": [
          "KBA"
        ],
        "summary": "Get a list of Knowledge-based questions that a user can answer",
        "description": "Get a list of Knowledge-based questions for the specified locale (language). The locale should be the two letter  Caller requires the USERQUESTIONS:VIEW permission.",
        "operationId": "getKbaQuestionsUsingGET",
        "parameters": [
          {
            "name": "locale",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserQuestion"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERQUESTIONS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{id}/grids/assign": {
      "put": {
        "tags": [
          "Grids"
        ],
        "summary": "Assign a user to a grid",
        "description": "Assign the specified user a grid. Caller requires the GRIDS:EDIT permission.",
        "operationId": "assignGridBySerialNumberUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user to which a grid is to be assigned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridAssignParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{id}/state": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user state",
        "description": "Update the state of the specified user. Caller requires the USERS:EDIT permission.",
        "operationId": "updateUserStateUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user whose state is to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangeStateParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{id}/tokens/assign": {
      "put": {
        "tags": [
          "Tokens"
        ],
        "summary": "Assign user to token",
        "description": "Given a user assign a hardware token. Caller requires the TOKENS:EDIT permission.",
        "operationId": "assignTokenBySerialNumberUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user to which the token is to be assigned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{id}/unlock": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Unlock user",
        "description": "Unlock the specified user. Caller requires the USERS:EDIT permission.",
        "operationId": "unlockUserUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user that will be unlocked.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/activesyncdevices": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get ActiveSync devices.",
        "description": "Get ActiveSync devices. Caller requires the ACTIVESYNC:VIEW permission.",
        "operationId": "getCachedActiveSyncDevicesUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SdpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "ACTIVESYNC:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Devices"
        ],
        "summary": "Update ActiveSync devices.",
        "description": "Update ActiveSync devices. Caller requires the ACTIVESYNC:EDIT permission.",
        "operationId": "updateActiveSyncDevicesUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SdpParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SdpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "ACTIVESYNC:EDIT"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Devices"
        ],
        "summary": "Get ActiveSync devices from Office 365.",
        "description": "Get ActiveSync devices. Caller requires the ACTIVESYNC:VIEW permission.",
        "operationId": "getActiveSyncDevicesUsingPOST",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SdpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "ACTIVESYNC:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/activesyncdevices/{deviceid}": {
      "delete": {
        "tags": [
          "Devices"
        ],
        "summary": "Remove ActiveSync devices.",
        "description": "Remove ActiveSync devices. Caller requires the ACTIVESYNC:REMOVE permission.",
        "operationId": "removeActiveSyncDeviceUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceid",
            "in": "path",
            "description": "Id of the device that needs to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SdpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "ACTIVESYNC:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/expectedlocations": {
      "get": {
        "tags": [
          "User RBA Settings"
        ],
        "summary": "List expected locations for a user",
        "description": "Lists the expected locations for the specified user. Caller requires the USERRBASETTINGS:VIEW permission.",
        "operationId": "listUserExpectedLocationsUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose expected locations will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserExpectedLocations"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERRBASETTINGS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User RBA Settings"
        ],
        "summary": "Set expected locations for a user",
        "description": "Sets the list of expected locations for the specified user. Caller requires the USERRBASETTINGS:EDIT permission.",
        "operationId": "setUserExpectedLocationsUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose expected locations will be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The new list of expected locations that will be set for the user.",
                "items": {
                  "$ref": "#/components/schemas/ExpectedLocation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERRBASETTINGS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/kbachallenges": {
      "delete": {
        "tags": [
          "KBA"
        ],
        "summary": "Delete retained knowledge-based authenticator challenges",
        "description": "Delete all retained knowledge-based authenticator challenges for the specified user. Caller requires the USERQUESTIONS:REMOVE permission.",
        "operationId": "deleteUserKbaChallengesUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user from which the retained KBA challenges are to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERQUESTIONS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/machines": {
      "get": {
        "tags": [
          "Machine Auth"
        ],
        "summary": "List machine authenticators for a user",
        "description": "List all machine authenticators for the specified user. Caller requires the USERMACHINES:VIEW permission.",
        "operationId": "listMachineAuthenticatorsUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user for which machine authenticators are to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMachineAuthenticator"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERMACHINES:VIEW"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Machine Auth"
        ],
        "summary": "Create a Machine Authenticator",
        "description": "Create a Machine Authenticator for a user. Caller requires the USERMACHINES:ADD permission.",
        "operationId": "createMachineAuthenticatorUsingPOST",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user for which the machine authenticator is to be added.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineAuthenticatorRegistration"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineAuthenticatorRegistrationResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERMACHINES:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/machines/{id}": {
      "delete": {
        "tags": [
          "Machine Auth"
        ],
        "summary": "Delete a Machine Authenticator",
        "description": "Deletes a Machine Authenticator from a user. Caller requires the USERMACHINES:REMOVE permission.",
        "operationId": "deleteMachineAuthenticatorUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user from which the machine authenticator is to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the machine authenticator which is to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERMACHINES:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/password/validate": {
      "post": {
        "tags": [
          "Passwords"
        ],
        "summary": "Validate user password",
        "description": "Validate user password. Caller requires the USERPASSWORDS:EDIT permission.",
        "operationId": "validateUserPasswordUsingPOST",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose password is to be validated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordValidationParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordValidationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERPASSWORDS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/passwords": {
      "get": {
        "tags": [
          "Passwords"
        ],
        "summary": "Gets a user password",
        "description": "Get password information for the specified user. Caller requires the USERPASSWORDS:VIEW permission.",
        "operationId": "getUserPasswordUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose password information is to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPassword"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERPASSWORDS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Passwords"
        ],
        "summary": "Set a user password",
        "description": "Set a user password for the specified user. Caller requires the USERPASSWORDS:EDIT permission.",
        "operationId": "setUserPasswordUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose password is to be created or modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPasswordParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPassword"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERPASSWORDS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Passwords"
        ],
        "summary": "Delete a user password",
        "description": "Delete the user's password. Caller requires the USERPASSWORDS:REMOVE permission.",
        "operationId": "deleteUserPasswordUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user from which the password will be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERPASSWORDS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/roles": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "List all site roles assigned to user",
        "description": "List all site roles assigned to the specified user. Caller requires the USERSITEROLES:VIEW permission.",
        "operationId": "getUserRolesUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERSITEROLES:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/roles/{roleid}": {
      "get": {
        "tags": [
          "Roles"
        ],
        "summary": "Get site role assigned to user",
        "description": "Get the specified site role assigned to the specified user. Caller requires the USERSITEROLES:VIEW permission.",
        "operationId": "getUserSiteRoleAssociationUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user to which the role is assigned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "path",
            "description": "The UUID of the role assigned to the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERSITEROLES:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Roles"
        ],
        "summary": "Set user role",
        "description": "Set the role of the given user to the given role. Caller requires the USERSITEROLES:EDIT permission.",
        "operationId": "modifyUserSiteRoleAssociationUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose role is to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "path",
            "description": "The UUID of the role which will be assigned to the user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERSITEROLES:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Roles"
        ],
        "summary": "Delete a site role from a user",
        "description": "Delete a user's site role. Caller requires the USERSITEROLES:REMOVE permission.",
        "operationId": "deleteUserSiteRoleAssociationUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user from which the role is to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roleid",
            "in": "path",
            "description": "The UUID of the role that is to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERSITEROLES:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/settings/password": {
      "get": {
        "tags": [
          "Passwords"
        ],
        "summary": "Gets a user password settings",
        "description": "Get password settings information for the specified user. Caller requires the USERPASSWORDS:VIEW permission.",
        "operationId": "getUserPasswordSettingsUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose password settings information is to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPasswordSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERPASSWORDS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/tempaccesscode": {
      "get": {
        "tags": [
          "Temp Access Codes"
        ],
        "summary": "Get a temporary access code",
        "description": "Get the temporary access code for the given user. Caller requires the TEMPACCESSCODE:VIEW permission.",
        "operationId": "getTempAccessCodeUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose temporary access code will be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TempAccessCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TEMPACCESSCODE:VIEW"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Temp Access Codes"
        ],
        "summary": "Create a temporary access code",
        "description": "Create a temporary access code for the given user. Caller requires the TEMPACCESSCODE:ADD permission.",
        "operationId": "createTempAccessCodeUsingPOST",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user for which a temporary access code will be created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TempAccessCode"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TEMPACCESSCODE:ADD"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Temp Access Codes"
        ],
        "summary": "Delete a temporary access code",
        "description": "Delete the temporary access code for the given user. Caller requires the TEMPACCESSCODE:REMOVE permission.",
        "operationId": "deleteTempAccessCodeUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose temporary access code will be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TEMPACCESSCODE:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/tokens/{type}": {
      "post": {
        "tags": [
          "Tokens"
        ],
        "summary": "Create a token",
        "description": "Create a token of the given type for the given user. Caller requires the TOKENS:ADD permission.",
        "operationId": "createTokenUsingPOST",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user for which a token is to be created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of the token to be created. Only soft tokens can be created so this value must be one of ENTRUST_SOFT_TOKEN or GOOGLE_AUTHENTICATOR.",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ENTRUST_PHYSICAL_TOKEN",
                "ENTRUST_SOFT_TOKEN",
                "GOOGLE_AUTHENTICATOR",
                "OATH_PHYSICAL_TOKEN",
                "ENTRUST_LEGACY_TOKEN"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreateParms"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TOKENS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/userlocations": {
      "get": {
        "tags": [
          "User RBA Settings"
        ],
        "summary": "Get user location history",
        "description": "Get the location history of the specified user. Caller requires the USERRBASETTINGS:VIEW permission.",
        "operationId": "listUserLocationsUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose location history is to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserLocation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERRBASETTINGS:VIEW"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "User RBA Settings"
        ],
        "summary": "Delete user location history",
        "description": "Delete one or more entries from a user's location history. Caller requires the USERRBASETTINGS:REMOVE permission.",
        "operationId": "deleteUserLocationsUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose location history is to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "A list of UUIDs of location history entries that are to be removed from the user.",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERRBASETTINGS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/userquestions": {
      "get": {
        "tags": [
          "KBA"
        ],
        "summary": "Get the knowledge-based authenticator",
        "description": "Get the knowledge-based authenticator for the specified user. Caller requires the USERQUESTIONS:VIEW permission.",
        "operationId": "getUserKbaUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose KBA information is to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnowledgeBasedAuthenticator"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERQUESTIONS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "KBA"
        ],
        "summary": "Modify a knowledge-based authenticator",
        "description": "Modify a knowledge-based authenticator for the specified user. Caller requires the USERQUESTIONANSWERS:EDIT permission.",
        "operationId": "updateKnowledgeBasedAuthenticatorUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBasedAuthenticator"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERQUESTIONANSWERS:EDIT"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "KBA"
        ],
        "summary": "Add a knowledge-based authenticator",
        "description": "Add a knowledge-based authenticator for the specified user. Caller requires the USERQUESTIONANSWERS:ADD permission.",
        "operationId": "addKnowledgeBasedAuthenticatorUsingPOST",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnowledgeBasedAuthenticator"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERQUESTIONANSWERS:ADD"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "KBA"
        ],
        "summary": "Delete the knowledge-based authenticator",
        "description": "Delete the knowledge-based authenticator for the specified user. Caller requires the USERQUESTIONS:REMOVE permission.",
        "operationId": "deleteUserKbaUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose KBA infomration is to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERQUESTIONS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/userquestions/{id}": {
      "delete": {
        "tags": [
          "KBA"
        ],
        "summary": "Delete a question from the knowledge-based authenticator",
        "description": "Delete a specified question from the knowledge-based authenticator of the specified user. Caller requires the USERQUESTIONS:REMOVE permission.",
        "operationId": "deleteUserKbaQuestionUsingDELETE",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user from which a specific KBA question is to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the question to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERQUESTIONS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v1/users/{userid}/userrbasettings": {
      "get": {
        "tags": [
          "User RBA Settings"
        ],
        "summary": "Get user risk-based authentication settings",
        "description": "Get the user risk-based authentication settings for the specified user. Caller requires the USERRBASETTINGS:VIEW permission.",
        "operationId": "getUserRbaSettingsUsingGET",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose RBA settings will be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRbaSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERRBASETTINGS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "User RBA Settings"
        ],
        "summary": "Update user risk-based authentication settings",
        "description": "Update the user risk-based authentication settings for the specified user. Caller requires the USERRBASETTINGS:EDIT permission.",
        "operationId": "updateUserRbaSettingsUsingPUT",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user whose RBA settings will be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRbaSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERRBASETTINGS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v2/grids/sernum/{sernum}": {
      "get": {
        "tags": [
          "Grids"
        ],
        "summary": "Get a grid by serial number",
        "description": "Get the grid for the specified serial number. Caller requires the GRIDS:VIEW permission.",
        "operationId": "getGridBySerialNumberUsingGET",
        "parameters": [
          {
            "name": "sernum",
            "in": "path",
            "description": "The serial number of the grid to be retrieved.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v2/grids/{gridid}": {
      "get": {
        "tags": [
          "Grids"
        ],
        "summary": "Get a grid",
        "description": "Get the specified grid. Caller requires the GRIDS:VIEW permission.",
        "operationId": "getGridUsingGET",
        "parameters": [
          {
            "name": "gridid",
            "in": "path",
            "description": "The UUID of the grid to be retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6c5ad3b4-888c-4d3b-88f2-8ab71ae4f917"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Grids"
        ],
        "summary": "Modify unassigned grid",
        "description": "Modify the specified unassigned grid. Caller requires the GRIDS:EDIT permission.",
        "operationId": "modifyUnassignedGridUsingPUT",
        "parameters": [
          {
            "name": "gridid",
            "in": "path",
            "description": "The UUID of the grid to be modified.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "6c5ad3b4-888c-4d3b-88f2-8ab71ae4f917"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Grids"
        ],
        "summary": "Delete a grid",
        "description": "Delete the specified grid. Caller requires the GRIDS:REMOVE permission.",
        "operationId": "deleteGridUsingDELETE",
        "parameters": [
          {
            "name": "gridid",
            "in": "path",
            "description": "The UUID of the grid to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v2/grids/{gridid}/changestate": {
      "put": {
        "tags": [
          "Grids"
        ],
        "summary": "Change state of grid",
        "description": "Change the state of the specified grid. Caller requires the GRIDS:EDIT permission.",
        "operationId": "changeGridStateUsingPUT",
        "parameters": [
          {
            "name": "gridid",
            "in": "path",
            "description": "The UUID of the grid whose state is to be changed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridChangeStateParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v2/gridspaged/assigned": {
      "post": {
        "tags": [
          "Grids"
        ],
        "summary": "Lists a page of assigned grids",
        "description": "Returns assigned grids for the provided search parameters. Caller requires the GRIDS:VIEW permission. The following searchByAttributes are supported: <ul><li>serialNumber: a numeric value. Allowed operators are: EQUALS, GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>state: ACTIVE, INACTIVE, PENDING, CANCELED. Allowed operator: EQUALS.</li><li>expired: 'true' is the only value allowed. Allowed operator: EQUALS. </li><li>createDate: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>expiryDate: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>lastUsedDate: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL.</li><li>userId: a String value. Allowed operators are: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>groupId: a String value should be a UUID of an existing group. Allowed operator: EQUALS. </li></ul>If you provide more than one search attribute, they are joined with an AND condition.<br><br>The orderByAttribute supports these attribute names: serialNumber, state, createDate, expiryDate, lastUsedDate, userId.<br>The results will only include grids that contain data in the orderByAttribute selected.",
        "operationId": "assignedGridsPageUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GridsPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v2/reports/auditeventspaged": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Lists a page of audit events",
        "description": "Returns audit events for the provided search parameters. Caller requires the REPORTS:VIEW permission.The following searchByAttributes are supported: <ul><li>eventTime: a <b>mandatory</b> String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are: GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL. </li><li>outcome: SUCCESS or FAIL. Allowed operator: EQUALS. </li><li>category: AUTHENTICATION or MANAGEMENT. Allowed operator: EQUALS. </li><li>entityName: a String up to 100 characters. Allowed operators: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>entityType: a String up to 40 characters (e.g., USERS, GROUPS, QUESTIONS, REPORTS, ROLES). Allowed operators: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>entityAction: a String up to 100 characters (e.g., ADD, EDIT, REMOVE, ASSIGN, RESET). Allowed operators: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>resourceName: a String up to 100 characters. Allowed operators: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>sourceIp: a String up to 39 characters. Allowed operators: EQUALS, STARTS_WITH. </li><li>subjectName: a String up to 100 characters (e.g., jsmith). Allowed operators: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>eventType: a String up to 100 characters (e.g., AuthenticationDeniedEvent). Allowed operators: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>subject: Restrict events to the UUID of a specific subject. Allowed operator: EQUALS. </li></ul>If you provide more than one search attribute, they are joined with an AND condition.<br><br>The orderByAttribute supports these attribute names: eventTime, outcome, category, entityName, entityType, entityAction, resourceName, sourceIp, subjectName.<br>The results will only include audit events with data in the orderByAttribute selected. If ordering by entityName, entityType, or entityAction, then AUTHENTICATION events will not be returned.",
        "operationId": "auditEventPageUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "REPORTS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v2/reports/auditeventspaged/siem": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Lists a page of audit events (SIEM)",
        "description": "Returns audit events for the provided search parameters in ascending order always. Caller requires the REPORTS:VIEW permission.The following searchByAttributes are supported: <ul><li>startTime: a <b>mandatory</b> String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are: GREATER_THAN_OR_EQUAL. </li><li>endTime: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-31T18:15:30). Allowed operators are: LESS_THAN_OR_EQUAL. </li><li>outcome: SUCCESS or FAIL. Allowed operator: EQUALS. </li><li>category: AUTHENTICATION or MANAGEMENT. Allowed operator: EQUALS. </li></ul>If you provide more than one search attribute, they are joined with an AND condition.<br><br>The orderByAttribute is not used even if provided. Results are returned in ascending order always (oldest to newest event)",
        "operationId": "siemAuditEventPageUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEventPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "REPORTS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v2/users/{userid}/grids": {
      "post": {
        "tags": [
          "Grids"
        ],
        "summary": "Create a grid",
        "description": "Create a grid for the specified user. Caller requires the GRIDS:ADD permission.",
        "operationId": "createGridUsingPOST",
        "parameters": [
          {
            "name": "userid",
            "in": "path",
            "description": "The UUID of the user for which a grid will be created.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2c422a2f-e8ae-4af8-8b03-e1ce0ddde0b0"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GridCreateParms"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Grid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "GRIDS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v3/settings/otp": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get OTP authenticator settings",
        "description": "Get OTP authenticator settings. Caller requires the SETTINGS:VIEW permission.",
        "operationId": "getOTPAuthenticatorSettingsUsingGET",
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTPAuthenticatorSettings"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Settings"
        ],
        "summary": "Update OTP authenticator settings",
        "description": "Update OTP authenticator settings. Caller requires the SETTINGS:EDIT permission.",
        "operationId": "updateOTPAuthenticatorSettingsUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPAuthenticatorSettings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SETTINGS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v3/users": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "description": "Create a user. Caller requires the USERS:ADD permission.",
        "operationId": "createUserUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v3/users/externalid": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user by externalId",
        "description": "Get the user with the specified externalId.\nCaller requires the USERS:VIEW permission.",
        "operationId": "userByExternalIdUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGetParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v3/users/multiple": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update multiple users",
        "description": "Update multiple users. Caller requires the USERS:EDIT permission.",
        "operationId": "updateUsersUsingPUT",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUsersParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateUserResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create multiple users",
        "description": "Create multiple users. Caller requires the USERS:ADD permission.",
        "operationId": "createUsersUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUsersParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateUserResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:ADD"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete multiple users",
        "description": "Delete multiple users. Caller requires the USERS:REMOVE permission.",
        "operationId": "deleteUsersUsingDELETE",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteUsersParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeleteUserResult"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v3/users/userid": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user by userid or user alias",
        "description": "Get the specified user by userid or user alias.\nCaller requires the USERS:VIEW permission.",
        "operationId": "userByUseridUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGetParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v3/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user by UUID",
        "description": "Get the specified user by UUID.\nCaller requires the USERS:VIEW permission.",
        "operationId": "userUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "description": "Update the specified user. Caller requires the USERS:EDIT permission.",
        "operationId": "updateUserUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:EDIT"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "description": "Delete the specified user. Caller requires the USERS:REMOVE permission.",
        "operationId": "deleteUserUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the user to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenants": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Create a tenant",
        "description": "Create a new tenant for a service provider. Caller requires the TENANTS:ADD permission from a service provider role.<br>Notes on CreateTenantParms attributes: <br><b>adminUser</b> (UserParms):<ul><li>The locale attribute is ignored if provided. It defaults to English for the first super administrator.</li><li>The status attributes is ignored if provided. It defaults to ACTIVE for the first super administrator.</li><li>The userId is required.</li></ul> <br><b>adminApiApplication</b> (AdminApiApplicationParms):<ul><li>The spRoleId attribute is not supported. An error is returned if provided.</li></ul> <br><b>entitlements</b> (EntitlementParms):<ul><li>The contractMode attribute is required. It must be either TRIAL or PRODUCTION.</li><li>The quantity attribute is required.</li><li><b>entitlements.issuance</b> (EntitlementParms.IssuanceParms):<ul><li>The entitlements.issuance attribute is required if you are creating an Issuance tenant.</li><li>The serviceBundles attribute is required. One service bundle (of those  supported by the service provider contract) must be defined.</li></ul></li></ul><br>",
        "operationId": "createTenantUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTenantParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTenantResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TENANTS:ADD"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenants/entitlements/usage": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Lists a page of entitlement usage information",
        "description": "Returns tenant usage information for the provided search parameters. Caller requires the TENANTS:VIEW permission. The following searchByAttributes are supported: <ul><li>startTime: a <b>mandatory</b> String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are: GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL. </li><li>endTime: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are: GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL. </li><li>tenantId: The UUID of the tenant. Allowed operators are: EQUALS.</li><li>isTrial: true or false. Allowed operator: EQUALS. </li><li>usageType: the type of entitlement: USERS, AUTHENTICATIONS, IDPROOFING, ISSUANCE. Allowed operator: EQUALS. </li></ul>The orderByAttribute supports these attribute names: startTime.",
        "operationId": "getEntitlementUsageInfoUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageInfoPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TENANTS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenants/{id}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get a tenant",
        "description": "Get the specified tenant for a service provider. Caller requires the TENANTS:VIEW permission from a service provider role.",
        "operationId": "getTenantUsingGET",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the tenant to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tenant"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TENANTS:VIEW"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Tenants"
        ],
        "summary": "Delete a tenant",
        "description": "Delete the specified tenant for a service provider. Caller requires the TENANTS:REMOVE permission from a service provider role.",
        "operationId": "removeTenantUsingDELETE",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the tenant to be removed.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TENANTS:REMOVE"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenants/{id}/lock": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Lock a tenant",
        "description": "Lock the specified tenant for a service provider. Caller requires the TENANTS:EDIT permission from a service provider role.",
        "operationId": "lockTenantUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the tenant to be locked.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TENANTS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenants/{id}/unlock": {
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Unlock a tenant",
        "description": "Unlock the specified tenant for a service provider. Caller requires the TENANTS:EDIT permission from a service provider role.",
        "operationId": "unlockTenantUsingPUT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The UUID of the tenant to be unlocked.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TENANTS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenants/{tenantid}/entitlements": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get entitlements for tenant",
        "description": "Get all entitlements for the specified tenant of the current service provider. Caller requires the SPENTITLEMENTS:VIEW permission from a service provider role.",
        "operationId": "getTenantEntitlementsUsingGET",
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The UUID of the tenant whose entitlements are to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SPENTITLEMENTS:VIEW"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Tenants"
        ],
        "summary": "Set an entitlement",
        "description": "Set the entitlement for the specified tenant. Caller requires the SPENTITLEMENTS:EDIT permission from a service provider role.",
        "operationId": "setTenantEntitlementUsingPUT",
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The UUID of the tenant whose entitlement is to be set.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntitlementParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SPENTITLEMENTS:EDIT"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenants/{tenantid}/entitlements/{type}": {
      "get": {
        "tags": [
          "Tenants"
        ],
        "summary": "Get an entitlement",
        "description": "Get the specified entitlement for a tenant. Caller requires the SPENTITLEMENTS:VIEW permission from a service provider role.",
        "operationId": "getTenantEntitlementUsingGET",
        "parameters": [
          {
            "name": "tenantid",
            "in": "path",
            "description": "The UUID of the tenant whose entitlement is to be fetched.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "The type of entitlement (only USERS is supported).",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "USERS",
                "TRANSACTIONS"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "SPENTITLEMENTS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v4/tenantspaged": {
      "post": {
        "tags": [
          "Tenants"
        ],
        "summary": "Lists a page of tenants",
        "description": "Returns tenants for the provided search parameters. Caller requires the TENANTS:VIEW permission. The following searchByAttributes are supported: <ul><li>hostname: a String up to 100 characters. Allowed operators are: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH.</li><li>companyName: a String up to 100 characters. Allowed operators are: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH.</li><li>contractMode: PRODUCTION, TRIAL, UNKNOWN. Allowed operator: EQUALS.</li><li>locked: true or false. Allowed operator: EQUALS. </li><li>serviceProvider: true or false. Allowed operator: EQUALS. </li><li>authenticationAccount: true or false. Allowed operator: EQUALS. </li><li>issuanceAccount: true or false. Allowed operator: EQUALS. </li><li>spIdp: true or false. Allowed operator: EQUALS. </li></ul>The orderByAttribute supports these attribute names: hostname, companyName, contractMode, locked, serviceProvider, authenticationAccount, issuanceAccount, spIdp.",
        "operationId": "getTenantsPageUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantsPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "TENANTS:VIEW"
            ]
          }
        ]
      }
    },
    "/api/web/v4/userspaged": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Lists a page of users",
        "description": "Returns users for the provided search parameters. Caller requires the USERS:VIEW permission. The following searchByAttributes are supported: <ul><li>userId: a String value (it matches both the User ID or any alias). Allowed operators are: EQUALS, NOT_EQUALS, CONTAINS, NOT_CONTAINS, STARTS_WITH, ENDS_WITH. </li><li>groupId: a String value should be a UUID of an existing group. Allowed operator: EQUALS. </li><li>roleId: a String value should be a UUID of an existing role. Allowed operator: EQUALS. </li><li>authenticator: a String with value ENTRUST_SOFT_TOKEN or FIDO or GOOGLE_AUTHENTICATOR or GRID or HARDWARE_TOKEN or KBA or OTP or PASSWORD or SMARTCREDENTIALPUSH or TEMP_ACCESS_CODE. Allowed operator: EQUALS, NOT_EQUALS. </li><li>state: ACTIVE or INACTIVE. Allowed operator: EQUALS. </li><li>locked: 'true' is the only value allowed. Allowed operator: EQUALS. </li><li>userType: a String with value LOCAL or SYNC or EXTERNAL. Allowed operator: EQUALS. </li><li>registrationRequired: true or false. Allowed operator: EQUALS. </li><li>verificationRequired: true or false. Allowed operator: EQUALS. </li><li>lastAuthTime: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL, EXISTS, NOT_EXISTS.</li><li>passwordExpirationTime: a String value representing an ISO-8601 date in UTC time (e.g., 2018-08-04T18:15:30). Allowed operators are:  GREATER_THAN, GREATER_THAN_OR_EQUAL, LESS_THAN, LESS_THAN_OR_EQUAL, EXISTS, NOT_EXISTS.</li></ul>If you provide more than one search attribute, they are joined with an AND condition.<br><br>The orderByAttribute supports these attribute names: userId, state, lastAuthTime.<br><br>The following attributes can be optionally included in the returned User object: grids, tokens, smartCredentials, tempAccessCode, fidoTokens, userAttributeValues, userAliases, groups, oauthRoles, authenticatorLockoutStatus",
        "operationId": "usersPagedUsingPOST",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchParms"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "401": {
            "description": "Access denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        },
        "security": [
          {
            "AdminAPIAuthentication": [
              "USERS:VIEW"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountAuditEvent": {
        "required": [
          "eventTime"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "The UUID of the account containing this audit event."
          },
          "auditDetails": {
            "$ref": "#/components/schemas/AuditDetails"
          },
          "entityAction": {
            "type": "string",
            "description": "For a management event, the action that was performed."
          },
          "entityId": {
            "type": "string",
            "description": "For a management event, the UUID of the entity that was acted upon."
          },
          "entityName": {
            "type": "string",
            "description": "For a management event, the name of the entity that was acted upon."
          },
          "entityType": {
            "type": "string",
            "description": "For a management event, the entity type that was acted upon."
          },
          "eventCategory": {
            "type": "string",
            "description": "The category of the event.  Values are AUTHENTICATION or MANAGEMENT.",
            "enum": [
              "AUTHENTICATION",
              "MANAGEMENT",
              "ISSUANCE"
            ]
          },
          "eventOutcome": {
            "type": "string",
            "description": "The outcome of the event.  Values are success or fail.",
            "enum": [
              "SUCCESS",
              "FAIL"
            ]
          },
          "eventTime": {
            "type": "string",
            "description": "The time of this event.",
            "format": "date-time"
          },
          "eventType": {
            "type": "string",
            "description": "The type of the event."
          },
          "eventVersion": {
            "type": "string",
            "description": "Version information for future use."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this audit event."
          },
          "message": {
            "type": "string",
            "description": "A message key describing the event."
          },
          "requiredPermission": {
            "type": "string",
            "description": "The permission used for a management event."
          },
          "resourceId": {
            "type": "string",
            "description": "The UUID of the resource associated with the event.  For example the UUID of the application to which a user is authenticating."
          },
          "resourceName": {
            "type": "string",
            "description": "The name of the resource."
          },
          "serviceProviderAdminRoleId": {
            "type": "string",
            "description": "A UUID of the service provider role used for a management event."
          },
          "serviceProviderAdminRoleName": {
            "type": "string",
            "description": "The name of the service provider role."
          },
          "sourceIp": {
            "type": "string",
            "description": "The IP address of the client performing this event."
          },
          "subject": {
            "type": "string",
            "description": "The UUID of the subject that performed this event.  For administration events the subject will be the administrator or administration API application that performed the event.  For authentication events the subject will be the user that performed the authentication."
          },
          "subjectName": {
            "type": "string",
            "description": "The name of the subject that performed this event.  For users the value will be the user's user Id. For administration API applications, the value will be the application's name."
          },
          "subjectType": {
            "type": "string",
            "description": "The type of the subject that performed this event.  Values are USER or ADMIN_API.",
            "enum": [
              "USER",
              "ADMIN_API",
              "SERVICE_PROVIDER",
              "AGENT"
            ]
          },
          "subscriberAdminRoleId": {
            "type": "string",
            "description": "The UUID of the subscriber/site management role used for a management event."
          },
          "subscriberAdminRoleName": {
            "type": "string",
            "description": "The name of the subscriber/site management role."
          },
          "token": {
            "type": "string",
            "description": "Information about what authenticator was used for an authentication event."
          }
        },
        "description": "Information about an audit event returned when querying audit events."
      },
      "AccountEntitlement": {
        "type": "object",
        "properties": {
          "idProofing": {
            "$ref": "#/components/schemas/IdProofing"
          },
          "smsVoice": {
            "$ref": "#/components/schemas/SmsVoice"
          },
          "users": {
            "$ref": "#/components/schemas/UserEntitlement"
          }
        },
        "description": "The active entitlements applicable to the subscriber."
      },
      "AccountInfo": {
        "required": [
          "companyName"
        ],
        "type": "object",
        "properties": {
          "companyCountry": {
            "type": "string",
            "description": "The ISO-3166-1 code of the country the company is located in.",
            "example": "CA"
          },
          "companyName": {
            "type": "string",
            "description": "The name of the company the account belongs to.",
            "example": "Entrust"
          },
          "companyState": {
            "type": "string",
            "description": "The ISO-3166-2 code for the state/province the company is located in.",
            "example": "ON"
          },
          "legalAcknowledged": {
            "type": "boolean",
            "description": "Whether or not the legal agreement has been acknowledged for the account."
          }
        },
        "description": "Account subscriber."
      },
      "AccountInfoParms": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "The name of the company the account belongs to.  The value must be between 1 and 100 characters."
          },
          "legalAcknowledged": {
            "type": "boolean",
            "description": "Whether or not the legal agreement has been acknowledged for the account. This value can only be changed from false to true."
          }
        },
        "description": "New account information."
      },
      "ActivateCompleteParms": {
        "type": "object",
        "properties": {
          "registrationCode": {
            "type": "string",
            "description": "The registration code displayed by the Mobile ST application needed to complete activation of the token."
          }
        },
        "description": "Parameters for the activation completion including the registration code."
      },
      "ActivateParms": {
        "type": "object",
        "properties": {
          "deliverActivationEmail": {
            "type": "boolean",
            "description": "A flag indicating if Identity as a Service should send an activation email including the activation information to the end user. If not specified, this attribute defaults to false."
          },
          "returnQRCode": {
            "type": "boolean",
            "description": "A flag indicating if the QR code for offline activation is returned.  The link encoded in the QR code is always returned for clients that want to encode their own QR code.  If not specified, this attribute defaults to false."
          },
          "type": {
            "type": "array",
            "description": "The list of activation types that will be performed.  Allowed values are: CLASSIC (return activation values that must be manually entered into the mobile application), ONLINE (return a link that when clicked will launch the mobile application) and OFFLINE (return a QR code that can be scanned by the mobile application).  If no values are specified in the list, then all activation types are performed.",
            "items": {
              "type": "string",
              "description": "The list of activation types that will be performed.  Allowed values are: CLASSIC (return activation values that must be manually entered into the mobile application), ONLINE (return a link that when clicked will launch the mobile application) and OFFLINE (return a QR code that can be scanned by the mobile application).  If no values are specified in the list, then all activation types are performed.",
              "enum": [
                "CLASSIC",
                "ONLINE",
                "OFFLINE"
              ]
            }
          }
        },
        "description": "Optional parameters specifying how the token is to be activated. If not specified, all activation types are used, the QR code is returned and the activation email is sent."
      },
      "ActivateResult": {
        "type": "object",
        "properties": {
          "activationAddress": {
            "type": "string",
            "description": "The activation address for the token.  This value should be entered into the Mobile ST application if you want to perform manual activaiton."
          },
          "activationCode": {
            "type": "string",
            "description": "The activation code for the token.  This value should be entered into the Mobile ST application if you want to perform manual activation"
          },
          "activationOnlineHttpURL": {
            "type": "string",
            "description": "The HTTP activation URL.  Clicking on this URL on your mobile device will redirect you to the Mobile ST application to perform activation."
          },
          "activationOnlineURL": {
            "type": "string",
            "description": "The application specific activation URL.  Clicking on this URL on your mobile device will launch the Mobile ST application to perform activation."
          },
          "activationPassword": {
            "type": "string",
            "description": "If the Mobile ST prompts you to enter an activation password during activation, this attribute is the password you must enter."
          },
          "activationQRCode": {
            "type": "string",
            "description": "The base-64 encoded activation QR code.  This QR code can be scanned by the Mobile ST application to perform activation."
          },
          "activationURL": {
            "type": "string",
            "description": "The URL encoded in the activation QR code."
          },
          "serialNumber": {
            "type": "string",
            "description": "The serial number of the token."
          }
        },
        "description": "The result of a token activate operation."
      },
      "ActivateSmartCredentialParms": {
        "type": "object",
        "properties": {
          "additionalUserInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "A map which consists of additional attributes and values to be used for smart credential encoding. Currently the only value that is supported is the value with name \"photo\" where the value is a Base-64 encoded JPEG or PNG image or a data URL of the form \"data:image/<type>;base64,<data>\" where <type> is jpeg or png and <data> is a Base-64 encoded JPEG or PNG image."
            },
            "description": "A map which consists of additional attributes and values to be used for smart credential encoding. Currently the only value that is supported is the value with name \"photo\" where the value is a Base-64 encoded JPEG or PNG image or a data URL of the form \"data:image/<type>;base64,<data>\" where <type> is jpeg or png and <data> is a Base-64 encoded JPEG or PNG image."
          },
          "deliverActivationEmail": {
            "type": "boolean",
            "description": "A flag indicating if the activation email should be delivered to the user.  If not set, it defaults to false."
          },
          "mobile": {
            "type": "boolean",
            "description": "A flag indicating if the target is mobile smart credential."
          },
          "requirePassword": {
            "type": "array",
            "description": "A list of which activation types (LINK or QRCODE) should use a random password to encrypt the activation information. If the list is null or empty, QRCODE activation will require a password and LINK will not.",
            "items": {
              "type": "string",
              "description": "A list of which activation types (LINK or QRCODE) should use a random password to encrypt the activation information. If the list is null or empty, QRCODE activation will require a password and LINK will not.",
              "enum": [
                "LINK",
                "QRCODE"
              ]
            }
          },
          "type": {
            "type": "array",
            "description": "A list of activation types (LINK or QRCODE) to perform.  If the list is null or empty, all activation types are performed",
            "items": {
              "type": "string",
              "description": "A list of activation types (LINK or QRCODE) to perform.  If the list is null or empty, all activation types are performed",
              "enum": [
                "LINK",
                "QRCODE"
              ]
            }
          }
        },
        "description": "Parameters for the smart credential activation."
      },
      "ActivateSmartCredentialResult": {
        "type": "object",
        "properties": {
          "activationPassword": {
            "type": "string",
            "description": "If either the QR Code URL or the Link URL were password protected, the password needed to unprotect them."
          },
          "linkHttpURL": {
            "type": "string",
            "description": "The HTTP version of the link activation URL"
          },
          "linkURL": {
            "type": "string",
            "description": "The link activation URL"
          },
          "qrCode": {
            "type": "string",
            "description": "Base-64 encoded activation QR Code"
          },
          "qrCodeURL": {
            "type": "string",
            "description": "The activation URL encoded into the QR Code"
          }
        },
        "description": "Information returned from the activate smart credential operation."
      },
      "AdditionalFeature": {
        "type": "object",
        "properties": {
          "enhancedGeoLocation": {
            "type": "boolean",
            "description": "Enhanced geo location additional feature.",
            "example": true
          }
        },
        "description": "Additional feature"
      },
      "AdminApiApplication": {
        "required": [
          "applicationTemplate",
          "name"
        ],
        "type": "object",
        "properties": {
          "applicationTemplate": {
            "type": "string",
            "description": "The name of the application template specific to this application type.",
            "example": "Administration API"
          },
          "applicationTemplateId": {
            "type": "string",
            "description": "Application template id specific to this application type.",
            "example": "00dc1d40-b512-4159-bccc-e8c1b4524515"
          },
          "description": {
            "type": "string",
            "description": "Short description of application.",
            "example": "application for testing"
          },
          "id": {
            "type": "string",
            "description": "Application ID.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "ipListId": {
            "type": "string",
            "description": "The UUID of the IP Addresses list.",
            "example": "828c4359-b367-4ac9-b164-eebc18664027"
          },
          "lastAuthnDate": {
            "type": "string",
            "description": "Last successful authentication time to use administration api",
            "format": "date-time"
          },
          "logo": {
            "type": "string",
            "description": "Base64 encoded logo image."
          },
          "name": {
            "type": "string",
            "description": "Name of application. ",
            "example": "adminApiApplication"
          },
          "roleId": {
            "type": "string",
            "description": "The UUID of the Site role to be associated with the API application. Pass an empty string value to unset the site role.",
            "example": "53df23b1-5f57-sdc5-tr23-asd345ip6789"
          },
          "sharedSecret": {
            "type": "string",
            "description": "Shared secret for application."
          },
          "spRoleId": {
            "type": "string",
            "description": "The UUID of the service provider role to be associated with the API application. Pass an empty string to unset the service provider role.",
            "example": "53df23b1-5f57-sdc5-tr23-asd345ip6788"
          }
        },
        "description": "Information returned when an Admin API application is fetched from Identity as a Service."
      },
      "AdminApiApplicationParms": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "applicationTemplateId": {
            "type": "string",
            "description": "The UUID of the application template.  This value is only used when creating a new application. If not specified, the default admininstration API template is used.",
            "example": "53df23b1-5f57-sdc5-tr23-asd345ip6789"
          },
          "description": {
            "type": "string",
            "description": "Short description of application.",
            "example": "application for testing"
          },
          "ipListId": {
            "type": "string",
            "description": "The UUID of the IP Addresses list.",
            "example": "828c4359-b367-4ac9-b164-eebc18664027"
          },
          "logo": {
            "type": "string",
            "description": "Base64 encoded logo image."
          },
          "name": {
            "type": "string",
            "description": "Name of application. ",
            "example": "adminApiApplication"
          },
          "roleId": {
            "type": "string",
            "description": "The UUID of the Site role to be associated with the API application. Pass an empty string value to unset the site role. Either this value or spRoleId is required when creating the application.",
            "example": "53df23b1-5f57-sdc5-tr23-asd345ip6789"
          },
          "spRoleId": {
            "type": "string",
            "description": "The UUID of the service provider role to be associated with the API application. Pass an empty string to unset the service provider role. Either this value or roleId is required when creating the application.",
            "example": "53df23b1-5f57-sdc5-tr23-asd345ip6788"
          }
        },
        "description": "Parameters for the new application."
      },
      "AdminApiAuthentication": {
        "required": [
          "applicationId",
          "sharedSecret"
        ],
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "Administration API application id",
            "example": "d3737e0f-4d8e-431c-b1d8-cd17ad4d633d"
          },
          "enableWebSession": {
            "type": "boolean",
            "description": "If set to true, a session cookie named INTELLITRUST_SESSION_ID is returned with the authentication response. This cookie must be returned with all subsequent requests.",
            "example": true
          },
          "sharedSecret": {
            "type": "string",
            "description": "Shared Secret",
            "example": "randomSharedSecret"
          }
        },
        "description": "Parameters passed to authenticate to an Admin API application."
      },
      "AdminApiAuthenticationResult": {
        "type": "object",
        "properties": {
          "authToken": {
            "type": "string",
            "description": "Authorization token returned after a successful authentication."
          },
          "creationTime": {
            "type": "string",
            "description": "Creation time of the authentication token.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "expirationTime": {
            "type": "string",
            "description": "Expiry time of the authentication token.",
            "format": "date-time",
            "example": "2019-02-19T14:15:27Z"
          }
        }
      },
      "ApplicationTemplate": {
        "required": [
          "authenticationMethod",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "authenticationMethod": {
            "type": "string",
            "description": "The type the application template. Possible values are SAML20, RADIUS, AAAS, IDG, OIDC, AUTHAPI, ADMINAPI, SIEMAPI."
          },
          "description": {
            "type": "string",
            "description": "The description of application template."
          },
          "id": {
            "type": "string",
            "description": "The UUID of the application template."
          },
          "name": {
            "type": "string",
            "description": "The name of the application template."
          }
        },
        "description": "Information returned about an Identity as a Service application template."
      },
      "AssignParms": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "When the assign operation is not being performed by an administrator, a token response from the token being assigned must be provided."
          },
          "serialNumber": {
            "type": "string",
            "description": "When assigning a token to a known user, this argument specifies the serial number of the token being assigned."
          },
          "tokenType": {
            "type": "string",
            "description": "When assigning a token to a user this attribute optionally specifies the type of token to be assigned. It can be a value of OATH_PHYSICAL_TOKEN or ENTRUST_LEGACY_TOKEN. This attribute is only required if the serial number is not unique."
          },
          "userId": {
            "type": "string",
            "description": "When assigning a known token to a user, this argument specifies the user Id or user alias of the user to which the token will be assigned."
          }
        },
        "description": "Token assignment parameters including the user id or user alias of the user to which the token is to be assigned."
      },
      "AssignedTokenParms": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Optional label to identify an assigned token: a String up to 100 characters.",
            "example": "PENDING"
          }
        },
        "description": "Arguments specifying the changes to the token."
      },
      "AuditDetails": {
        "type": "object",
        "properties": {
          "entityAttributes": {
            "type": "array",
            "description": "A  list of attributes when an entity is added or removed.",
            "items": {
              "$ref": "#/components/schemas/EntityAttribute"
            }
          },
          "messageTokens": {
            "type": "array",
            "description": "List of tokens referencing event attributes that can be used in the audit message.",
            "items": {
              "type": "string",
              "description": "List of tokens referencing event attributes that can be used in the audit message."
            }
          },
          "modifiedEntityAttributes": {
            "type": "array",
            "description": "A  list of attributes when an entity is modified.",
            "items": {
              "$ref": "#/components/schemas/ModifiedEntityAttribute"
            }
          }
        },
        "description": "Additional audit details that may be included with an audit event."
      },
      "AuditEventPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page from the list of audit events found.",
            "items": {
              "$ref": "#/components/schemas/AccountAuditEvent"
            }
          }
        },
        "description": "Contains paging information and audit events."
      },
      "AuthApiApplication": {
        "required": [
          "applicationTemplate",
          "name"
        ],
        "type": "object",
        "properties": {
          "applicationTemplate": {
            "type": "string",
            "description": "Application template specific to this application type.",
            "example": "Authentication API"
          },
          "applicationTemplateId": {
            "type": "string",
            "description": "Application template id specific to this application type.",
            "example": "00dc1d40-b512-4159-bccc-e8c1b4524515"
          },
          "clientIpSource": {
            "type": "string",
            "description": "Indicates the source of client IP address for risk analysis",
            "example": "FROM_CONNECTION",
            "enum": [
              "NOT_INCLUDED",
              "PROVIDED",
              "FROM_CONNECTION"
            ]
          },
          "description": {
            "type": "string",
            "description": "Short description of application.",
            "example": "application for testing"
          },
          "id": {
            "type": "string",
            "description": "Application id.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "logo": {
            "type": "string",
            "description": "Base64 encoded logo image."
          },
          "name": {
            "type": "string",
            "description": "Name of application. ",
            "example": "authApiApplication"
          },
          "protectedOfflineSettings": {
            "$ref": "#/components/schemas/ProtectedOfflineSettings"
          },
          "userValuesEnabled": {
            "type": "boolean",
            "description": "Defines whether user values function is enabled."
          },
          "verificationRequired": {
            "type": "boolean",
            "description": "Defines whether verification for a user must be satisfied."
          }
        },
        "description": "Information returned when an Auth. API application is fetched from Identity as a Service."
      },
      "AuthApiApplicationParms": {
        "required": [
          "applicationTemplate",
          "name"
        ],
        "type": "object",
        "properties": {
          "applicationTemplate": {
            "type": "string",
            "description": "Application template specific to this application type.",
            "example": "Authentication API"
          },
          "applicationTemplateId": {
            "type": "string",
            "description": "Application template id specific to this application type.",
            "example": "00dc1d40-b512-4159-bccc-e8c1b4524515"
          },
          "clientIpSource": {
            "type": "string",
            "description": "Indicates the source of client IP address for risk analysis",
            "example": "FROM_CONNECTION",
            "enum": [
              "NOT_INCLUDED",
              "PROVIDED",
              "FROM_CONNECTION"
            ]
          },
          "description": {
            "type": "string",
            "description": "Short description of application.",
            "example": "application for testing"
          },
          "logo": {
            "type": "string",
            "description": "Base64 encoded logo image."
          },
          "name": {
            "type": "string",
            "description": "Name of the application. ",
            "example": "authApiApplication"
          },
          "protectedOfflineSettings": {
            "$ref": "#/components/schemas/ProtectedOfflineSettings"
          },
          "userValuesEnabled": {
            "type": "boolean",
            "description": "Flag indicating if user client values is allowed for this application."
          },
          "verificationRequired": {
            "type": "boolean",
            "description": "Defines whether verification for a user must be satisfied."
          }
        },
        "description": "Parameters for the new application."
      },
      "ChangeStateParms": {
        "required": [
          "state"
        ],
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The new state of the token.  The state can be changed from ACTIVE to INACTIVE or INACTIVE to ACTIVE.",
            "enum": [
              "NEW",
              "ACTIVATING",
              "ACTIVE",
              "INACTIVE",
              "UNASSIGNED"
            ]
          }
        },
        "description": "Parameters specifying the new state of the token."
      },
      "CorsOrigin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "CORS origin UUID. This value is generated when the origin is created."
          },
          "origin": {
            "type": "string",
            "description": "Allowed CORS origin. This value can contain port. Wildcard can be used for ports but not for domains. "
          }
        },
        "description": "A list of origins that cross-origin requests are allowed from."
      },
      "CreateTenantParms": {
        "required": [
          "adminUser",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "adminApiApplication": {
            "$ref": "#/components/schemas/AdminApiApplicationParms"
          },
          "adminUser": {
            "$ref": "#/components/schemas/UserParms"
          },
          "deliverWelcomeEmail": {
            "type": "boolean",
            "description": "A flag indicating if a welcome email should be delivered.  If not set, it defaults to false."
          },
          "entitlements": {
            "$ref": "#/components/schemas/EntitlementParms"
          },
          "tenant": {
            "$ref": "#/components/schemas/TenantParms"
          }
        },
        "description": "Parameters used to create the new tenant."
      },
      "CreateTenantResult": {
        "required": [
          "adminUser",
          "tenant"
        ],
        "type": "object",
        "properties": {
          "adminApiApplication": {
            "$ref": "#/components/schemas/AdminApiApplication"
          },
          "adminUser": {
            "$ref": "#/components/schemas/User"
          },
          "tenant": {
            "$ref": "#/components/schemas/Tenant"
          }
        },
        "description": "Information returned from a create tenant request."
      },
      "CreateUserResult": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "success": {
            "type": "boolean",
            "description": "Indicates if the user was successfully created (true) or not (false)."
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "description": "When creating multiple users in a single request, the CreateUserResult value contains the result for a single user.  It will either contain information about the user created or error information describing why the create operation failed."
      },
      "CreateUsersParms": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "stopOnError": {
            "type": "boolean",
            "description": "If set to true, the operation stops on the first operation that fails.  Otherwise the operation continues for each specified user. If not specified, this defaults to false."
          },
          "users": {
            "type": "array",
            "description": "The list of users to be created.",
            "items": {
              "$ref": "#/components/schemas/UserParms"
            }
          }
        },
        "description": "The list of users to be created."
      },
      "DateTimeContext": {
        "required": [
          "riskPoint"
        ],
        "type": "object",
        "properties": {
          "allowedDateTime": {
            "type": "boolean",
            "description": "If true, the startDateTime and endDateTime define the allowed range. If false, the startDateTime and endDateTime define the denied range."
          },
          "allowedTime": {
            "type": "boolean",
            "description": "If true, the startTime and endTime define the allowed time range. If false, the startTime and endTime define the denied time range."
          },
          "endDateTime": {
            "type": "string",
            "description": "If specifying a date range, the end date of the range.",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "If specifying a time range, the end time of the range. The value should be of the form hh:mm:ss",
            "example": "17:00:00"
          },
          "riskPoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The number of risk points that apply if this context applies.",
            "format": "int32"
          },
          "startDateTime": {
            "type": "string",
            "description": "If specifying a date range, the start date of the range.",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "description": "If specifying a time range, the start time of the range. The value should be of the form hh:mm:ss",
            "example": "08:00:00"
          },
          "weekDays": {
            "type": "array",
            "description": "If specifying a time range, the days of the week to which the time range will apply.",
            "items": {
              "type": "string",
              "description": "If specifying a time range, the days of the week to which the time range will apply.",
              "enum": [
                "Mon",
                "Tue",
                "Wed",
                "Thu",
                "Fri",
                "Sat",
                "Sun"
              ]
            }
          },
          "zoneId": {
            "$ref": "#/components/schemas/ZoneId"
          }
        },
        "description": "The DateTimeContext context specifies an allowed or disallowed date or time range. Only a date range or a time range can be specified. Risk is applied to the authentication if the current time is outside an allowed range or inside a disallowed range. A date range specifies a start and end date.  For example 2019/01/01 to 2019/03/01. A time range species a start and end time and days of the week.  For example Monday to Friday, 8am to 5pm."
      },
      "DeleteUserParms": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user to be deleted.  The type of the id is specified by idType."
          },
          "idType": {
            "type": "string",
            "description": "The type of the id identifying the user.  The value can be one of UUID (the user's internal UUID), USERID (the user's userId) or EXTERNALID (the externalId of the user). If not specified, this defaults to UUID.",
            "enum": [
              "UUID",
              "USERID",
              "EXTERNALID"
            ]
          }
        },
        "description": "When deleting multiple users in a single request, the DeleteUserParms value contains the id of a single user to be deleted."
      },
      "DeleteUserResult": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "success": {
            "type": "boolean",
            "description": "Indicates if the user was successfully deleted (true) or not (false)."
          }
        },
        "description": "When deleting multiple users in a single request, the DeleteUserResult value contains the result for a single user.  It will indicate if the operation succeeded and if it failed will include error information describing why the  operation failed."
      },
      "DeleteUsersParms": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "stopOnError": {
            "type": "boolean",
            "description": "If set to true, the operation stops on the first operation that fails.  Otherwise the operation continues for each specified user. If not specified, this defaults to false."
          },
          "users": {
            "type": "array",
            "description": "The list of users to be deleted.",
            "items": {
              "$ref": "#/components/schemas/DeleteUserParms"
            }
          }
        },
        "description": "The list of UUIDs of users to be deleted."
      },
      "DigitalId": {
        "type": "object",
        "properties": {
          "certificates": {
            "type": "array",
            "description": "The certificates associated with this digital id.",
            "items": {
              "$ref": "#/components/schemas/DigitalIdCert"
            }
          },
          "digitalIdConfigId": {
            "type": "string",
            "description": "The UUID of the digital Id config that defines this digital Id."
          },
          "digitalIdConfigName": {
            "type": "string",
            "description": "The name of the digital id Config that defines this digital Id."
          },
          "digitalIdConfigType": {
            "type": "string",
            "description": "The type of this digital Id.",
            "enum": [
              "PIV_CARDHOLDER",
              "PIV_CARD"
            ]
          },
          "dn": {
            "type": "string",
            "description": "The current DN of the digital id."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this DigitalId."
          }
        },
        "description": "Information stored about a digital id."
      },
      "DigitalIdCert": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description providing the purpose of this certificate."
          },
          "digitalIdId": {
            "type": "string",
            "description": "The UUID of the digital id to which this certificate belongs"
          },
          "digitalIdType": {
            "type": "string",
            "description": "The type of the digital Id to which this certificate belongs.",
            "enum": [
              "PIV_CARDHOLDER",
              "PIV_CARD"
            ]
          },
          "id": {
            "type": "string",
            "description": "The UUID of this Digital Id Certificate."
          },
          "issuerDN": {
            "type": "string",
            "description": "The issuer DN of this certificate."
          },
          "notAfter": {
            "type": "string",
            "description": "The expiry date of this certificate.",
            "format": "date-time"
          },
          "notBefore": {
            "type": "string",
            "description": "The issue date of this certificate.",
            "format": "date-time"
          },
          "pivContainer": {
            "type": "string",
            "description": "The name of the PIV container that stores this certificate on the smart card."
          },
          "serialNumber": {
            "type": "string",
            "description": "The serial number of this certificate."
          },
          "status": {
            "type": "string",
            "description": "The status of this certificate. If not set, the revocation status has not been retrieved from the CA.",
            "enum": [
              "ACTIVE",
              "REVOKED",
              "HOLD",
              "EXPIRED",
              "NOT_AVAILABLE"
            ]
          },
          "subjectDN": {
            "type": "string",
            "description": "The subject DN of this certificate."
          }
        },
        "description": "Information stored about a certificate associated with a digital id."
      },
      "DigitalIdConfig": {
        "type": "object",
        "properties": {
          "allCAGroups": {
            "type": "boolean",
            "description": "If true, digital ids using this config will be set to have all CA groups."
          },
          "caGroups": {
            "type": "array",
            "description": "If allCAGroups is set to false then digital ids using this config will use this specified list of CA groups.",
            "items": {
              "type": "string",
              "description": "If allCAGroups is set to false then digital ids using this config will use this specified list of CA groups."
            }
          },
          "caId": {
            "type": "string",
            "description": "The UUID of the CA for this digital id config."
          },
          "caName": {
            "type": "string",
            "description": "The name of the CA for this digital id config."
          },
          "caType": {
            "type": "string",
            "description": "The CA type of this Digital Id Config.",
            "enum": [
              "EDC",
              "MS",
              "PKIAAS"
            ]
          },
          "certTemplates": {
            "type": "array",
            "description": "A list of cert templates associated with this digital id config.",
            "items": {
              "$ref": "#/components/schemas/DigitalIdConfigCertTemplate"
            }
          },
          "certificateType": {
            "type": "string",
            "description": "The CA certificate type which digital ids using this config will use."
          },
          "digitalIdConfigTemplateId": {
            "type": "string",
            "description": "When creating a digital id config, default values can be provided from this specified digital id config template."
          },
          "directoryEntry": {
            "type": "boolean",
            "description": "A flag indicating if digital ids using this config will create directory entries in the CA."
          },
          "dnFormat": {
            "type": "string",
            "description": "The format which digital ids using this config will use for their DN."
          },
          "dnFormatSearchbaseIncluded": {
            "type": "boolean",
            "description": "Whether digital ids using this config should include the searchbase in their DN."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this Digital Id Config."
          },
          "name": {
            "type": "string",
            "description": "The name of this Digital Id Config."
          },
          "role": {
            "type": "string",
            "description": "The CA role which digital ids using this config will use."
          },
          "searchbase": {
            "type": "string",
            "description": "The searchbase within the CA in which digital ids using this config will be created."
          },
          "subjectAltNames": {
            "type": "array",
            "description": "A list of subjectAltNames associated with this digital id config.",
            "items": {
              "$ref": "#/components/schemas/DigitalIdConfigSubjectAltName"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of digital id.",
            "enum": [
              "PIV_CARDHOLDER",
              "PIV_CARD"
            ]
          },
          "userType": {
            "type": "string",
            "description": "The CA user type which digital ids using this config will use."
          },
          "variables": {
            "type": "array",
            "description": "A list of variables associated with this digital id config.",
            "items": {
              "$ref": "#/components/schemas/DigitalIdConfigVariable"
            }
          }
        },
        "description": "Information that defines how digital ids are created in the CA."
      },
      "DigitalIdConfigCertTemplate": {
        "type": "object",
        "properties": {
          "digitalIdConfigId": {
            "type": "string",
            "description": "The UUID of the Digital Id Config that owns this Digital Id Config Cert Template."
          },
          "id": {
            "type": "string",
            "description": "The UUID of the Digital Id Config Cert Template."
          },
          "name": {
            "type": "string",
            "description": "The name of the Digital Id Config Cert Template."
          },
          "pivContainer": {
            "type": "string",
            "description": "The PIV container of the Digital Id Config Cert Template.",
            "enum": [
              "PivAuth",
              "CardAuth",
              "DigSig",
              "KeyMgmt",
              "None"
            ]
          }
        },
        "description": "Information that describes a Digital Id Config Cert Template."
      },
      "DigitalIdConfigSubjectAltName": {
        "type": "object",
        "properties": {
          "digitalIdConfigId": {
            "type": "string",
            "description": "The UUID of the digital id config that owns this subjectAltName."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this Digital Id Config SubjectAltName."
          },
          "type": {
            "type": "string",
            "description": "The type of subjectAltName.",
            "enum": [
              "EMAIL",
              "UPN",
              "IP",
              "DNS",
              "OTHER",
              "X400",
              "DN",
              "EDI",
              "URI",
              "REGISTERED_ID"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value for the subjectAltName."
          }
        },
        "description": "Information that describes a Digital Id Config SubjectAltName."
      },
      "DigitalIdConfigVariable": {
        "type": "object",
        "properties": {
          "digitalIdConfigId": {
            "type": "string",
            "description": "The UUID of the Digital Id Config that owns this Digital Id Config Variable."
          },
          "id": {
            "type": "string",
            "description": "The UUID of the Digital Id Config Variable."
          },
          "includedInDN": {
            "type": "boolean",
            "description": "A flag indicating if values for this variable are included in the Digital Id's DN when it is generated by the CA."
          },
          "name": {
            "type": "string",
            "description": "The name of the Digital Id Config Variable."
          },
          "type": {
            "type": "string",
            "description": "The type of the Digital Id Config Variable.",
            "enum": [
              "CERTIFICATE",
              "USER",
              "VARIABLE",
              "CUSTOM"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value of the Digital Id Config Variable."
          }
        },
        "description": "Information that describes a Digital Id Config Variable."
      },
      "Directory": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "The SSL certificate to connect to the Directory with.",
            "format": "byte",
            "deprecated": true
          },
          "directoryAttributeMappings": {
            "type": "array",
            "description": "Directory attribure mappings.",
            "items": {
              "$ref": "#/components/schemas/DirectoryAttributeMapping"
            }
          },
          "directoryConnections": {
            "type": "array",
            "description": "The connections that you want to connect when syncing.",
            "items": {
              "$ref": "#/components/schemas/DirectoryConnection"
            }
          },
          "directorySync": {
            "$ref": "#/components/schemas/DirectorySync"
          },
          "directorySyncId": {
            "type": "string",
            "description": "The UUID of the directory sync",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "groupFilters": {
            "type": "array",
            "description": "Directory group filters.",
            "items": {
              "$ref": "#/components/schemas/GroupFilter"
            }
          },
          "hostname": {
            "type": "string",
            "description": "The hostname of the Directory Can be an IP address or a hostname.",
            "example": "10.4.1.2 or directory.server.com",
            "deprecated": true
          },
          "id": {
            "type": "string",
            "description": "The UUID of the Directory.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "name": {
            "type": "string",
            "description": "The name of the Directory.",
            "example": "Directory"
          },
          "password": {
            "type": "string",
            "description": "The password to connect to the Directory with."
          },
          "port": {
            "type": "integer",
            "description": "The port to connect to the Directory over.",
            "format": "int32",
            "example": 389,
            "deprecated": true
          },
          "rootDomainNamingContext": {
            "type": "string",
            "description": "The root domain naming context of the Directory.",
            "example": "DC=AnyCorp,DC=biz"
          },
          "searchBases": {
            "type": "array",
            "description": "The searchbases that you want to search when syncing.",
            "items": {
              "$ref": "#/components/schemas/SearchBase"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of the Directory.",
            "example": "AD",
            "enum": [
              "AD",
              "LDAP"
            ]
          },
          "useSsl": {
            "type": "boolean",
            "description": "Whether or not to connect to the Directory using an SSL certificate.",
            "deprecated": true
          },
          "userName": {
            "type": "string",
            "description": "The username to connect to the Directory with. Value must be a fully distinguished name or UPN.",
            "example": "CN=Administrator,CN=Users,DC=AnyCorp,DC=biz or Administrator@AnyCorp.biz"
          }
        },
        "description": "A Directory defines the information returned about a directory."
      },
      "DirectoryAttributeMapping": {
        "type": "object",
        "properties": {
          "directoryAttributeName": {
            "type": "string",
            "description": "The name of the directory attribute being mapped.",
            "example": "givenName"
          },
          "directoryId": {
            "type": "string",
            "description": "The UUID of the Directory the attribute mapping belongs to.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "id": {
            "type": "string",
            "description": "The UUID of the attribute mapping.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "userAttribute": {
            "$ref": "#/components/schemas/UserAttribute"
          },
          "userAttributeId": {
            "type": "string",
            "description": "The UUID of the Identity as a Service User Attribute being mapped to.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          }
        },
        "description": "A DirectoryAttributeMapping defines the information returned about a directory attribute mapping. A directory attribute mapping specifies which directory attribute values are mapped into which Identity as a Service user attributes."
      },
      "DirectoryConnection": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "The SSL certificate to connect to the Directory with.",
            "format": "byte"
          },
          "directoryId": {
            "type": "string",
            "description": "The UUID of the Directory the connection belongs to.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "hostname": {
            "type": "string",
            "description": "The Directory hostname or IP address.",
            "example": "10.4.1.2 or directory.server.com"
          },
          "id": {
            "type": "string",
            "description": "The UUID of the Directory connection."
          },
          "port": {
            "type": "integer",
            "description": "The Directory port.",
            "format": "int32",
            "example": 389
          },
          "useSsl": {
            "type": "boolean",
            "description": "Whether or not to connect to the Directory using an SSL certificate."
          }
        },
        "description": "The connections that you want to connect when syncing."
      },
      "DirectorySync": {
        "type": "object",
        "properties": {
          "crawlFrequency": {
            "type": "integer",
            "description": "The rate at which the directory will be queried in milliseconds",
            "format": "int32",
            "example": 3600000
          },
          "directory": {
            "$ref": "#/components/schemas/Directory"
          },
          "directoryId": {
            "type": "string",
            "description": "The ID of the directory."
          },
          "directorySyncAgentId": {
            "type": "string",
            "description": "The UUID of the Directory Sync Gateway Agent.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "groupNameAttribute": {
            "type": "string",
            "description": "The group name attribute"
          },
          "groupObjectClass": {
            "type": "string",
            "description": "The Group Object Class",
            "example": "groupOfNames"
          },
          "groupSynchronizationType": {
            "type": "string",
            "description": "Group synchronization will be done based on the selected option.",
            "example": "ALL, FILTER or NONE",
            "enum": [
              "ALL",
              "FILTER",
              "NONE"
            ]
          },
          "id": {
            "type": "string",
            "description": "The UUID of the directory.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The last time the directory was updated.",
            "format": "date-time"
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of records that should returned per query. Default is 25.",
            "format": "int32",
            "example": 25
          },
          "state": {
            "type": "string",
            "description": "The status of the Directory Sync.",
            "example": "CRAWLING",
            "enum": [
              "UNKNOWN",
              "ERROR",
              "PENDING_CHANGES",
              "SYNCED",
              "OUT_OF_SYNC",
              "CRAWLING",
              "CRAWL_COMPLETE",
              "NOTIFYING_GROUPS",
              "NOTIFYING_GROUPS_USERS",
              "NOTIFYING_USERS",
              "NOTIFY_COMPLETE",
              "SYNCING",
              "FAILED"
            ]
          },
          "userDesyncPolicy": {
            "type": "string",
            "description": "User synchronization will be done based on the selected option.",
            "example": "USER_DELETED",
            "enum": [
              "USER_LOCALLY_MANAGED_ENABLED",
              "USER_LOCALLY_MANAGED_DISABLED",
              "USER_DELETED"
            ]
          },
          "userObjectClass": {
            "type": "string",
            "description": "The User Object Class"
          },
          "userUniqueIdAttribute": {
            "type": "string",
            "description": "The User Unique Id Attribute"
          },
          "waitBetweenNotifications": {
            "type": "integer",
            "description": "How long to wait between notifications in milliseconds.",
            "format": "int32",
            "example": 500
          }
        },
        "description": "A DirectorySync defines the information returned about the directory sync configuration of a directory."
      },
      "DirectorySyncStatusInfo": {
        "type": "object",
        "properties": {
          "directoryName": {
            "type": "string",
            "description": "The name of the directory."
          },
          "directoryOrSearchBaseBeingProcessed": {
            "type": "string",
            "description": "The name of the directory or searchbase is being processed."
          },
          "errors": {
            "type": "string",
            "description": "Comma separated list of errors occurred during the AD-sync process."
          },
          "groupsAdded": {
            "type": "integer",
            "description": "The number of groups added.",
            "format": "int32"
          },
          "groupsCreateCount": {
            "type": "integer",
            "description": "The number of groups successfully created in the service database.",
            "format": "int32"
          },
          "groupsDeleteCount": {
            "type": "integer",
            "description": "The number of groups successfully deleted from the service database.",
            "format": "int32"
          },
          "groupsFailCount": {
            "type": "integer",
            "description": "The number of groups failed to be uploaded.",
            "format": "int32"
          },
          "groupsFailed": {
            "type": "integer",
            "description": "The number of groups skipped due to errors.",
            "format": "int32"
          },
          "groupsProcessedSuccessfully": {
            "type": "integer",
            "description": "The number of groups processed successfully.",
            "format": "int32",
            "deprecated": true
          },
          "groupsRemoved": {
            "type": "integer",
            "description": "The number of groups removed.",
            "format": "int32"
          },
          "groupsSyncedWithChanges": {
            "type": "integer",
            "description": "The number of groups changed.",
            "format": "int32"
          },
          "groupsSyncedWithNoChanges": {
            "type": "integer",
            "description": "The number of groups synced with no changes.",
            "format": "int32"
          },
          "groupsUpdateCount": {
            "type": "integer",
            "description": "The number of groups successfully updated in the service database.",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "The UUID of the DirectorySyncStatusInfo."
          },
          "searchbasesProcessed": {
            "type": "integer",
            "description": "The number of search bases already processed.",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "description": "The status of the Directory Sync processed.",
            "example": "CRAWLING",
            "enum": [
              "CRAWLING",
              "CRAWL_COMPLETE",
              "ERROR",
              "NOTIFYING_GROUPS",
              "NOTIFYING_GROUPS_USERS",
              "NOTIFYING_USERS",
              "NOTIFY_COMPLETE",
              "OUT_OF_SYNC",
              "PENDING_CHANGES",
              "SYNCED",
              "UNKNOWN"
            ]
          },
          "syncStarted": {
            "type": "string",
            "description": "The time when the synchronization was started.",
            "format": "date-time"
          },
          "syncUpdated": {
            "type": "string",
            "description": "The last time the directory was updated.",
            "format": "date-time"
          },
          "totalSearchbases": {
            "type": "integer",
            "description": "Total number of search bases to be processed.",
            "format": "int32"
          },
          "usersAdded": {
            "type": "integer",
            "description": "Number of users added.",
            "format": "int32"
          },
          "usersCreateCount": {
            "type": "integer",
            "description": "The number of users successfully created in the service database.",
            "format": "int32"
          },
          "usersDeleteCount": {
            "type": "integer",
            "description": "The number of users successfully deleted from the service database.",
            "format": "int32"
          },
          "usersFailCount": {
            "type": "integer",
            "description": "The number of users failed to be uploaded.",
            "format": "int32"
          },
          "usersFailed": {
            "type": "integer",
            "description": "The number of users skipped due to errors.",
            "format": "int32"
          },
          "usersProcessedSuccessfully": {
            "type": "integer",
            "description": "The number of users processed successfully.",
            "format": "int32",
            "deprecated": true
          },
          "usersRemoved": {
            "type": "integer",
            "description": "The number of users removed.",
            "format": "int32"
          },
          "usersSyncedWithChanges": {
            "type": "integer",
            "description": "The number of users synced with changes.",
            "format": "int32"
          },
          "usersSyncedWithNoChanges": {
            "type": "integer",
            "description": "The number of users synced with no changes.",
            "format": "int32"
          },
          "usersUpdateCount": {
            "type": "integer",
            "description": "The number of users successfully updated in the service database.",
            "format": "int32"
          }
        },
        "description": "A DirectorySyncStatusInfo defines the information returned about the status of the last directory synchronization."
      },
      "Duration": {
        "type": "object",
        "properties": {
          "nano": {
            "type": "integer",
            "format": "int32"
          },
          "negative": {
            "type": "boolean"
          },
          "seconds": {
            "type": "integer",
            "format": "int64"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemporalUnit"
            }
          },
          "zero": {
            "type": "boolean"
          }
        }
      },
      "Entitlement": {
        "required": [
          "endDate",
          "id",
          "quantity",
          "startDate",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "additionalFeatures": {
            "$ref": "#/components/schemas/AdditionalFeature"
          },
          "contractMode": {
            "type": "string",
            "description": "The contract mode of a tenant, allowable values = 'PRODUCTION', 'TRIAL', example='TRIAL'.",
            "enum": [
              "PRODUCTION",
              "TRIAL",
              "UNKNOWN"
            ]
          },
          "contractNumber": {
            "type": "string",
            "description": "The contract number of this entitlement."
          },
          "customerId": {
            "type": "string",
            "description": "The customer ID."
          },
          "endDate": {
            "type": "string",
            "description": "The end date of this entitlement in UTC time.",
            "format": "date-time",
            "example": "2020-02-18T23:59:59Z"
          },
          "entitlementId": {
            "type": "string",
            "description": "The entitlement ID."
          },
          "flashPass": {
            "$ref": "#/components/schemas/MobileFlashPass"
          },
          "fleetManagement": {
            "$ref": "#/components/schemas/FleetManagement"
          },
          "id": {
            "type": "string",
            "description": "The unique UUID of this entitlement."
          },
          "idProofing": {
            "type": "array",
            "description": "The ID Proofing entitlements.",
            "items": {
              "$ref": "#/components/schemas/IdProofing"
            }
          },
          "issuance": {
            "$ref": "#/components/schemas/Issuance"
          },
          "printer": {
            "$ref": "#/components/schemas/PrinterEntitlement"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of this entitlement.",
            "format": "int32",
            "example": 200
          },
          "remaining": {
            "type": "integer",
            "description": "The unused quantity of this entitlement (USERS type only).",
            "format": "int32",
            "example": 37
          },
          "smartLoginEnabled": {
            "type": "boolean",
            "description": "Whether Smart Card Smart Login is enabled or not."
          },
          "smsVoice": {
            "$ref": "#/components/schemas/SmsVoice"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of this entitlement in UTC time.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          },
          "status": {
            "type": "string",
            "description": "The status of this entitlement.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "TERMINATED"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of this entitlement.",
            "enum": [
              "USERS",
              "TRANSACTIONS"
            ]
          },
          "userBundles": {
            "type": "array",
            "description": "The entitlement bundles that defines the set of features available for authentication accounts.",
            "items": {
              "$ref": "#/components/schemas/ServiceBundle"
            }
          }
        }
      },
      "EntitlementParms": {
        "type": "object",
        "properties": {
          "additionalFeatures": {
            "$ref": "#/components/schemas/AdditionalFeature"
          },
          "contractMode": {
            "type": "string",
            "description": "The contract mode of a tenant, allowable values = 'PRODUCTION', 'TRIAL', example='TRIAL'.",
            "enum": [
              "PRODUCTION",
              "TRIAL",
              "UNKNOWN"
            ]
          },
          "contractNumber": {
            "type": "string",
            "description": "The contract number."
          },
          "customerId": {
            "type": "string",
            "description": "The customer ID."
          },
          "endDate": {
            "type": "string",
            "description": "The date this entitlement will end.  The value must be after the start date. If not specified, this value defaults to the end date of the service provider's entitlement.",
            "format": "date-time"
          },
          "entitlementId": {
            "type": "string",
            "description": "The entitlement ID."
          },
          "flashPass": {
            "$ref": "#/components/schemas/FlashPassParms"
          },
          "fleetManagement": {
            "$ref": "#/components/schemas/FleetManagementParms"
          },
          "idProofing": {
            "type": "array",
            "description": "The ID Proofing entitlements.",
            "items": {
              "$ref": "#/components/schemas/IdProofingParms"
            }
          },
          "issuance": {
            "$ref": "#/components/schemas/IssuanceParms"
          },
          "printer": {
            "$ref": "#/components/schemas/PrinterParms"
          },
          "quantity": {
            "maximum": 50000000,
            "minimum": 1,
            "type": "integer",
            "description": "The number of entitlements assigned to the tenant (required during creation). The service provider must have enough available entitlements to meet this request.",
            "format": "int32"
          },
          "smartLoginEnabled": {
            "type": "boolean",
            "description": "Whether Smart Card Smart Login is enabled or not."
          },
          "smsVoice": {
            "$ref": "#/components/schemas/SmsVoiceParms"
          },
          "startDate": {
            "type": "string",
            "description": "The date this entitlement will start.  If not specified, it defaults to the current date.  This value cannot be in the future.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "The status of this entitlement.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "TERMINATED"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of entitlement.  Currently this value must be USERS.  If not specified, this value defaults to USERS.",
            "enum": [
              "USERS",
              "TRANSACTIONS"
            ]
          },
          "usageType": {
            "type": "string",
            "description": "[DEPRECATED] The type of entitlement (ignored if type is provided).  Currently this value must be USERS. If not specified, this value defaults to USERS.",
            "deprecated": true,
            "enum": [
              "USERS",
              "TRANSACTIONS"
            ]
          },
          "userBundles": {
            "type": "array",
            "description": "The entitlement bundles that defines the set of features available for authentication accounts.",
            "items": {
              "$ref": "#/components/schemas/ServiceBundle"
            }
          }
        },
        "description": "Parameters passed when setting the entitlements of a tenant. Entitlements are required."
      },
      "EntityAttribute": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the attribute."
          },
          "value": {
            "type": "string",
            "description": "The value of the attribute."
          }
        },
        "description": "Information about an attribute that was added or removed from an entity."
      },
      "EntrustSTAuthenticatorSettings": {
        "type": "object",
        "properties": {
          "activationLifetime": {
            "minimum": 60,
            "type": "integer",
            "description": "The amount of time in seconds that an activation request is valid.  Default is 300 seconds.",
            "format": "int32"
          },
          "activationTypes": {
            "type": "array",
            "description": "The list of activation types that will be performed.  Allowed values are: CLASSIC (return activation values that must be manually entered into the mobile application), ONLINE (return a link that when clicked will launch the mobile application) and OFFLINE (return a QR code that can be scanned by the mobile application).  If no values are specified in the list then activation types are not updated.",
            "items": {
              "type": "string",
              "description": "The list of activation types that will be performed.  Allowed values are: CLASSIC (return activation values that must be manually entered into the mobile application), ONLINE (return a link that when clicked will launch the mobile application) and OFFLINE (return a QR code that can be scanned by the mobile application).  If no values are specified in the list then activation types are not updated.",
              "enum": [
                "CLASSIC",
                "ONLINE",
                "OFFLINE"
              ]
            }
          },
          "allowUnsecureDevice": {
            "type": "boolean",
            "description": "A flag indicating if the Mobile soft token can be activated on a rooted device. Default is false."
          },
          "facialRecognitionAllowed": {
            "type": "boolean",
            "description": "A flag indicating if the facial recognition feature supported by the Entrust Soft Token application is allowed. The default is false."
          },
          "maxResetTimeSteps": {
            "maximum": 1200,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of 30 second timestamps that a result response is validated. Default is 120.",
            "format": "int32"
          },
          "maxTimeSteps": {
            "maximum": 120,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of 30 second timesteps over which a response is validated. The default is 10.",
            "format": "int32"
          },
          "mutualChallengeAlphabet": {
            "type": "string",
            "description": "Characters that can appear in a mutual challenge. Can contain any non-whitespace character. Default is all digits."
          },
          "mutualChallengeEnabled": {
            "type": "boolean",
            "description": "A flag indicating if the Push Authentication Mutual Challenge is enabled. The default is false."
          },
          "mutualChallengeForPercentOfRequests": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "An integer value that specifies what percent of requests have a mutual challenge. Default is 100.",
            "format": "int32"
          },
          "mutualChallengeLength": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The length of the mutual challenge. Default is 2.",
            "format": "int32"
          },
          "mutualChallengeSize": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "description": "The number of mutual challenges return in a batch. Default is 3.",
            "format": "int32"
          },
          "offlineActivationPasswordLength": {
            "maximum": 20,
            "minimum": 4,
            "type": "integer",
            "description": "The length of the random password generated to encrypt an activation QR code. Default is 8.",
            "format": "int32"
          },
          "onlineActivationPasswordLength": {
            "maximum": 32,
            "minimum": 16,
            "type": "integer",
            "description": "The length of the random password generated for an online activation. Default is 16.",
            "format": "int32"
          },
          "otpLength": {
            "type": "integer",
            "description": "The length of the OTP generated by the soft token. The default is 8.",
            "format": "int32",
            "example": 8,
            "enum": [
              6,
              8
            ]
          },
          "pinRequired": {
            "type": "boolean",
            "description": "A flag indicating if this token requires that a PIN be enabled on the Entrust Soft Token application. The default is true."
          },
          "scheme": {
            "type": "string",
            "description": "Specifies the URL scheme used in soft token activation URLs. It should specify the URL scheme associated with the mobile application to be used. This value should only be changed if you are using your own mobile application written using the Entrust ST SDK.  The default value is igmobileotp which corresponds to the Entrust ST application."
          }
        },
        "description": "New Entrust ST Authenticator settings."
      },
      "ErrorInfo": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "Error Codes specific to cause of failure.",
            "example": "invalid_user_response"
          },
          "errorMessage": {
            "type": "string",
            "description": "Additional Error Message describing the error.",
            "example": "Application id cannot be null"
          },
          "parameters": {
            "type": "array",
            "description": "Optional additional error information.",
            "items": {
              "type": "object",
              "description": "Optional additional error information."
            }
          }
        },
        "description": "Object containing information about errors reported by services."
      },
      "ExpectedLocation": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "The city name--always returned in upper-case."
          },
          "countryCode": {
            "type": "string",
            "description": "A two-character (alpha-2) ISO 3166-1  country code."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this expected location."
          },
          "ipAddress": {
            "type": "string",
            "description": "The IPv4 Address."
          },
          "isp": {
            "type": "string",
            "description": "The ISP name--always returned in upper-case."
          },
          "privateIpAddress": {
            "type": "boolean",
            "description": "Whether the IP provided is a private IP Address.  The value is ignored when adding an ExpectedLocation. It is returned when getting ExpectedLocations if the location has an IP address defined"
          }
        },
        "description": "Information stored for an expected location."
      },
      "ExportCertificate": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "description": "Certificate information as a PEM encoded value."
          }
        }
      },
      "FIDOToken": {
        "type": "object",
        "properties": {
          "allowedActions": {
            "type": "array",
            "description": "Administration actions that can be performed on this FIDO token.",
            "items": {
              "type": "string",
              "description": "Administration actions that can be performed on this FIDO token.",
              "enum": [
                "DELETE",
                "ENABLE",
                "DISABLE",
                "RENAME"
              ]
            }
          },
          "createDate": {
            "type": "string",
            "description": "The date on which the FIDO token was created.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "id": {
            "type": "string",
            "description": "The unique UUID assigned to the fido token when it is registered."
          },
          "lastUsedDate": {
            "type": "string",
            "description": "The date on which this FIDO token was last used for authentication. This value will be null if the FIDO token has never been used.",
            "format": "date-time",
            "example": "2019-02-21T11:37:27Z"
          },
          "name": {
            "type": "string",
            "description": "The name of this FIDO token."
          },
          "state": {
            "type": "string",
            "description": "The state of this FIDO token.  Only FIDO tokens in the ACTIVE state can be used for authentication.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "userId": {
            "type": "string",
            "description": "The user Id of the user who owns this FIDO token."
          },
          "userIdStored": {
            "type": "boolean",
            "description": "Indicates if the userId was stored on the FIDO token."
          },
          "userUUID": {
            "type": "string",
            "description": "The UUID of the user who owns this FIDO token."
          }
        },
        "description": "A FIDOToken defines the information returned about a FIDO Token."
      },
      "FIDOTokenParms": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of this FIDO token."
          },
          "state": {
            "type": "string",
            "description": "The state of this FIDO token.  Only FIDO tokens in the ACTIVE state can be used for authentication.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        },
        "description": "The parameters specifying what is to be changed."
      },
      "FlashPassParms": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "integer",
            "description": "The number of FlashPass pass claims allowed during the Trial period.",
            "format": "int32",
            "example": 25,
            "enum": [
              25,
              100
            ]
          }
        },
        "description": "Parameters passed when setting the Issuance entitlements of a tenant."
      },
      "FleetManagement": {
        "type": "object",
        "properties": {
          "addOn": {
            "type": "string",
            "description": "Add on column to store fleetManagementOptIn flag"
          },
          "consumed": {
            "type": "integer",
            "description": "The entitlements consumed since start date during the entitlement period.",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the entitlement will end.",
            "format": "date-time",
            "example": "2020-02-19T00:00:00Z"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of FlashPass claims allowed during the period.",
            "format": "int32",
            "example": 1000
          },
          "startDate": {
            "type": "string",
            "description": "The date when the entitlement starts.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          }
        },
        "description": "FleetManagement entitlements of a tenant."
      },
      "FleetManagementParms": {
        "type": "object",
        "description": "Parameters passed when setting the fleet management entitlements of a tenant."
      },
      "GeneralSettings": {
        "type": "object",
        "properties": {
          "authenticationSessionLifetime": {
            "maximum": 3600,
            "minimum": 60,
            "type": "integer",
            "description": "The amount of time in seconds before an authenticated user needs to re-authenticate. Default is 900.",
            "format": "int32"
          },
          "authenticatorActivationType": {
            "type": "string",
            "description": "A setting that indicates the type of token automatically created for the user when it is created. Choices are NONE, ENTRUST_SOFT_TOKEN or GOOGLE_AUTHENTICATOR. Default is ENTRUST_SOFT_TOKEN.",
            "enum": [
              "NONE",
              "ENTRUST_SOFT_TOKEN",
              "GOOGLE_AUTHENTICATOR"
            ]
          },
          "corsEnabled": {
            "type": "boolean",
            "description": "A flag that indicates if CORS is enabled for this account."
          },
          "corsOrigins": {
            "type": "array",
            "description": "A list of origins that cross-origin requests are allowed from.",
            "items": {
              "$ref": "#/components/schemas/CorsOrigin"
            }
          },
          "defaultGrid": {
            "type": "boolean",
            "description": "A flag that indicates if a grid card is created for the user when it is created.",
            "default": false
          },
          "defaultMobileSmartCredential": {
            "type": "boolean",
            "description": "A flag that indicates whether to automatically enroll a smart credential for the user when it is created. Default is false."
          },
          "defaultPassword": {
            "type": "boolean",
            "description": "A flag that indicates if a default password is created for the user when it is created. Default is true."
          },
          "dynamicLinkingTransactionLifetime": {
            "maximum": 3600,
            "minimum": 60,
            "type": "integer",
            "description": "The amount of time in seconds before a dynamic linking transaction expired. Default is 300.",
            "format": "int32"
          },
          "enableEnhancedAuthenticationDetails": {
            "type": "boolean",
            "description": "Indicates whether to enable Enhanced Authentication Details or not.",
            "example": true
          },
          "lockoutCount": {
            "maximum": 20,
            "minimum": 1,
            "type": "integer",
            "description": "The number of failed authentications before a user is locked out. Default is 5.",
            "format": "int32"
          },
          "lockoutLifetime": {
            "type": "integer",
            "description": "The amount of time in seconds before a user lockout expires.  A value of 0 means the lockout never expires. Minimum is 0. Default is 0.",
            "format": "int32"
          },
          "lockoutMode": {
            "type": "string",
            "description": "The lockout mode to use for your IntelliTrust account. The AUTHENTICATOR lockout mode means a per-authenticator lockout will be enforced. When a user locks an authenticator they can no longer use that authenticator but can still use an alternative authenticator to log in. The USER lockout mode will lock out a user if any of their authenticators have been locked.",
            "enum": [
              "AUTHENTICATOR",
              "USER"
            ]
          },
          "maxFIDOTokensPerUser": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of FIDO tokens that a user can have.  Default is 5.",
            "format": "int32"
          },
          "maxGridsPerUser": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of grids that a user can have.  Default is 5.",
            "format": "int32"
          },
          "maxNumberOfPushTransactionsQueued": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum number of queued push transactions. Default is 1.",
            "format": "int32"
          },
          "maxSmartCredentialsPerUser": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of smart credentials that a user can have.  Default is 3.",
            "format": "int32"
          },
          "maxTokensPerUser": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of tokens that a user can have.  Default is 5.",
            "format": "int32"
          },
          "pushAuthenticationLifetime": {
            "maximum": 3600,
            "minimum": 60,
            "type": "integer",
            "description": "The amount of time in seconds before a push authentication requires expires if a response is not received from the mobile application.  Default is 300.",
            "format": "int32"
          },
          "pushTransactionLifetime": {
            "maximum": 43200,
            "minimum": 60,
            "type": "integer",
            "description": "The amount of time in seconds that a push transaction can be queued.  Default is 60.",
            "format": "int32"
          },
          "registrationPeriod": {
            "maximum": 365,
            "minimum": 0,
            "type": "integer",
            "description": "The user registration period in days. Default is 0. Deprecated: use the SelfServiceSettings registrationEnabled attribute.",
            "format": "int32",
            "deprecated": true
          },
          "showOnboardingWizard": {
            "type": "boolean",
            "description": "Indicates whether the Get Started wizard should be shown or not.",
            "example": true
          },
          "smartCredentialDefn": {
            "type": "string",
            "description": "The UUID of the Smart Credential Definition to use when a user enrolls a Smart Credential."
          }
        },
        "description": "New general settings."
      },
      "GoogleAuthenticatorSettings": {
        "type": "object",
        "properties": {
          "maxResetTimeSteps": {
            "maximum": 1200,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of 30 second timestamps that a result response is validated. Default is 120.",
            "format": "int32"
          },
          "maxTimeSteps": {
            "maximum": 120,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum number of 30 second timesteps over which a response is validated. The default is 10.",
            "format": "int32"
          }
        },
        "description": "New Google Authenticator settings."
      },
      "Grid": {
        "type": "object",
        "properties": {
          "allowedActions": {
            "type": "array",
            "description": "A list of what actions are currently allowed for this grid.",
            "items": {
              "type": "string",
              "description": "A list of what actions are currently allowed for this grid.",
              "enum": [
                "CANCEL",
                "DELETE",
                "ENABLE",
                "DISABLE",
                "ASSIGN",
                "UNASSIGN"
              ]
            }
          },
          "assignDate": {
            "type": "string",
            "description": "For unassigned grids which were assigned to the user, the date on which the grid was assigned.",
            "format": "date-time",
            "example": "2019-02-19T13:17:27Z"
          },
          "createDate": {
            "type": "string",
            "description": "The date on which the grid was created.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "expired": {
            "type": "boolean",
            "description": "A flag indicating if this grid is currently expired."
          },
          "expiryDate": {
            "type": "string",
            "description": "If the grid policy defines an expiry date, the date on which this grid will expire. Expired grids cannot be used for authentication.",
            "format": "date-time",
            "example": "2019-08-19T13:15:27Z"
          },
          "gridContents": {
            "type": "array",
            "description": "The grid contents of this grid.  Only administrators with the GRIDCONTENTS:VIEW permission will receive this value.",
            "items": {
              "type": "array",
              "description": "The grid contents of this grid.  Only administrators with the GRIDCONTENTS:VIEW permission will receive this value.",
              "items": {
                "type": "string",
                "description": "The grid contents of this grid.  Only administrators with the GRIDCONTENTS:VIEW permission will receive this value."
              }
            }
          },
          "groups": {
            "type": "array",
            "description": "The UUIDs of groups to which this grid belongs.  This value is only used for unassigned grids. Only groups to which the current administrator has access will be returned.",
            "items": {
              "type": "string",
              "description": "The UUIDs of groups to which this grid belongs.  This value is only used for unassigned grids. Only groups to which the current administrator has access will be returned."
            }
          },
          "id": {
            "type": "string",
            "description": "The unique UUID assigned to the grid when it is created."
          },
          "lastUsedDate": {
            "type": "string",
            "description": "The date on which this grid was last used for authentication. This value will be null if the grid has never been used.",
            "format": "date-time"
          },
          "serialNumber": {
            "type": "integer",
            "description": "The unique numeric serial number assigned to the grid when it is created.",
            "format": "int64"
          },
          "state": {
            "type": "string",
            "description": "The state of this grid.  Only grids in the ACTIVE or PENDING state can be used for authentication.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "UNASSIGNED",
              "PENDING",
              "CANCELED"
            ]
          },
          "userId": {
            "type": "string",
            "description": "The UUID of the user who owns this grid.  If the grid is not assigned, this value will be null.",
            "example": "45f5a855-962a-4b5f-b5c5-7ceeae235875"
          },
          "userName": {
            "type": "string",
            "description": "The user Id for this user.  If the grid is not assigned, this value will be null.",
            "example": "john.doe"
          }
        },
        "description": "A Grid defines the information returned about a Grid."
      },
      "GridAssignParms": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "When an end user is assigning a grid to themselves, this attribute specifies a grid challenge response proving that the user has possession of the grid being assigned."
          },
          "serialNumber": {
            "type": "string",
            "description": "When the user to which a grid is to be assigned is known, this attribute specifies the serial number of the grid that will be assigned."
          },
          "userId": {
            "type": "string",
            "description": "When the specified grid is known, this attribute specifies the user Id or user alias of the user to which the grid will be assigned."
          }
        },
        "description": "Parameters including the user id or user alias of the user to which the grid is to be assigned."
      },
      "GridChangeStateParms": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The new state of the grid must be ACTIVE, INACTIVE, or CANCELED. The existing state of the grid must be ACTIVE, INACTIVE or PENDING",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "UNASSIGNED",
              "PENDING",
              "CANCELED"
            ]
          }
        },
        "description": "The parameters specifying the new state of the grid."
      },
      "GridCreateParms": {
        "type": "object",
        "properties": {
          "gridContent": {
            "type": "array",
            "description": "If provided, the given grid contents are used for the new Grid Card.  The grid contents must match the grid settings for grid size, grid cell size and cell alphabet.  The administrator must have the GRIDCONTENTS:ADD permission to set the grid contents. This argument is ignored when creating unassigned grids.",
            "items": {
              "type": "array",
              "description": "If provided, the given grid contents are used for the new Grid Card.  The grid contents must match the grid settings for grid size, grid cell size and cell alphabet.  The administrator must have the GRIDCONTENTS:ADD permission to set the grid contents. This argument is ignored when creating unassigned grids.",
              "items": {
                "type": "string",
                "description": "If provided, the given grid contents are used for the new Grid Card.  The grid contents must match the grid settings for grid size, grid cell size and cell alphabet.  The administrator must have the GRIDCONTENTS:ADD permission to set the grid contents. This argument is ignored when creating unassigned grids."
              }
            }
          },
          "groups": {
            "type": "array",
            "description": "When creating unassigned grids the list of UUIDs of groups to which the grids will belong.  If not specified, the grids will not belong to any groups.",
            "items": {
              "type": "string",
              "description": "When creating unassigned grids the list of UUIDs of groups to which the grids will belong.  If not specified, the grids will not belong to any groups."
            }
          },
          "numberOfGrids": {
            "maximum": 1000,
            "minimum": 1,
            "type": "integer",
            "description": "The number of grids to create when creating unassigned grids.  If not specified, it defaults to 1.",
            "format": "int32",
            "example": 1
          },
          "serialNumber": {
            "minimum": 1,
            "type": "integer",
            "description": "If provided, the given grid serial number is used for the new Grid Card.",
            "format": "int64",
            "example": 1
          },
          "state": {
            "type": "string",
            "description": "The state (ACTIVE, INACTIVE, or PENDING) of the new grid.  If not specified, the state defaults to PENDING. This argument is ignored when creating unassigned grids.",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "UNASSIGNED",
              "PENDING",
              "CANCELED"
            ]
          }
        },
        "description": "Optional parameters for the grid create operation."
      },
      "GridExport": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "Grid information formatted as a base64 encoded String. Formatting options are controlled in grid authenticator settings."
          }
        },
        "description": "Parameters returned by the grid export operation."
      },
      "GridParms": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "When modifying unassigned grids the list of UUIDs of groups to which the grids will belong. If an empty list is provided, the unassigned grid will not belong to any groups.",
            "items": {
              "type": "string",
              "description": "When modifying unassigned grids the list of UUIDs of groups to which the grids will belong. If an empty list is provided, the unassigned grid will not belong to any groups."
            }
          }
        },
        "description": "Parameters specified what is to be changed in the grid."
      },
      "GridProperties": {
        "type": "object",
        "properties": {
          "maxGridGeneratePerRequest": {
            "type": "integer",
            "description": "The maximum number of unassigned grids that can be created per request.",
            "format": "int32"
          },
          "maxGridTotalUnassigned": {
            "type": "integer",
            "description": "The maximum number of unassigned grids that are allowed in the system.",
            "format": "int32"
          }
        },
        "description": "Properties specifing restrictions on how many unassigned grids can be created."
      },
      "GridsPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page from the list of GRIDs found.",
            "items": {
              "$ref": "#/components/schemas/Grid"
            }
          }
        },
        "description": "Contains paging information and a page of assigned grids."
      },
      "Group": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The externalId of this group."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this group.  This value is generated when the group is created."
          },
          "name": {
            "type": "string",
            "description": "The name of this group."
          },
          "type": {
            "type": "string",
            "description": "The type of group indicating if this group was synchronized from a directory (LDAP_AD) or was created in Identity as a Service (MGMT_UI).",
            "example": "MGMT_UI",
            "enum": [
              "LDAP_AD",
              "MGMT_UI"
            ]
          }
        },
        "description": "Information returned about a group."
      },
      "GroupFilter": {
        "type": "object",
        "properties": {
          "directoryId": {
            "type": "string",
            "description": "The UUID of the Directory the group filter belongs to.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "id": {
            "type": "string",
            "description": "The UUID of the group filter.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "name": {
            "type": "string",
            "description": "The name of the group to filter on.",
            "example": "Engineering"
          }
        },
        "description": "A GroupFilter defines the information returned about a directory group filter."
      },
      "GroupId": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The name or externalId of a group."
          }
        },
        "description": "The externalId of the group to fetch."
      },
      "GroupParms": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The optional externalId of this group.  Specify an empty string to remove the existing value of the externalId."
          },
          "name": {
            "type": "string",
            "description": "The name of this group. This value is required when creating a group."
          }
        },
        "description": "Parameters including the name of the new group."
      },
      "GroupsPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page from the list of Groups found.",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "description": "Contains paging information and a page of groups."
      },
      "IdProofing": {
        "required": [
          "billingType",
          "endDate",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "billingType": {
            "type": "string",
            "description": "The model used for billing.",
            "example": "PRE_PAID",
            "enum": [
              "PRE_PAID",
              "PAY_PER_USE"
            ]
          },
          "consumed": {
            "maximum": 50000000,
            "minimum": 1,
            "type": "integer",
            "description": "The entitlements consumed since start date (percent over quantity for PRE_PAID accounts) or in the current month (PAY_PER_USE accounts).",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "description": "The date this entitlement will end in UTC time.  The value must be after the start date.",
            "format": "date-time",
            "example": "2020-02-18T23:59:59Z"
          },
          "faceRecognitionType": {
            "type": "string",
            "description": "The face recognitation type licensed.",
            "example": "ENHANCED",
            "enum": [
              "ENHANCED",
              "STANDARD"
            ]
          },
          "quantity": {
            "maximum": 50000000,
            "minimum": 1,
            "type": "integer",
            "description": "The number of entitlements assigned to the tenant (required during creation if billingType is PRE_PAID).",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "The date this entitlement will start in UTC time.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          }
        },
        "description": "ID Proofing-specific entitlements of a tenant."
      },
      "IdProofingAuthenticationResult": {
        "required": [
          "documentAuthenticationResult"
        ],
        "type": "object",
        "properties": {
          "documentAuthenticationResult": {
            "type": "string",
            "description": "The ID document authentication result.",
            "example": "ATTENTION",
            "enum": [
              "UNKNOWN",
              "PASSED",
              "FAILED",
              "SKIPPED",
              "ATTENTION"
            ]
          },
          "documentDataFields": {
            "type": "array",
            "description": "The list of fields extracted from the ID document.",
            "items": {
              "$ref": "#/components/schemas/IdProofingDocumentDataField"
            }
          },
          "documentTestResults": {
            "type": "array",
            "description": "The result of individual tests performed on the ID document.",
            "items": {
              "$ref": "#/components/schemas/ImmutableIdProofingDocumentTestResult"
            }
          },
          "faceMatch": {
            "type": "boolean",
            "description": "Returns true if the document photo and the selfie image matched.",
            "example": true
          },
          "faceMatchScore": {
            "type": "integer",
            "description": "Face match score normalized to the range 0-100, where 80 or higher is considered a match. Clients should rely on the isFaceMatch property rather than the raw score.",
            "format": "int32",
            "example": 85
          }
        },
        "description": "Returns the result of authenticating an ID document."
      },
      "IdProofingCompleteParms": {
        "type": "object",
        "properties": {
          "livenessToken": {
            "type": "string",
            "description": "A token identifying the liveness transaction.",
            "example": "31706131726336496d655177346e55503279616b69547344446e5258684c7542"
          },
          "livenessUserId": {
            "type": "string",
            "description": "User ID to use for the liveness transaction.",
            "example": "919ce7d3-1194-465d-9588-8668b8ac3bac"
          }
        },
        "description": "The liveness transaction data."
      },
      "IdProofingDocumentClassification": {
        "type": "object",
        "properties": {
          "countryCode": {
            "type": "string",
            "description": "The ID document country code.",
            "example": "USA"
          },
          "documentClass": {
            "type": "string",
            "description": "The ID document class.",
            "example": "PASSPORT",
            "enum": [
              "UNKNOWN",
              "PASSPORT",
              "VISA",
              "DRIVERSLICENSE",
              "IDENTIFICATIONCARD",
              "PERMIT",
              "CURRENCY",
              "RESIDENCEDOCUMENT",
              "TRAVELDOCUMENT",
              "BIRTHCERTIFICATE",
              "VEHICLEREGISTRATION",
              "OTHER",
              "WEAPONLICENSE",
              "TRIBALIDENTIFICATION",
              "VOTERIDENTIFIACTION",
              "MILITARY"
            ]
          },
          "presentationChanged": {
            "type": "boolean",
            "description": "Indicates that the document was presented with the back-side specified as the front-side and vice versa.If this occurs, all subsequent image posts must account for this presentation change.",
            "example": true
          },
          "supportedBackImage": {
            "type": "boolean",
            "description": "Indicates that the document type has a back side.",
            "example": false
          },
          "supportedFrontImage": {
            "type": "boolean",
            "description": "Indicates that the document type has a front side.",
            "example": true
          }
        },
        "description": "DocumentClassification model returned when an uploaded document image is classified."
      },
      "IdProofingDocumentDataField": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The data field description.",
            "example": "The middle name of the bearer of the document."
          },
          "name": {
            "type": "string",
            "description": "The data field name.",
            "example": "Middle Name"
          },
          "type": {
            "type": "string",
            "description": "The data type of data field value .",
            "enum": [
              "STRING",
              "BOOLEAN",
              "DATETIME"
            ]
          },
          "value": {
            "type": "string",
            "description": "The data field value extracted from the ID document.",
            "example": "JANE"
          }
        },
        "description": "Identifies a field extracted from an ID document (e.g., Surname)."
      },
      "IdProofingInitParms": {
        "type": "object",
        "properties": {
          "clientIp": {
            "type": "string",
            "description": "Provided client IP address.",
            "example": "1.2.3.4"
          },
          "firstPartyBlackbox": {
            "type": "string",
            "description": "First-party device fingerprint.",
            "example": "r5En/ddzon..."
          }
        },
        "description": "The identity of the device to be verified."
      },
      "IdProofingInitResult": {
        "required": [
          "requestId"
        ],
        "type": "object",
        "properties": {
          "acasEndpoint": {
            "type": "string",
            "description": "The mobile SDK license ACAS end-point."
          },
          "assureIdEndpoint": {
            "type": "string",
            "description": "The mobile SDK license AssureID end-point."
          },
          "deviceCheckDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Additional details about the device and the risk evaluation."
            },
            "description": "Additional details about the device and the risk evaluation."
          },
          "deviceCheckReason": {
            "type": "string",
            "description": "Additional information about the device risk assessment result.",
            "example": "Invalid blackbox"
          },
          "deviceCheckResult": {
            "type": "string",
            "description": "The device risk assessment result. A result of DENY will not allow to continue with an ID Proofing request.",
            "example": "REVIEW",
            "enum": [
              "ALLOW",
              "DENY",
              "REVIEW",
              "NONE"
            ]
          },
          "frmEndpoint": {
            "type": "string",
            "description": "The mobile SDK license FRM end-point."
          },
          "medscanEndpoint": {
            "type": "string",
            "description": "The mobile SDK license Medscan end-point."
          },
          "ozoneEndpoint": {
            "type": "string",
            "description": "The mobile SDK license ozone end-point."
          },
          "requestId": {
            "type": "string",
            "description": "ID Proofing request identifier (must be used in subsequent calls).",
            "example": "be0176b9-473b-4543-a338-101e2c899abb"
          },
          "subscriberAccount": {
            "type": "string",
            "description": "The mobile SDK license subscriber account.",
            "example": "maria.callas@scala.com"
          },
          "subscriberId": {
            "type": "string",
            "description": "The mobile SDK license subscriber ID for document authentication.",
            "example": "be0176b9-473b-4543-a338-101e2c899abb"
          },
          "subscriberPassword": {
            "type": "string",
            "description": "The mobile SDK license subscriber password."
          },
          "usPassliveEndpoint": {
            "type": "string",
            "description": "The mobile SDK license US Passlive end-point."
          }
        },
        "description": "Returns ID Proofing license information."
      },
      "IdProofingParms": {
        "required": [
          "billingType",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "billingType": {
            "type": "string",
            "description": "The model used for billing.",
            "example": "PRE_PAID",
            "enum": [
              "PRE_PAID",
              "PAY_PER_USE"
            ]
          },
          "endDate": {
            "type": "string",
            "description": "The date this entitlement will end (required).  The value must be after the start date.",
            "format": "date-time"
          },
          "quantity": {
            "maximum": 50000000,
            "minimum": 1,
            "type": "integer",
            "description": "The number of entitlements assigned to the tenant (required if billingType is PRE_PAID).",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "description": "The date this entitlement will start (required).",
            "format": "date-time"
          }
        },
        "description": "Parameters passed when setting the ID Proofing entitlements of a tenant."
      },
      "IdProofingRequest": {
        "required": [
          "deviceCheckResult",
          "requestId",
          "requestTime",
          "state"
        ],
        "type": "object",
        "properties": {
          "backImageClassified": {
            "type": "boolean",
            "description": "Returns true if the document back image was successfully classified into a known document.",
            "example": true
          },
          "backImageUploadTime": {
            "type": "string",
            "description": "The time when the document ID back image was uploaded.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "deviceCheckResult": {
            "type": "string",
            "description": "The device risk assessment result. A result of DENY will not allow to continue with an ID Proofing request.",
            "example": "REVIEW",
            "enum": [
              "ALLOW",
              "DENY",
              "NONE",
              "REVIEW"
            ]
          },
          "documentAuthenticationResult": {
            "type": "string",
            "description": "The ID document authentication result.",
            "example": "ATTENTION",
            "enum": [
              "NONE",
              "UNKNOWN",
              "PASSED",
              "FAILED",
              "SKIPPED",
              "ATTENTION"
            ]
          },
          "faceMatch": {
            "type": "boolean",
            "description": "Returns true if the document photo and the selfie matched.",
            "example": true
          },
          "faceMatchScore": {
            "type": "integer",
            "description": "Face match score normalized to the range 0-100, where 80 or higher is considered a match. Clients should rely on the faceMatch attribute rather than the raw score.",
            "format": "int32",
            "example": 85
          },
          "frontImageClassified": {
            "type": "boolean",
            "description": "Returns true if the document front image was successfully classified into a known document.",
            "example": true
          },
          "frontImageUploadTime": {
            "type": "string",
            "description": "The time when the document ID front image was uploaded.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "requestId": {
            "type": "string",
            "description": "ID Proofing request identifier.",
            "example": "be0176b9-473b-4543-a338-101e2c899abb"
          },
          "requestTime": {
            "type": "string",
            "description": "The time when the request was initiated.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "state": {
            "type": "string",
            "description": "The state of the request.",
            "example": "COMPLETE",
            "enum": [
              "COMPLETE",
              "IMAGE",
              "INIT"
            ]
          }
        },
        "description": "ID Proofing request information."
      },
      "IdProofingRequestPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page with the list of ID Proofing requests found.",
            "items": {
              "$ref": "#/components/schemas/IdProofingRequest"
            }
          }
        },
        "description": "Contains paging information and the results from an ID Proofing request search."
      },
      "ImmutableIdProofingDocumentTestResult": {
        "required": [
          "result"
        ],
        "type": "object",
        "properties": {
          "actions": {
            "type": "string",
            "description": "A longer description with possible actions to performed on the document.",
            "example": "The expiration date on the document may have been misread.  Confirm that it is legible and occurs on or after the current date. Also confirm that the current date and time of the host computer is correctly set."
          },
          "description": {
            "type": "string",
            "description": "The description of the check performed on the document.",
            "example": "Checked if the document is expired."
          },
          "disposition": {
            "type": "string",
            "description": "A short description with result of the check performed on the document.",
            "example": "The document has expired."
          },
          "information": {
            "type": "string",
            "description": "A longer description with result of the check performed on the document.",
            "example": "Verified that the birth date is valid, in the expected format, and occurs on or before the current date and not outside a reasonable range."
          },
          "name": {
            "type": "string",
            "description": "Identifies the check performed.",
            "example": "Document Expired"
          },
          "result": {
            "type": "string",
            "description": "The ID classification result.",
            "example": "PASSED",
            "enum": [
              "UNKNOWN",
              "PASSED",
              "FAILED",
              "SKIPPED",
              "CAUTION",
              "ATTENTION"
            ]
          }
        },
        "description": "Information about an individual test result."
      },
      "IpContext": {
        "required": [
          "riskPoint"
        ],
        "type": "object",
        "properties": {
          "allowedIpList": {
            "type": "string",
            "description": "The UUID of an existing IP List that defines IPs that can access the resource. Risk applies if the given IP address is not found in the IP List. If specified, the allowed IP List takes precedence over the denied IP List."
          },
          "allowedIpRanges": {
            "type": "array",
            "description": "List of IP Address ranges (in CIDR notation) that are allowed access the resource. Risk applies if the given IP address is not in one of the allowed IP ranges. If specified, the allowed IP values take precedence over the denied IP values.",
            "items": {
              "type": "string",
              "description": "List of IP Address ranges (in CIDR notation) that are allowed access the resource. Risk applies if the given IP address is not in one of the allowed IP ranges. If specified, the allowed IP values take precedence over the denied IP values."
            }
          },
          "deniedIpList": {
            "type": "string",
            "description": "The UUID of an existing IP List that defines IPs that cannot access the resource. Risk applies if the given IP address is found in the IP List. The denied IP List is ignored if an allowed IP List is specified."
          },
          "deniedIpRanges": {
            "type": "array",
            "description": "List of IP Address ranges (in CIDR notation) that cannot access the resource. Risk applies if the given IP address is in one of the denied IP ranges. The denied IP values are ignored if allowed IP ranges are specified.",
            "items": {
              "type": "string",
              "description": "List of IP Address ranges (in CIDR notation) that cannot access the resource. Risk applies if the given IP address is in one of the denied IP ranges. The denied IP values are ignored if allowed IP ranges are specified."
            }
          },
          "riskPoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The number of risk points that apply if this context applies.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The type of IpContext. If not specified, this value defaults to CUSTOM.",
            "enum": [
              "CUSTOM",
              "IPLIST"
            ]
          }
        },
        "description": "The IP context specifies allowed or denied IP address ranges or lists. Risk is applied to the authentication if the current IP address does not match an allowed IP address range/list or does match a denied IP address range/list."
      },
      "IpLocation": {
        "type": "object",
        "properties": {
          "cityName": {
            "type": "string",
            "description": "The city name--always returned in upper-case."
          },
          "countryCode": {
            "type": "string",
            "description": "A two-character (alpha-2) ISO 3166-1  country code."
          },
          "ipAddress": {
            "type": "string",
            "description": "The IPv4 Address."
          },
          "isp": {
            "type": "string",
            "description": "The ISP name--always returned in upper-case."
          },
          "latitude": {
            "type": "number",
            "description": "The latitude.",
            "format": "float"
          },
          "longitude": {
            "type": "number",
            "description": "The longitude.",
            "format": "float"
          },
          "privateIpAddress": {
            "type": "boolean",
            "description": "Whether the IP provided is a private IP Address.  The value is only available when resolving an IP address to an IpLocation."
          }
        },
        "description": "The IP address for which the IP location information is to be returned."
      },
      "Issuance": {
        "required": [
          "serviceBundles"
        ],
        "type": "object",
        "properties": {
          "addOn": {
            "type": "string",
            "description": "Add on column to store printer cert flag"
          },
          "consumed": {
            "type": "integer",
            "description": "The entitlements consumed since start date during a Trial period.",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the Trial period will end. This value is not returned if the account status is PRODUCTION.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of print jobs allowed during the Trial period. This value is not returned if the account status is PRODUCTION.",
            "format": "int32",
            "example": 25
          },
          "serviceBundles": {
            "type": "array",
            "description": "The service bundles supported.",
            "items": {
              "$ref": "#/components/schemas/ServiceBundle"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date when the Trial period starts. This value is not returned if the account status is PRODUCTION.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          }
        },
        "description": "Issuance entitlements of a tenant."
      },
      "IssuanceParms": {
        "type": "object",
        "properties": {
          "addOn": {
            "type": "string",
            "description": "Add on column to store printer cert flag"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the Trial period will end.  The value must be after the start date. If specified, this value cannot be more than 30 days after start date.",
            "format": "date-time"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of print jobs allowed during the Trial period.",
            "format": "int32",
            "example": 25,
            "enum": [
              25,
              100
            ]
          },
          "serviceBundles": {
            "type": "array",
            "description": "The service bundles supported. At least one bundle must be defined.",
            "items": {
              "$ref": "#/components/schemas/ServiceBundle"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date when the Trial period starts. This value cannot be in the future. If not specified, it defaults to the current date.",
            "format": "date-time"
          }
        },
        "description": "Parameters passed when setting the Issuance entitlements of a tenant."
      },
      "KbaContext": {
        "type": "object",
        "properties": {
          "challengeSize": {
            "type": "integer",
            "description": "Number of questions that the user must answer. If not provided, the default QA challenge size in the KBA settings is used.",
            "format": "int32"
          },
          "wrongAnswersAllowed": {
            "type": "integer",
            "description": "Number of questions that the user could answer incorrectly and still be considered a valid response. If not provided, the default wrong answers allowed in the KBA settings is used.",
            "format": "int32"
          }
        },
        "description": "The KBA context allows the settings for knowledge-based authentication to be overridden for a particular resource rule.  For example, a different challenge size can be specified."
      },
      "KnowledgeBasedAuthenticator": {
        "required": [
          "userQuestions"
        ],
        "type": "object",
        "properties": {
          "maximumNumberOfQuestions": {
            "type": "integer",
            "description": "The maximum number of questions a user can answer for KBA. If zero, then KBA is disabled. This value is not used when adding or updating a KBA. If provided, it will be ignored.",
            "format": "int32"
          },
          "maximumResponseSize": {
            "type": "integer",
            "description": "The maximum number of characters in an answer. This value is not used when adding or updating a KBA. If provided, it will be ignored.",
            "format": "int32"
          },
          "minimumNumberOfQuestions": {
            "type": "integer",
            "description": "The minimum number of questions a user must answer to perform KBA. Defaults to the maximum Q&A challenge size setting. This value is not used when adding or updating a KBA. If provided, it will be ignored.",
            "format": "int32"
          },
          "userQuestions": {
            "type": "array",
            "description": "The list of question/answer pairs stored for a user. This is the only attribute required when adding or updating a KBA.",
            "items": {
              "$ref": "#/components/schemas/UserQuestion"
            }
          }
        },
        "description": "KBA information stored for a user."
      },
      "LocationContext": {
        "required": [
          "allowed",
          "anonymousAllowed",
          "countryCodes",
          "riskPoint"
        ],
        "type": "object",
        "properties": {
          "allowed": {
            "type": "boolean",
            "description": "If true, the list of countries defines allowed countries. If false, the list of countries defines denied countries."
          },
          "anonymousAllowed": {
            "type": "boolean",
            "description": "If true, then allows anonymous/TOR IP addresses. If false, then denies anonymous/TOR IP addresses."
          },
          "countryCodes": {
            "type": "array",
            "description": "List of country codes (ISO alpha-2) that can access(allowed=true) or not access (allowed=false).",
            "items": {
              "type": "string",
              "description": "List of country codes (ISO alpha-2) that can access(allowed=true) or not access (allowed=false)."
            }
          },
          "riskPoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The number of risk points that apply if this context applies.",
            "format": "int32"
          }
        },
        "description": "The location context specifies allowed or denied country codes. Risk is applied to the authentication if the location of the current IP address does not match an allowed country or matches a disallowed country."
      },
      "LocationHistoryContext": {
        "required": [
          "riskPoint"
        ],
        "type": "object",
        "properties": {
          "riskPoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The number of risk points that apply if this context applies.",
            "format": "int32"
          }
        },
        "description": "Location history checks to see if the location of the current IP address matches a location from a previous authentication. If the current location does not match history, risk is applied."
      },
      "MachineAuthenticator": {
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string",
            "description": "The device fingerprint if it's required during Machine authentication. It will always be null when returned from IDaaS as part of the response body.",
            "example": "platform:web,version:1.0.2."
          },
          "machineNonce": {
            "type": "string",
            "description": "machineNonce",
            "example": "07ZeToA3YfoATTxoU6h2x=="
          },
          "sequenceNonce": {
            "type": "string",
            "description": "sequenceNonce",
            "example": "03ReToA37851tyVU8f3y=="
          }
        },
        "description": "Machine authenticator required to complete authentication challenge"
      },
      "MachineAuthenticatorRegistration": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string",
            "description": "The device fingerprint. It must be a valid fingerprint as produced by Entrust SDK.",
            "example": "platform:web,version:1.0.2."
          },
          "label": {
            "type": "string",
            "description": "Identifies the device/machine from the end-user point of view.",
            "example": "MachineAuthenticatorLabel"
          }
        },
        "description": "Register a machine authenticator for authentication to Identity as a Service"
      },
      "MachineAuthenticatorRegistrationResult": {
        "type": "object",
        "properties": {
          "machineAuthenticator": {
            "$ref": "#/components/schemas/MachineAuthenticator"
          },
          "userMachineAuthenticator": {
            "$ref": "#/components/schemas/UserMachineAuthenticator"
          }
        }
      },
      "MachineContext": {
        "required": [
          "riskLimit",
          "riskPoint"
        ],
        "type": "object",
        "properties": {
          "riskLimit": {
            "type": "integer",
            "description": "The risk points apply if the machine authenticator risk is below or equal to this value.",
            "format": "int32"
          },
          "riskPoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The number of risk points that apply if this context applies.",
            "format": "int32"
          }
        },
        "description": "Represents a Machine Authenticator authentication context. When defined, a Machine Authentication authenticator is expected in the  authentication request. Risk will apply if the machine authentication authenticator is not present or if the risk for the machine authentication authentication is greater than the risk limit define for the Machine context."
      },
      "MobileFlashPass": {
        "type": "object",
        "properties": {
          "consumed": {
            "type": "integer",
            "description": "The entitlements consumed since start date during the entitlement period.",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the entitlement will end.",
            "format": "date-time",
            "example": "2020-02-19T00:00:00Z"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of FlashPass claims allowed during the period.",
            "format": "int32",
            "example": 1000
          },
          "startDate": {
            "type": "string",
            "description": "The date when the entitlement starts.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          }
        },
        "description": "MobileFlashPass entitlements of a tenant."
      },
      "ModifiedEntityAttribute": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the attribute."
          },
          "newValue": {
            "type": "string",
            "description": "The new value of the attribute."
          },
          "oldValue": {
            "type": "string",
            "description": "The old value of the attribute."
          }
        },
        "description": "Information about an attribute that was modified for an entity."
      },
      "OAuthRole": {
        "required": [
          "ancestorIds",
          "descendantIds",
          "id",
          "inheritedResourceServerScopeIds",
          "name",
          "resourceServerScopeIds"
        ],
        "type": "object",
        "properties": {
          "ancestorIds": {
            "type": "array",
            "description": "The set of ancestor oauth role ids.",
            "items": {
              "type": "string",
              "description": "The set of ancestor oauth role ids."
            }
          },
          "descendantIds": {
            "type": "array",
            "description": "The set of descendant oauth role ids.",
            "items": {
              "type": "string",
              "description": "The set of descendant oauth role ids."
            }
          },
          "description": {
            "type": "string",
            "description": "The description of this oauth role."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this oauth role. This value is generated when the oauth role is created."
          },
          "inheritedResourceServerScopeIds": {
            "type": "array",
            "description": "The set of resource server scopes ids associated with this oauth role based on inheritance from its ancestors.",
            "items": {
              "type": "string",
              "description": "The set of resource server scopes ids associated with this oauth role based on inheritance from its ancestors."
            }
          },
          "name": {
            "type": "string",
            "description": "The name of this oauth role."
          },
          "parentId": {
            "type": "string",
            "description": "The UUID of the parent of this oauth role, if one exists."
          },
          "resourceServerScopeIds": {
            "type": "array",
            "description": "The set of resource server scopes ids associated with this oauth role.",
            "items": {
              "type": "string",
              "description": "The set of resource server scopes ids associated with this oauth role."
            }
          }
        },
        "description": "A list of all oauth roles to which this user belongs."
      },
      "OAuthRoleParms": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of this oauth role. To remove the existing value, set the value to an empty string."
          },
          "name": {
            "type": "string",
            "description": "The name of this oauth role. This value is required when creating an oauth role."
          },
          "parentId": {
            "type": "string",
            "description": "The UUID of the parent of this oauth role, if one exists. To remove the existing value, set the value to an empty string."
          },
          "resourceServerScopeIds": {
            "type": "array",
            "description": "The set of oauth roles and corresponding resource server scopes associated with this oauth role. To remove the existing values, set the value to an empty collection.",
            "items": {
              "type": "string",
              "description": "The set of oauth roles and corresponding resource server scopes associated with this oauth role. To remove the existing values, set the value to an empty collection."
            }
          }
        },
        "description": "Parameters including the name of the new oauth role."
      },
      "OTP": {
        "type": "object",
        "properties": {
          "exp": {
            "type": "integer",
            "description": "The authorization token expiry time.",
            "format": "int64"
          },
          "otp": {
            "type": "string",
            "description": "The OTP."
          },
          "otpDeliveryType": {
            "type": "string",
            "description": "The OTP delivery type used.  The value is null if OTP delivery was not performed",
            "enum": [
              "EMAIL",
              "SMS",
              "VOICE"
            ]
          },
          "otpExpiryDate": {
            "type": "string",
            "description": "The OTP Expiry Date.",
            "format": "date-time",
            "example": "2019-02-19T13:17:27Z"
          },
          "token": {
            "type": "string",
            "description": "The authorization token representing the OTP authentication challenge to complete."
          }
        },
        "description": "An OTP  defines the information returned about an OTP."
      },
      "OTPAuthenticatorSettings": {
        "type": "object",
        "properties": {
          "defaultDeliveryEnabled": {
            "type": "boolean",
            "description": "Indicates whether client applications can delivery OTP to default delivery contact or can enforce users to choose an OTP delivery.",
            "example": true
          },
          "includeOtpExpiryDate": {
            "type": "boolean",
            "description": "Indicates whether the OTP expiry date will be included in the OTP SMS message",
            "example": true
          },
          "otpAlphabet": {
            "type": "string",
            "description": "Characters that can appear in a RANDOM OTP. Can contain any non-whitespace character. Default is all digits. "
          },
          "otpDefaultDelivery": {
            "type": "string",
            "description": "The default OTP delivery mechanism.  Choices are EMAIL, SMS, or VOICE.  Additionally there is a deprecated value NONE that should no longer be used. Default is SMS.",
            "enum": [
              "EMAIL",
              "SMS",
              "VOICE",
              "NONE"
            ]
          },
          "otpDefaultDeliveryAttribute": {
            "type": "string",
            "description": "Id of the default OTP delivery attribute. Deprecated : Use default attribute specific to delivery mechanism instead eg. otpSmsDefaultDeliveryAttribute, otpEmailDefaultDeliveryAttribute",
            "example": "360e0c3d-27d7-405b-81db-0524fa8f41bd",
            "deprecated": true
          },
          "otpEmailDefaultDeliveryAttribute": {
            "type": "string",
            "description": "Id of the default Email OTP delivery attribute.",
            "example": "360e0c3d-27d7-405b-81db-0524fa8f41bd"
          },
          "otpLength": {
            "maximum": 100,
            "minimum": 4,
            "type": "integer",
            "description": "The length of an OTP. Default is 8.",
            "format": "int32"
          },
          "otpLifetime": {
            "maximum": 3600,
            "minimum": 60,
            "type": "integer",
            "description": "The lifetime of an OTP in seconds. Default is 300.",
            "format": "int32"
          },
          "otpSmsDefaultDeliveryAttribute": {
            "type": "string",
            "description": "Id of the default SMS OTP delivery attribute.",
            "example": "360e0c3d-27d7-405b-81db-0524fa8f41bd"
          },
          "otpType": {
            "type": "string",
            "description": "The type of OTP generated.  Choices are RANDOM or MEMO_PASSCODE. Default is RANDOM",
            "enum": [
              "RANDOM",
              "MEMO_PASSCODE"
            ]
          },
          "otpVoiceDefaultDeliveryAttribute": {
            "type": "string",
            "description": "Id of the default Voice OTP delivery attribute.",
            "example": "360e0c3d-27d7-405b-81db-0524fa8f41bd"
          },
          "showOtpDeliveryContact": {
            "type": "boolean",
            "description": "Indicates whether masked OTP contact attribute values are included in authentication API."
          }
        },
        "description": "New OTP authenticator settings."
      },
      "OTPCreateParms": {
        "required": [
          "applicationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "description": "Unique identifier of the Identity as a Service Authentication API application",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "clientIp": {
            "type": "string",
            "description": "Provided client IP address."
          },
          "deliverOTP": {
            "type": "boolean",
            "description": "Whether to deliver the OTP.  If not specified, this defaults to true."
          },
          "otpDeliveryType": {
            "type": "string",
            "description": "Defines how a user receives their one-time passcode (Email, Text message (SMS), or Voice message (VOICE)).",
            "example": "EMAIL/SMS/VOICE",
            "enum": [
              "EMAIL",
              "SMS",
              "VOICE"
            ]
          },
          "returnOTP": {
            "type": "boolean",
            "description": "Whether to return the OTP.  If not specified, this defaults to false."
          },
          "transactionDetails": {
            "type": "array",
            "description": "Defines transaction details to be associated with the OTP.",
            "items": {
              "$ref": "#/components/schemas/TransactionDetail"
            }
          },
          "userId": {
            "type": "string",
            "description": "User ID (containing the user ID or a user alias) of the Identity as a Service user the OTP is being created for.",
            "example": "alice"
          }
        },
        "description": "The OTP to create."
      },
      "OrderByAttribute": {
        "required": [
          "ascending",
          "name"
        ],
        "type": "object",
        "properties": {
          "ascending": {
            "type": "boolean",
            "description": "Identifies whether to order results in ascending order."
          },
          "name": {
            "type": "string",
            "description": "Identifies the attribute."
          }
        },
        "description": "An attribute used to sort the result from a search."
      },
      "Paging": {
        "required": [
          "limit"
        ],
        "type": "object",
        "properties": {
          "limit": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The page limit used (1-100)",
            "format": "int32"
          },
          "nextCursor": {
            "type": "string",
            "description": "The cursor pointing to the next page."
          },
          "prevCursor": {
            "type": "string",
            "description": "The cursor pointing to the previous page."
          }
        },
        "description": "Contains navigation information."
      },
      "PasswordResetSettings": {
        "type": "object",
        "properties": {
          "authenticators": {
            "type": "array",
            "description": "The list of second factor authenticator types that can be used during a password reset operation.",
            "example": [
              "OTP",
              "TOKEN"
            ],
            "items": {
              "type": "string",
              "description": "The list of second factor authenticator types that can be used during a password reset operation.",
              "example": "[\"OTP\",\"TOKEN\"]",
              "enum": [
                "MACHINE",
                "PASSWORD",
                "EXTERNAL",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH",
                "PASSWORD_AND_SECONDFACTOR"
              ]
            }
          },
          "challengeSize": {
            "type": "integer",
            "description": "For a KBA authenticator, it is the number of questions that the user must answer--not supported if these settings are part of a Group Policy (not the Global Policy).",
            "format": "int32",
            "example": 4,
            "deprecated": true
          },
          "emailAccount": {
            "type": "boolean",
            "description": "Indicates whether an email should be sent to notify the user account has been locked, unlocked, or an attempt of unlock has occurred.",
            "example": false
          },
          "emailOtpEnabled": {
            "type": "boolean",
            "description": "Indicates if OTP can be sent to email.",
            "example": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Indicates whether password reset is enabled.",
            "example": true
          },
          "groups": {
            "type": "array",
            "description": "Groups that can perform a password reset operation--not supported if these settings are part of a Group Policy (not the Global Policy).",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "twoSecondFactorRequired": {
            "type": "boolean",
            "description": "Indicates whether two forms of second factor authentication must be completed before a password reset operation can be done.",
            "example": true
          },
          "unlockAccount": {
            "type": "boolean",
            "description": "Indicates whether the user account should be unlocked after a password reset operation is completed.",
            "example": false
          },
          "version": {
            "type": "integer",
            "description": "Indicates the version of this model.",
            "format": "int32",
            "example": 1
          },
          "wrongAnswersAllowed": {
            "type": "integer",
            "description": "For a KBA authenticator, it is the number of questions that the user could answer incorrectly and still be considered a valid response--not supported if these settings are part of a Group Policy (not the Global Policy).",
            "format": "int32",
            "example": 1,
            "deprecated": true
          }
        },
        "description": "Settings used to manage the Password Reset functionality."
      },
      "Permission": {
        "required": [
          "actionType",
          "entityType",
          "id",
          "roleType"
        ],
        "type": "object",
        "properties": {
          "actionType": {
            "type": "string",
            "description": "The action to which this permission applies.",
            "enum": [
              "VIEW",
              "ADD",
              "EDIT",
              "REMOVE",
              "ALL"
            ]
          },
          "entityType": {
            "type": "string",
            "description": "The entity to which this permission applies.",
            "enum": [
              "ALL",
              "SUBSCRIBERS",
              "USERS",
              "APPLICATIONS",
              "TOKENS",
              "ROLES",
              "SPROLES",
              "CONTEXTRULES",
              "AUTHORIZATIONGROUPS",
              "USERATTRIBUTES",
              "USERATTRIBUTEVALUES",
              "AGENTS",
              "GROUPS",
              "SETTINGS",
              "DIRECTORIES",
              "DIRECTORYSYNC",
              "DIRECTORYCONNECTIONS",
              "TEMPLATES",
              "USERSITEROLES",
              "REPORTS",
              "BULKUSERS",
              "BULKGROUPS",
              "USERPASSWORDS",
              "SERVICEPROVIDERS",
              "SERVICEPROVIDERACCOUNTS",
              "USERMACHINES",
              "CAS",
              "BULKHARDWARETOKENS",
              "BULKSMARTCARDS",
              "DIGITALIDCONFIGS",
              "DIGITALIDCONFIGVARIABLES",
              "DIGITALIDCONFIGCERTTEMPS",
              "DIGITALIDCONFIGSANS",
              "SCDEFNS",
              "SCDEFNPIVAPPLETCONFIGS",
              "SCDEFNVARIABLES",
              "SMARTCREDENTIALS",
              "SMARTCREDENTIALSSIGNATURE",
              "USERSPROLES",
              "EXPECTEDLOCATIONS",
              "USERLOCATIONS",
              "USERRBASETTINGS",
              "SPCLIENTCREDENTIALS",
              "SPMANAGEMENTPLATFORM",
              "ENTITLEMENTS",
              "QUESTIONS",
              "USERQUESTIONS",
              "USERQUESTIONANSWERS",
              "USERKBACHALLENGES",
              "WORDSYNONYMS",
              "GATEWAYS",
              "GATEWAYCSRS",
              "SPUSERMGMT",
              "BULKIDENTITYGUARD",
              "TEMPACCESSCODES",
              "TEMPACCESSCODECONTENTS",
              "GRIDS",
              "GRIDCONTENTS",
              "FIDOTOKENS",
              "EXPORTREPORTS",
              "CUSTOMIZATIONVARIABLES",
              "BLACKLISTEDPASSWORDS",
              "SPENTITLEMENTS",
              "TENANTS",
              "ARCHIVES",
              "CERTIFICATES",
              "INTELLITRUSTDESKTOPS",
              "ACTIVESYNC",
              "PRINTERS",
              "ISSUANCE",
              "IDPROOFING",
              "IDPROOFINGLICENSE",
              "OTPS",
              "AD_CONNECTOR_DIRECTORIES",
              "AZURE_DIRECTORIES",
              "SCHEDULEDTASKS",
              "CREDENTIALDESIGNS",
              "ENROLLMENTS",
              "BULKENROLLMENTS",
              "EMAILTEMPLATES",
              "EMAILVARIABLES",
              "SENDEMAIL",
              "SENDSCIM",
              "DIRECTORYPASSWORD",
              "TRANSACTIONITEMS",
              "TRANSACTIONRULES",
              "ENROLLMENTDESIGNS",
              "HIGH_AVAILABILITY_GROUPS",
              "PKIAASCREDENTIALS",
              "DIGITALIDCERTIFICATES",
              "PIVCONTENTSIGNER",
              "RESOURCESERVERAPIS",
              "RESOURCESERVERSCOPES",
              "USEROAUTHTOKENS",
              "GROUPPOLICIES",
              "OAUTHROLES",
              "IDENTITYPROVIDERS",
              "SMARTCARDS",
              "IPLISTS",
              "DOMAINCONTROLLERCERTS",
              "OTPPROVIDERS",
              "PREFERREDOTPPROVIDERS",
              "SPIDENTITYPROVIDERS",
              "PUSHCREDENTIALS",
              "DIRECTORYSEARCHATTRIBUTES",
              "DIRECTORYATTRIBUTES",
              "RISKENGINES"
            ]
          },
          "id": {
            "type": "string",
            "description": "The UUID of this permission."
          },
          "roleType": {
            "type": "string",
            "description": "The role type to which this permission applies.",
            "enum": [
              "SITE_ADMINISTRATOR",
              "ACCOUNT_MANAGER"
            ]
          }
        },
        "description": "Details about a permission assign to a role."
      },
      "PrinterEntitlement": {
        "type": "object",
        "properties": {
          "consumed": {
            "type": "integer",
            "description": "The entitlements consumed since start date during the entitlement period.",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the entitlement will end.",
            "format": "date-time",
            "example": "2020-02-19T00:00:00Z"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of FlashPass claims allowed during the period.",
            "format": "int32",
            "example": 1000
          },
          "startDate": {
            "type": "string",
            "description": "The date when the entitlement starts.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          }
        },
        "description": "Printer entitlements of a tenant."
      },
      "PrinterParms": {
        "type": "object",
        "description": "Parameters passed when setting the Printer entitlements of a tenant."
      },
      "ProtectedOfflineSettings": {
        "type": "object",
        "properties": {
          "protectedOfflineOTPMaxClients": {
            "type": "integer",
            "description": "Maximum number of IntelliTrust Desktops (or clients in general) that are allowed to be registered with a token for downloading OTPs.",
            "format": "int32"
          },
          "protectedOfflineOTPMaxRefill": {
            "type": "integer",
            "description": "Maximum number of hours' worth of offline OTPs that a client is allowed to possess.",
            "format": "int32"
          },
          "protectedOfflineOTPMinorRefill": {
            "type": "integer",
            "description": "Default number of hours' worth of offline OTPs that is returned.",
            "format": "int32"
          },
          "protectedOfflineOTPProtection": {
            "type": "string",
            "description": "This controls the length of the private salt and is measured in bits. The values map as follows: Normal = 14, Strong = 17, and Very Strong = 20",
            "enum": [
              "NORMAL",
              "STRONG",
              "VERYSTRONG"
            ]
          },
          "protectedOfflineOTPSupport": {
            "type": "boolean",
            "description": "Defines whether tokens can be used offline."
          }
        },
        "description": "Offline token settings to support offline token feature for IntelliTrust Desktop applications."
      },
      "ResetParms": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "An optional token response used to reset the token."
          }
        },
        "description": "Parameters needed to reset the token."
      },
      "ResourceRule": {
        "required": [
          "disableSSO",
          "groups",
          "highRiskFirstStep",
          "highRiskSecondStep",
          "lowRiskFirstStep",
          "lowRiskSecondStep",
          "lowRiskThreshold",
          "mediumRiskFirstStep",
          "mediumRiskSecondStep",
          "mediumRiskThreshold",
          "name",
          "skipSecondFactorIfUserNotExist"
        ],
        "type": "object",
        "properties": {
          "dateTimeContext": {
            "$ref": "#/components/schemas/DateTimeContext"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource rule."
          },
          "disableSSO": {
            "type": "boolean",
            "description": "A flag indicating if single-sign on is disabled for this resource rule."
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag indicating if this resource rule is enabled or not.  Only enabled resource rules are considered during authentication."
          },
          "groups": {
            "type": "array",
            "description": "The groups associated with this resource rule. The resource rule only applies to users in one of the specified groups. A resource rule must specify at least one group which can be the default All Groups if you want the resource rule to apply to all users.",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "highRiskEnableSmartLogin": {
            "type": "boolean",
            "description": "A flag indicating if Smart Login is enabled for High risk."
          },
          "highRiskFirstStep": {
            "type": "string",
            "description": "The authenticator type to use in the first step of a two-step authentication scenario when the risk score is High.",
            "enum": [
              "NONE",
              "EXTERNAL",
              "PASSWORD",
              "KBA",
              "OTP",
              "TOKEN",
              "TOKENPUSH",
              "SMARTCREDENTIALPUSH",
              "DENY"
            ]
          },
          "highRiskSecondStep": {
            "type": "array",
            "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is High.",
            "items": {
              "type": "string",
              "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is High.",
              "enum": [
                "NONE",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH"
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "The unique UUID assigned to the resource rule when it is created."
          },
          "ipContext": {
            "$ref": "#/components/schemas/IpContext"
          },
          "kbaContext": {
            "$ref": "#/components/schemas/KbaContext"
          },
          "locationContext": {
            "$ref": "#/components/schemas/LocationContext"
          },
          "locationHistoryContext": {
            "$ref": "#/components/schemas/LocationHistoryContext"
          },
          "lowRiskEnableSmartLogin": {
            "type": "boolean",
            "description": "A flag indicating if Smart Login is enabled for Low risk."
          },
          "lowRiskFirstStep": {
            "type": "string",
            "description": "The authenticator type to use in the first step of a two-step authentication scenario when the risk score is Low.",
            "enum": [
              "NONE",
              "EXTERNAL",
              "PASSWORD",
              "KBA",
              "OTP",
              "TOKEN",
              "TOKENPUSH",
              "SMARTCREDENTIALPUSH",
              "DENY"
            ]
          },
          "lowRiskSecondStep": {
            "type": "array",
            "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Low.",
            "items": {
              "type": "string",
              "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Low.",
              "enum": [
                "NONE",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH"
              ]
            }
          },
          "lowRiskThreshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Risk scores below this value are considered Low risk.",
            "format": "int32"
          },
          "machineContext": {
            "$ref": "#/components/schemas/MachineContext"
          },
          "mediumRiskEnableSmartLogin": {
            "type": "boolean",
            "description": "A flag indicating if Smart Login is enabled for Medium risk."
          },
          "mediumRiskFirstStep": {
            "type": "string",
            "description": "The authenticator type to use in the first step of a two-step authentication scenario when the risk score is Medium.",
            "enum": [
              "NONE",
              "EXTERNAL",
              "PASSWORD",
              "KBA",
              "OTP",
              "TOKEN",
              "TOKENPUSH",
              "SMARTCREDENTIALPUSH",
              "DENY"
            ]
          },
          "mediumRiskSecondStep": {
            "type": "array",
            "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Medium.",
            "items": {
              "type": "string",
              "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Medium.",
              "enum": [
                "NONE",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH"
              ]
            }
          },
          "mediumRiskThreshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Risk scores below this value are considered Medium risk. Risk scores equal or greater than this value are considered High risk.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the resource rule."
          },
          "resourceId": {
            "type": "string",
            "description": "The UUID of the resource to which this resource rule is assigned."
          },
          "resourceName": {
            "type": "string",
            "description": "The name of the resource to which this resource rule is assigned."
          },
          "riskEngineContexts": {
            "type": "array",
            "description": "If risk engine rules are defined, the transaction contexts specify the levels at which risk is applied to the authentication request if the corresponding risk engine rules trigger risk.",
            "items": {
              "$ref": "#/components/schemas/TransactionContext"
            }
          },
          "skipSecondFactorIfUserNotExist": {
            "type": "boolean",
            "description": "A flag indicating if second factor can be skipped if the user does not exist and the first factor is EXTERNAL."
          },
          "systemResourceContext": {
            "type": "boolean",
            "description": "A flag indicating if this resource rule is associated with a system resource including the Admin and User portals. A resource rule for a system resource cannot be deleted.  They can only be disabled if there is at least one enabled resource rule for the resource."
          },
          "transactionContexts": {
            "type": "array",
            "description": "If transaction details are specified during an authentication request, the transaction contexts specify the levels at which risk is applied to the authentication request if the corresponding transaction rules trigger risk. A maximum of two are allowed.",
            "items": {
              "$ref": "#/components/schemas/TransactionContext"
            }
          },
          "travelVelocityContext": {
            "$ref": "#/components/schemas/TravelVelocityContext"
          }
        },
        "description": "A ResourceRule defines the information returned about a resource rule. A resource rule is used to determine what authentication is used to authenticate to the specified resource (aka application)."
      },
      "ResourceRuleParms": {
        "type": "object",
        "properties": {
          "dateTimeContext": {
            "$ref": "#/components/schemas/DateTimeContext"
          },
          "description": {
            "type": "string",
            "description": "The description of the resource rule."
          },
          "disableSSO": {
            "type": "boolean",
            "description": "A flag indicating if single-sign on is disabled for this resource rule."
          },
          "enabled": {
            "type": "boolean",
            "description": "A flag indicating if this resource rule is enabled or not.  Only enabled resource rules are considered during authentication."
          },
          "groupIds": {
            "type": "array",
            "description": "The UUIDs of groups associated with this resource rule. The resource rule will only apply to users in one of the specified groups. When creating a resource rule, if no groupsIds are specified, the resource rule will apply to all users.",
            "items": {
              "type": "string",
              "description": "The UUIDs of groups associated with this resource rule. The resource rule will only apply to users in one of the specified groups. When creating a resource rule, if no groupsIds are specified, the resource rule will apply to all users."
            }
          },
          "groups": {
            "type": "array",
            "description": "The groups associated with this resource rule. The resource rule only applies to users in one of the specified groups. If no groups are specified, the resource rule applies to all users.  This attribute is ignored if the groupIds attribute is specified. The groupIds attribute should be used instead.",
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "highRiskEnableSmartLogin": {
            "type": "boolean",
            "description": "A flag indicating if Smart Login is enabled for High risk."
          },
          "highRiskFirstStep": {
            "type": "string",
            "description": "The authenticator type to use in the first step of a two-step authentication scenario when the risk score is High. Only the values NONE, EXTERNAL, PASSWORD or DENY should be used for highRiskFirstStep. Other values are defined for backwards compatibility. Some values are not supported by all application types.",
            "enum": [
              "NONE",
              "EXTERNAL",
              "PASSWORD",
              "KBA",
              "OTP",
              "TOKEN",
              "TOKENPUSH",
              "SMARTCREDENTIALPUSH",
              "DENY"
            ]
          },
          "highRiskSecondStep": {
            "type": "array",
            "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is High. Some values are not supported by all application types.",
            "items": {
              "type": "string",
              "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is High. Some values are not supported by all application types.",
              "enum": [
                "NONE",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH"
              ]
            }
          },
          "ipContext": {
            "$ref": "#/components/schemas/IpContext"
          },
          "kbaContext": {
            "$ref": "#/components/schemas/KbaContext"
          },
          "locationContext": {
            "$ref": "#/components/schemas/LocationContext"
          },
          "locationHistoryContext": {
            "$ref": "#/components/schemas/LocationHistoryContext"
          },
          "lowRiskEnableSmartLogin": {
            "type": "boolean",
            "description": "A flag indicating if Smart Login is enabled for Low risk."
          },
          "lowRiskFirstStep": {
            "type": "string",
            "description": "The authenticator type to use in the first step of a two-step authentication scenario when the risk score is Low.  Only the values NONE, EXTERNAL, PASSWORD should be used for lowRiskFirstStep.  The value DENY can only be specified for low risk authentication when using Smart Login, otherwise DENY can only be specified for medium or high risk values. Other values are defined for backwards compatibility. Some values are not supported by all application types.",
            "enum": [
              "NONE",
              "EXTERNAL",
              "PASSWORD",
              "KBA",
              "OTP",
              "TOKEN",
              "TOKENPUSH",
              "SMARTCREDENTIALPUSH",
              "DENY"
            ]
          },
          "lowRiskSecondStep": {
            "type": "array",
            "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Low. Some values are not supported by all application types.",
            "items": {
              "type": "string",
              "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Low. Some values are not supported by all application types.",
              "enum": [
                "NONE",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH"
              ]
            }
          },
          "lowRiskThreshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Risk scores below this value are considered Low risk.",
            "format": "int32"
          },
          "machineContext": {
            "$ref": "#/components/schemas/MachineContext"
          },
          "mediumRiskEnableSmartLogin": {
            "type": "boolean",
            "description": "A flag indicating if Smart Login is enabled for Medium risk."
          },
          "mediumRiskFirstStep": {
            "type": "string",
            "description": "The authenticator type to use in the first step of a two-step authentication scenario when the risk score is Medium. Only the values NONE, EXTERNAL, PASSWORD or DENY should be used for mediumRiskFirstStep. Other values are defined for backwards compatibility.  Some values are not supported by all application types..",
            "enum": [
              "NONE",
              "EXTERNAL",
              "PASSWORD",
              "KBA",
              "OTP",
              "TOKEN",
              "TOKENPUSH",
              "SMARTCREDENTIALPUSH",
              "DENY"
            ]
          },
          "mediumRiskSecondStep": {
            "type": "array",
            "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Medium. Some values are not supported by all application types.",
            "items": {
              "type": "string",
              "description": "The authenticator type to use during in the second step of a two-step authentication scenario when the risk score is Medium. Some values are not supported by all application types.",
              "enum": [
                "NONE",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH"
              ]
            }
          },
          "mediumRiskThreshold": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Risk scores below this value are considered Medium risk. Risk scores equal or greater than this value are considered High risk.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of the resource rule."
          },
          "removeDateTimeContext": {
            "type": "boolean",
            "description": "When updating a resource rule, if removeDateTimeContext is set to true, the existing date time context is removed. This attribute is ignored when creating a resource rule and when updating a resource rule if dateTimeContext is specified."
          },
          "removeIPContext": {
            "type": "boolean",
            "description": "When updating a resource rule, if removeIPContext is set to true, the existing IP context is removed. This attribute is ignored when creating a resource rule and when updating a resource rule if ipContext is specified."
          },
          "removeKBAContext": {
            "type": "boolean",
            "description": "When updating a resource rule, if removeKBAContext is set to true, the existing KBA context is removed. This attribute is ignored when creating a resource rule and when updating a resource rule if kbaContext is specified."
          },
          "removeLocationContext": {
            "type": "boolean",
            "description": "When updating a resource rule, if removeLocationContext is set to true, the existing location context is removed. This attribute is ignored when creating a resource rule and when updating a resource rule if locationContext is specified."
          },
          "removeLocationHistoryContext": {
            "type": "boolean",
            "description": "When updating a resource rule, if removeLocationHistoryContext is set to true, the existing location history context is removed. This attribute is ignored when creating a resource rule and when updating a resource rule if locationHistoryContext is specified."
          },
          "removeMachineContext": {
            "type": "boolean",
            "description": "When updating a resource rule, if removeMachineContext is set to true, the existing machine context is removed. This attribute is ignored when creating a resource rule and when updating a resource rule if machineContext is specified."
          },
          "removeTravelVelocityContext": {
            "type": "boolean",
            "description": "When updating a resource rule, if removeTravelVelocityContext is set to true, the existing travel velocity context is removed. This attribute is ignored when creating a resource rule and when updating a resource rule if travelVelocityContext is specified."
          },
          "resourceId": {
            "type": "string",
            "description": "The UUID of the resource to which this resource rule is assigned. This value is only used when creating a resource rule."
          },
          "riskEngineContexts": {
            "type": "array",
            "description": "If risk engine rules are defined, the transaction contexts specify the level at which risk is applied to the authentication request if the corresponding risk engine rules trigger risk. If set to null, no changes are made. If set to an empty set, transaction contexts are removed.",
            "items": {
              "$ref": "#/components/schemas/TransactionContext"
            }
          },
          "skipSecondFactorIfUserNotExist": {
            "type": "boolean",
            "description": "A flag indicating if second factor will be skipped if user doesn't exist when the first factor was EXTERNAL."
          },
          "transactionContexts": {
            "type": "array",
            "description": "If transaction details are specified during an authentication request, the transaction contexts specify the level at which risk is applied to the authentication request if the corresponding transaction rules trigger risk. A maximum of two are allowed. If set to null, no changes are made. If set to an empty set, transaction contexts are removed.",
            "items": {
              "$ref": "#/components/schemas/TransactionContext"
            }
          },
          "travelVelocityContext": {
            "$ref": "#/components/schemas/TravelVelocityContext"
          }
        },
        "description": "Parameters defining the new resource rule including the resource to which it applies."
      },
      "Role": {
        "required": [
          "name",
          "roleType"
        ],
        "type": "object",
        "properties": {
          "allRoles": {
            "type": "boolean",
            "description": "A flag indicating if administrators with this role can manage all roles and all users."
          },
          "defaultRole": {
            "type": "boolean",
            "description": "A flag indicating if this role is one of the default roles."
          },
          "description": {
            "type": "string",
            "description": "The description of the role."
          },
          "groupIds": {
            "type": "array",
            "description": "The UUIDs of groups associated with this role when Group Management is DEFINED. This attribute is ignored if Group Management is ALL or OWN.",
            "items": {
              "type": "string",
              "description": "The UUIDs of groups associated with this role when Group Management is DEFINED. This attribute is ignored if Group Management is ALL or OWN."
            }
          },
          "groupManagement": {
            "type": "string",
            "description": "The type of the group management. Defaults to ALL if not provided.",
            "enum": [
              "ALL",
              "DEFINED",
              "OWN"
            ]
          },
          "id": {
            "type": "string",
            "description": "The UUID of the role."
          },
          "managedRoles": {
            "type": "array",
            "description": "If allRoles is false, this attribute lists the roles and administrators in these roles thatcan be administered by administrators with this role.  Administrators will also be able to manage end users.",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the role."
          },
          "permissions": {
            "type": "array",
            "description": "A list of the permissions assigned to this role.",
            "items": {
              "$ref": "#/components/schemas/Permission"
            }
          },
          "roleType": {
            "type": "string",
            "description": "The type of the role.",
            "enum": [
              "SITE_ADMINISTRATOR",
              "ACCOUNT_MANAGER"
            ]
          },
          "superAdministrator": {
            "type": "boolean",
            "description": "A flag indicating if this role is a super administrator."
          }
        },
        "description": "Information about a role."
      },
      "RoleUser": {
        "required": [
          "roleName"
        ],
        "type": "object",
        "properties": {
          "defaultRole": {
            "type": "boolean",
            "description": "A flag indicating if this role is one of the default roles."
          },
          "id": {
            "type": "string",
            "description": "The UUID of the role."
          },
          "roleDescription": {
            "type": "string",
            "description": "The description of the role."
          },
          "roleName": {
            "type": "string",
            "description": "The name of the role"
          },
          "usersInRole": {
            "type": "integer",
            "description": "The number of users in this role.",
            "format": "int32"
          }
        },
        "description": "The role information returned from a list role operation."
      },
      "SCDefn": {
        "type": "object",
        "properties": {
          "cardDigitalIdConfigRequired": {
            "type": "boolean",
            "description": "A flag indicating if smart credentials using this SC definition must have a card digital id config defined."
          },
          "cardHolderDigitalIdConfigRequired": {
            "type": "boolean",
            "description": "A flag indicating if smart credentials using this SC definition must have a card holder digital id config defined."
          },
          "cardPinDigits": {
            "type": "string",
            "description": "Requirements for digits in card PINs for smart credentials for this SC Defn.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "cardPinLength": {
            "type": "integer",
            "description": "The length of card PINs generated for smart credentials for this SC Defn.",
            "format": "int32"
          },
          "cardPinLower": {
            "type": "string",
            "description": "Requirements for lowercase letters in card PINs for smart credentials for this SC Defn.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "cardPinMaxAttempts": {
            "type": "integer",
            "description": "The maximum number of times a wrong PIN can be entered incorrectly before it locks out the smart credential.",
            "format": "int32"
          },
          "cardPinMaxLength": {
            "type": "integer",
            "description": "The maximum PIN length of card PINs for smart credentials for this SC Defn.",
            "format": "int32"
          },
          "cardPinMaxUsesAfterAdminReset": {
            "type": "integer",
            "description": "The maximum number of times a PIN can be used before it must be changed after it is set by an administrator.",
            "format": "int32"
          },
          "cardPinMinLength": {
            "type": "integer",
            "description": "The minimum PIN length of card PINs for smart credentials for this SC Defn.",
            "format": "int32"
          },
          "cardPinSpecial": {
            "type": "string",
            "description": "Requirements for special characters in card PINs for smart credentials for this SC Defn.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "cardPinUpper": {
            "type": "string",
            "description": "Requirements for uppercase letters in card PINs for smart credentials for this SC Defn.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "defaultCardDigitalIdConfigId": {
            "type": "string",
            "description": "The UUID of the default card digital id config.  If not set, there is no default."
          },
          "defaultCardHolderDigitalIdConfigId": {
            "type": "string",
            "description": "The UUID of the default card holder digital id config.  If not set, there is no default."
          },
          "defaultSCDefn": {
            "type": "boolean",
            "description": "A flag indicating if this is the default SC Defn."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this SC Defn."
          },
          "lifetime": {
            "type": "integer",
            "description": "The lifetime of smart credentials created for this SC Defn.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of this SC Defn."
          },
          "pivAppletConfigId": {
            "type": "string",
            "description": "The UUID of the PIV applet configuration associated with this smart credential definition."
          },
          "pivContentSignerCAId": {
            "type": "string",
            "description": "The UUID of the CA that defines the PIV Content Signer for this SC definition. If not set, the PIV Content Signer is derived from the digital id configs."
          },
          "variables": {
            "type": "array",
            "description": "Smart Credential Definition Variables defined for this SC Defn.",
            "items": {
              "$ref": "#/components/schemas/SCDefnVariable"
            }
          }
        },
        "description": "Information returned about a smart credential definition."
      },
      "SCDefnGetParms": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the smart credential definition to be retrieved."
          }
        },
        "description": "Parameters to get Smart Credential Definitions by Name."
      },
      "SCDefnVariable": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "type": "string",
            "description": "The default value of this variable."
          },
          "displayable": {
            "type": "boolean",
            "description": "A flag indicating if values for this variable should be displayed."
          },
          "generate": {
            "type": "boolean",
            "description": "A flag indicating if the initial value for this variable should be generated."
          },
          "generateLength": {
            "type": "integer",
            "description": "A length value used when generating values for this variable.",
            "format": "int32"
          },
          "id": {
            "type": "string",
            "description": "The UUID of this SC Defn Variable."
          },
          "modifiable": {
            "type": "boolean",
            "description": "A flag indicating if values for this variable can be modified."
          },
          "name": {
            "type": "string",
            "description": "The name of this SC Defn Variable."
          },
          "order": {
            "type": "integer",
            "description": "A value that specifies the order of this variable with respect to the other variables in the SC Defn.",
            "format": "int32"
          },
          "prompt": {
            "type": "string",
            "description": "Optional prompt to be used when prompting for a value for this variable."
          },
          "required": {
            "type": "boolean",
            "description": "A flag indicating if a value is required for this variable."
          },
          "restrictionDigits": {
            "type": "string",
            "description": "A value specifying restrictions on digits appearing in values of this variable.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "restrictionLower": {
            "type": "string",
            "description": "A value specifying restrictions on lowercase characters appearing in values of this variable.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "restrictionMax": {
            "type": "integer",
            "description": "A value indicating a maximum for values of this variable. How this is enforced depends on the variable type.",
            "format": "int32"
          },
          "restrictionMin": {
            "type": "integer",
            "description": "A value indicating a minimum for values of this variable. How this is enforced depends on the variable type.",
            "format": "int32"
          },
          "restrictionRegex": {
            "type": "string",
            "description": "A value specifying a regex that values of this variable must match."
          },
          "restrictionSpecial": {
            "type": "string",
            "description": "A value specifying restrictions on special characters appearing in values of this variable.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "restrictionUpper": {
            "type": "string",
            "description": "A value specifying restrictions on uppercase characters appearing in values of this variable.",
            "enum": [
              "ALLOWED",
              "REQUIRED",
              "NOT_ALLOWED",
              "NOT_SET"
            ]
          },
          "scDefnId": {
            "type": "string",
            "description": "The UUID of the SC Defn that owns this variable definition."
          },
          "type": {
            "type": "string",
            "description": "The type of this variable.",
            "enum": [
              "STRING",
              "BOOLEAN",
              "INTEGER",
              "UUID"
            ]
          },
          "uniqueness": {
            "type": "string",
            "description": "A flag indicating if values of this variable must be unique and if so within what scope.",
            "enum": [
              "GLOBAL",
              "USER",
              "NONE"
            ]
          },
          "uniquenessScopeId": {
            "type": "string",
            "description": "A value that allows a variable to be defined unique in the scope of another variable."
          }
        },
        "description": "SC Defn Variables define the details about variables defined in the SC Defn."
      },
      "SCVariableValue": {
        "type": "object",
        "properties": {
          "scDefnVariable": {
            "$ref": "#/components/schemas/SCDefnVariable"
          },
          "scDefnVariableId": {
            "type": "string",
            "description": "The UUID of the SC Defn Variable that defines the variable."
          },
          "value": {
            "type": "string",
            "description": "The variable value."
          }
        },
        "description": "SCVariableValues store variable values for a smart credential."
      },
      "SdpParms": {
        "required": [
          "actionType"
        ],
        "type": "object",
        "properties": {
          "actionType": {
            "type": "string",
            "description": "Type of action to be performed on active sync devices",
            "enum": [
              "ALLOW",
              "BLOCK"
            ]
          },
          "deviceId": {
            "type": "array",
            "description": "List of device IDs to be Allowed/Blocked.",
            "example": "androidc1533863968",
            "items": {
              "type": "string",
              "description": "List of device IDs to be Allowed/Blocked.",
              "example": "androidc1533863968"
            }
          }
        },
        "description": "The parameters specifying what is to be changed."
      },
      "SdpResponse": {
        "type": "object",
        "properties": {
          "DeviceAccessState": {
            "type": "string",
            "description": "Current access state of the device.",
            "example": "Quarantined/Allowed/Blocked"
          },
          "DeviceId": {
            "type": "string",
            "description": "Unique device id.",
            "example": "androidc1533863968"
          },
          "DeviceType": {
            "type": "string",
            "description": "Device type.",
            "example": "Android/iPhone"
          },
          "DeviceUserAgent": {
            "type": "string",
            "description": "Agent used to configure ActiveSync on the device.",
            "example": "Outlook-Android/2.0"
          },
          "FriendlyName": {
            "type": "string",
            "description": "Friendly name of the device.",
            "example": "Nexus 9"
          },
          "id": {
            "type": "string",
            "description": "Unique id",
            "example": "6781549d-433c-44ea-a42f-4701458dg245"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The last time devices were fetched.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          }
        },
        "description": "SdpResponse"
      },
      "SearchBase": {
        "type": "object",
        "properties": {
          "directoryId": {
            "type": "string",
            "description": "The UUID of the Directory the seachbase belongs to.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "emptySearchBase": {
            "type": "boolean",
            "description": "Whether or not an empty searchbase is empty?"
          },
          "id": {
            "type": "string",
            "description": "The UUID of the searchbase.",
            "example": "6781549d-433c-44ea-a42f-4705c26f3245"
          },
          "node": {
            "type": "string",
            "description": "The searchbase node.",
            "example": "DC=Users"
          },
          "subsearchbasesIncluded": {
            "type": "boolean",
            "description": "Whether or not a sub-tree is included?"
          }
        },
        "description": "A SearchBase defines the information returned about a directory search base."
      },
      "SearchByAttribute": {
        "required": [
          "name",
          "operator"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Identifies the attribute we are searching for."
          },
          "operator": {
            "type": "string",
            "description": "Identifies the operator.",
            "enum": [
              "EQUALS",
              "NOT_EQUALS",
              "CONTAINS",
              "NOT_CONTAINS",
              "STARTS_WITH",
              "ENDS_WITH",
              "GREATER_THAN",
              "GREATER_THAN_OR_EQUAL",
              "LESS_THAN",
              "LESS_THAN_OR_EQUAL",
              "IN",
              "EXISTS",
              "NOT_EXISTS"
            ]
          },
          "value": {
            "type": "string",
            "description": "Identifies the value of the attribute we are searching for."
          }
        },
        "description": "An attribute used during paging and/or searching."
      },
      "SearchParms": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "description": "Users search only: additional, non-core attributes to include in the returned object. Attribute names are specific to the returned object.",
            "items": {
              "type": "string",
              "description": "Users search only: additional, non-core attributes to include in the returned object. Attribute names are specific to the returned object."
            }
          },
          "cursor": {
            "type": "string",
            "description": "Identifies the page to return when paging over a result set--if present, search by / order by attributes are ignored."
          },
          "limit": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "Identifies the maximum number of items to include in a page (1-100).",
            "format": "int32"
          },
          "orderByAttribute": {
            "$ref": "#/components/schemas/OrderByAttribute"
          },
          "searchByAttributes": {
            "type": "array",
            "description": "Identifies attributes for searching purposes. Some end-points have pre-defined values and ignore this attribute.",
            "items": {
              "$ref": "#/components/schemas/SearchByAttribute"
            }
          }
        },
        "description": "Parameters specifying search attributes or a cursor to get results from a previous search."
      },
      "ServiceBundle": {
        "required": [
          "bundleType"
        ],
        "type": "object",
        "properties": {
          "bundleType": {
            "type": "string",
            "description": "Identifies the bundle.",
            "example": "ADVANCED",
            "enum": [
              "ADVANCED",
              "ESSENTIALS",
              "PROFESSIONAL",
              "API",
              "STANDARD",
              "PLUS",
              "PREMIUM",
              "CONSUMER"
            ]
          },
          "rank": {
            "type": "integer",
            "description": "A number that allows to sort bundles of the same category by precedence. Read-only currently.",
            "format": "int32",
            "example": 1000
          },
          "usageReportId": {
            "type": "string",
            "description": "An identifier used to report usage for this bundle.",
            "example": "SIG_CTR-474988"
          }
        },
        "description": "A bundle identifies a set of capabilities available to a tenant."
      },
      "ServiceIPAddresses": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "description": "A list of IP addresses.",
            "items": {
              "type": "string",
              "description": "A list of IP addresses."
            }
          },
          "lastUpdated": {
            "type": "string",
            "description": "The date this list of IP addresses was last updated.",
            "format": "date-time"
          }
        },
        "description": "Information returned when a client queries the service IP addresses."
      },
      "SmartCredential": {
        "type": "object",
        "properties": {
          "allowedActions": {
            "type": "array",
            "description": "A list of administration actions currently allowed for this smart credential.",
            "items": {
              "type": "string",
              "description": "A list of administration actions currently allowed for this smart credential.",
              "enum": [
                "ACTIVATE",
                "REACTIVATE",
                "UPDATE",
                "UNASSIGN",
                "UNBLOCK",
                "ENABLE",
                "DISABLE",
                "DELETE",
                "VIEW_CERTIFICATES"
              ]
            }
          },
          "cardDigitalConfig": {
            "$ref": "#/components/schemas/DigitalIdConfig"
          },
          "cardDigitalConfigId": {
            "type": "string",
            "description": "The UUID of the Card Digital Id config of this smart credential. If not set, the smart credential will not have a Card Digital Id."
          },
          "cardDigitalConfigRequired": {
            "type": "boolean",
            "description": "Indicates if the card digitalid config is required or not."
          },
          "cardHolderDigitalConfig": {
            "$ref": "#/components/schemas/DigitalIdConfig"
          },
          "cardHolderDigitalConfigId": {
            "type": "string",
            "description": "The UUID of the Card Holder Digital Id config of this smart credential. If not set, the smart credential will not have a Card Holder Digital Id."
          },
          "cardHolderDigitalConfigRequired": {
            "type": "boolean",
            "description": "Indicates if the card holder digitalid config is required or not."
          },
          "certificates": {
            "type": "array",
            "description": "A list of certificates associated with this smart credential.",
            "items": {
              "$ref": "#/components/schemas/DigitalIdCert"
            }
          },
          "chipId": {
            "type": "string",
            "description": "The chip id of the smart card set when the smart credential is encoded."
          },
          "digitalIds": {
            "type": "array",
            "description": "A list of digital ids associated with this smart credential.",
            "items": {
              "$ref": "#/components/schemas/DigitalId"
            }
          },
          "encodeMsg": {
            "type": "string",
            "description": "For smart credentials that have failed to encode, the encode message stores a message providing information about the failure."
          },
          "encodeState": {
            "type": "string",
            "description": "The encode state of a smart credential indicates if encoding has started, completed successfully or failed.",
            "enum": [
              "ENCODE_START",
              "ENCODE_DONE",
              "ENCODE_ERROR"
            ]
          },
          "enrollState": {
            "type": "string",
            "description": "The enrollment state of a smart credential indicates if all of the necessary enrollment values have been collected. Only smart credentials in the ENROLLED state can be activated.",
            "enum": [
              "ENROLLING",
              "ENROLLED"
            ]
          },
          "expiryDate": {
            "type": "string",
            "description": "For issued smart credentials, the expiry date is the date on which the smart credential will expire.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "The unique UUID assigned to the smart credential when it is created."
          },
          "issueDate": {
            "type": "string",
            "description": "The date on which the smart credential was issued.",
            "format": "date-time"
          },
          "notifyEnabled": {
            "type": "boolean",
            "description": "A flag indicating if notification is enabled for this smart credential."
          },
          "platform": {
            "type": "string",
            "description": "The platform of the Mobile SC application on which this smart credential was encoded."
          },
          "scDefnId": {
            "type": "string",
            "description": "The UUID of the Smart Credential Definition that defines this smart credential."
          },
          "scDefnName": {
            "type": "string",
            "description": "The name of the smart credential definition of this smart credential."
          },
          "serialNumber": {
            "type": "string",
            "description": "The unique serial number of the smart credential generated when it is created."
          },
          "state": {
            "type": "string",
            "description": "The state of the smart credential.  Only smart credentials in the ACTIVE state can be used for authentication.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "userId": {
            "type": "string",
            "description": "The UUID of the user that owns this smart credential."
          },
          "userUserId": {
            "type": "string",
            "description": "The user Id of the user that owns this smart credential."
          },
          "variableValues": {
            "type": "array",
            "description": "Variable values for this smart credential",
            "items": {
              "$ref": "#/components/schemas/SCVariableValue"
            }
          },
          "version": {
            "type": "string",
            "description": "The version of the Mobile SC application on which this smart credential was encoded."
          }
        },
        "description": "Information returned from the service about a smart credential."
      },
      "SmartCredentialChangeStateParms": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The new state of the smart credential.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        },
        "description": "Parameters specifying the new state for the smart credential."
      },
      "SmartCredentialCompleteSignParms": {
        "type": "object",
        "properties": {
          "cancelTransaction": {
            "type": "boolean",
            "description": "For smart credential push Signature the transaction can be canceled by setting cancel to true."
          },
          "transactionId": {
            "type": "string",
            "description": "The transactionId for smart credential complete sign operation."
          }
        },
        "description": "Parameters for the smart credential complete sign operation."
      },
      "SmartCredentialCompleteSignResponse": {
        "type": "object",
        "properties": {
          "certChain": {
            "type": "array",
            "description": "The smart credential complete sign base-64 encoded certificate Chain.",
            "items": {
              "type": "string",
              "description": "The smart credential complete sign base-64 encoded certificate Chain."
            }
          },
          "digestSignature": {
            "type": "string",
            "description": "The smart credential complete sign response digestSignature."
          },
          "status": {
            "type": "string",
            "description": "The smart credential complete sign response status.",
            "enum": [
              "CONFIRM",
              "CONCERN",
              "CANCEL",
              "NO_RESPONSE"
            ]
          }
        },
        "description": "Information returned from the smart credential complete sign operation."
      },
      "SmartCredentialParms": {
        "type": "object",
        "properties": {
          "cardDigitalConfigId": {
            "type": "string",
            "description": "The UUID of the Card Digital Id config of this smart credential. It can be specified in either the create or update operations.  If not set, the smart credential will not have a Card Digital Id."
          },
          "cardHolderDigitalConfigId": {
            "type": "string",
            "description": "The UUID of the Card Holder Digital Id config of this smart credential. It can be specified in either the create or update operations.  If not set, the smart credential will not have a Card Holder Digital Id."
          },
          "scDefnId": {
            "type": "string",
            "description": "The UUID of the Smart Credential Definition that defines this smart credential. It must be specified when the smart credential is created and can be updated for an existing smart credential."
          },
          "state": {
            "type": "string",
            "description": "The state of the smart credential.  Only smart credentials in the ACTIVE state can be used for authentication.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "userId": {
            "type": "string",
            "description": "The UUID of the user that owns this smart credential. This value must be specified when the smart credential is created and is read-only after that."
          },
          "variableValues": {
            "type": "array",
            "description": "When creating or modifying a smart credential, the variable values specify a list of variable values to be set.",
            "items": {
              "$ref": "#/components/schemas/SCVariableValue"
            }
          }
        },
        "description": "Parameters for the smart credential to be created including the UUID of the user for which the smart credential will be created."
      },
      "SmartCredentialStartSignParms": {
        "type": "object",
        "properties": {
          "digest": {
            "type": "string",
            "description": "The digest value that will be signed by the smart credential."
          },
          "digestHashAlg": {
            "type": "string",
            "description": "The hashing algorithm that will be used to sign the digest value. It must be one of the values \"SHA-1\", \"SHA-224\", \"SHA-256\", \"SHA-384\", \"SHA-512\".",
            "example": "SHA-256"
          },
          "digestKey": {
            "type": "string",
            "description": "Specify which key on the smart credential is used to sign the digest. If not specified it defaults to PIV_AUTHENTICATION.",
            "example": "DIGITAL_SIGNATURE",
            "enum": [
              "PIV_AUTHENTICATION",
              "DIGITAL_SIGNATURE",
              "CARD_AUTHENTICATION"
            ]
          },
          "summary": {
            "type": "string",
            "description": "The smart credential push signature challenge that appears in the user's mobile application.",
            "example": "You have requested to Sign the loan application."
          }
        },
        "description": "Parameters for the smart credential start sign operation."
      },
      "SmartCredentialStartSignResponse": {
        "type": "object",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The smart credential push signature transactionId returned from the start sign operation."
          }
        },
        "description": "Information returned from the smart credential start sign operation."
      },
      "SmartCredentialUnblockParms": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "The smart credential unblock challenge generated from the smart credential."
          }
        },
        "description": "Parametres for the smart credential unblock operation."
      },
      "SmartCredentialUnblockResponse": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "The smart credential unblock response that needs to be provided to the smart credential to allowed it  to complete the unblock operation."
          }
        },
        "description": "Information returned from the smart credential unblock operation."
      },
      "SmsVoice": {
        "type": "object",
        "properties": {
          "allotment": {
            "type": "integer",
            "description": "The number of entitlements allotted to the current account.  If the account is an SP then entitlements can be allocated to child accounts.",
            "format": "int32",
            "example": 400
          },
          "consumed": {
            "type": "integer",
            "description": "The entitlements consumed since start date during the entitlement period.",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the entitlement will end.",
            "format": "date-time",
            "example": "2020-02-19T00:00:00Z"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of SMS/Voice credits allowed during the period.",
            "format": "int32",
            "example": 1000
          },
          "renewalQuantity": {
            "type": "integer",
            "description": "The number of SMS/Voice credits allowed when the entitlement is renewed.",
            "format": "int32",
            "example": 1000
          },
          "startDate": {
            "type": "string",
            "description": "The date when the entitlement starts.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          }
        },
        "description": "Sms/Voice entitlements of a tenant."
      },
      "SmsVoiceParms": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "description": "The date when the entitlement period will end.  The value must be after the start date. ",
            "format": "date-time"
          },
          "quantity": {
            "type": "integer",
            "description": "The number of SMS/Voice credits allowed during the entitlement period.",
            "format": "int32",
            "example": 1000
          },
          "renewalQuantity": {
            "type": "integer",
            "description": "The number of SMS/Voice credits allowed when the entitlement is renewed.",
            "format": "int32",
            "example": 1000
          },
          "startDate": {
            "type": "string",
            "description": "The date when the entitlement period starts. This value cannot be in the future. If not specified, it defaults to the current date.",
            "format": "date-time"
          }
        },
        "description": "Parameters passed when setting the SMS/Voice entitlements of a tenant."
      },
      "SpIdentityProvider": {
        "required": [
          "enabled",
          "name"
        ],
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The client id of this tenant management."
          },
          "defaultMaxAge": {
            "type": "integer",
            "description": "The default max age of this tenant management.",
            "format": "int32"
          },
          "displayConsent": {
            "type": "boolean",
            "description": "Whether this tenant management should display consent."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether tenant management is enabled."
          },
          "initiateLoginUri": {
            "type": "string",
            "description": "The initiate login URI of this tenant management."
          },
          "name": {
            "type": "string",
            "description": "The name of this tenant management."
          }
        },
        "description": "A tenant management configuration."
      },
      "SpIdentityProviderParms": {
        "required": [
          "enabled"
        ],
        "type": "object",
        "properties": {
          "createDefaultResourceRule": {
            "type": "boolean",
            "description": "Whether an initial default resource rule accessible to all users should be created for this tenant management. This is only used if tenant management was previously disabled. If not set, it defaults to false."
          },
          "defaultMaxAge": {
            "type": "integer",
            "description": "The default max age of this tenant management. If not set, it is not used.",
            "format": "int32"
          },
          "disableSSODefaultResourceRule": {
            "type": "boolean",
            "description": "If an initial default resource rule is enabled, whether to disable SSO. This is only used if an initial default resource rule is being enabled. If not set, it defaults to false."
          },
          "displayConsent": {
            "type": "boolean",
            "description": "Whether this tenant management should display consent. If not set, it defaults to false."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether tenant management is enabled."
          }
        },
        "description": "Parameters passed when setting tenant management."
      },
      "SyncUser": {
        "required": [
          "status",
          "userId",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "directoryId": {
            "type": "string",
            "description": "The directory Id for this user."
          },
          "directoryUuid": {
            "type": "string",
            "description": "The directory uuid for this user."
          },
          "searchBaseId": {
            "type": "string",
            "description": "The searchBase Id for this user."
          },
          "status": {
            "type": "string",
            "description": "The outcome of the synchronization.",
            "enum": [
              "CONVERTED",
              "CREATED",
              "DELETED",
              "LOCALIZED_ENABLED",
              "LOCALIZED_DISABLED",
              "UPDATED"
            ]
          },
          "userId": {
            "type": "string",
            "description": "The user Id for this user."
          },
          "uuid": {
            "type": "string",
            "description": "The uuid for this user."
          }
        },
        "description": "The values associated with a synchronized user.  This structure is returned when synchronizing a user."
      },
      "SyncUserParms": {
        "required": [
          "directoryId",
          "id"
        ],
        "type": "object",
        "properties": {
          "directoryId": {
            "type": "string",
            "description": "The directory id for this synchronization.  This value is required",
            "example": "993dd9b4-e25c-433b-aac6-868b596763a6"
          },
          "id": {
            "type": "string",
            "description": "The id of the user to be synchronized.  The type of the id is specified by idType.",
            "example": "jsmith"
          },
          "idType": {
            "type": "string",
            "description": "The type of the id identifying the user.  The value can be one of UUID (the user's internal UUID) or USERID (the user's userId). The value of EXTERNALID  is currently not supported.  If not specified, this defaults to USERID.",
            "enum": [
              "UUID",
              "USERID",
              "EXTERNALID"
            ]
          }
        },
        "description": "Parameters for synchronization."
      },
      "TempAccessCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The actual temporary access code.  This value will only be returned if the administrator has the TEMPACCESSCODECONTENTS:VIEW permission."
          },
          "createDate": {
            "type": "string",
            "description": "The date on which this temporary access code was created.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "expired": {
            "type": "boolean",
            "description": "A flag indicating if this temporary access code is expired now."
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of this temporary access code.  If not set, it never expires.",
            "format": "date-time",
            "example": "2019-03-19T13:15:27Z"
          },
          "id": {
            "type": "string",
            "description": "The unique UUID assigned to the temporary access code when it is created."
          },
          "maxUses": {
            "type": "integer",
            "description": "The maximum number of times this temporary access code can be used.  If not set, there are no limits.",
            "format": "int32"
          },
          "numUses": {
            "type": "integer",
            "description": "The number of times this temporary access code has been used.",
            "format": "int32"
          }
        },
        "description": "Information returned from the service about a temporary access code."
      },
      "TemporalUnit": {
        "type": "object",
        "properties": {
          "dateBased": {
            "type": "boolean"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "durationEstimated": {
            "type": "boolean"
          },
          "timeBased": {
            "type": "boolean"
          }
        }
      },
      "Tenant": {
        "required": [
          "authenticationAccount",
          "companyName",
          "hostname",
          "id",
          "issuanceAccount",
          "locked",
          "serviceProvider",
          "spIdp"
        ],
        "type": "object",
        "properties": {
          "authenticationAccount": {
            "type": "boolean",
            "description": "A flag indicating if this tenant is an authentication account."
          },
          "companyName": {
            "type": "string",
            "description": "The name of the company that owns this tenant.",
            "example": "Acme Corp."
          },
          "contractMode": {
            "type": "string",
            "description": "The contract mode of a tenant, allowable values = 'PRODUCTION', 'TRIAL', example='TRIAL'.",
            "enum": [
              "PRODUCTION",
              "TRIAL",
              "UNKNOWN"
            ]
          },
          "hostname": {
            "type": "string",
            "description": "The hostname of the tenant.",
            "example": "acme.us.trustedauth.com"
          },
          "id": {
            "type": "string",
            "description": "The UUID of this tenant within the service provider."
          },
          "issuanceAccount": {
            "type": "boolean",
            "description": "A flag indicating if this tenant is an issuance account."
          },
          "locked": {
            "type": "boolean",
            "description": "A flag indicating if this tenant has been locked."
          },
          "serviceProvider": {
            "type": "boolean",
            "description": "A flag indicating if this child tenant is a service provider."
          },
          "spIdp": {
            "type": "boolean",
            "description": "A flag indicating if this tenant is enabled for tenant management authentication."
          }
        },
        "description": "Information returned about a tenant of a service provider."
      },
      "TenantParms": {
        "required": [
          "companyCountry",
          "companyName",
          "domain"
        ],
        "type": "object",
        "properties": {
          "authenticationAccount": {
            "type": "boolean",
            "description": "When creating a new tenant as a child of the root service provider set this to true if the tenant is to be an authentication service. If not specified, it defaults to true. You cannot set the authenticate and issuance values to both true or both false. A child of a non-root service provider inherits the value of its service provider and if specified, this value is ignored.",
            "example": true
          },
          "companyCountry": {
            "type": "string",
            "description": "The country two-letter code (ISO 3166-1) of the location of the company that will own this account.  This value is required",
            "example": "ca"
          },
          "companyName": {
            "type": "string",
            "description": "The name of the company that will own this account.  This value is required.",
            "example": "Acme Corp."
          },
          "companyState": {
            "type": "string",
            "description": "The province/state two-letter code (postal abbreviation) of the location of the company that will own this account.  This value is required for companies in the United States or Canada.",
            "example": "ON"
          },
          "domain": {
            "type": "string",
            "description": "The domain for this account. This value is required when creating a tenant",
            "example": "acme"
          },
          "issuanceAccount": {
            "type": "boolean",
            "description": "When creating a new tenant as a child of the root service provider set this to true if the tenant is to be an issuance service. If not specified, it defaults to false. You cannot set the authenticate and issuance values to both true or both false. A child of a non-root service provider inherits the value of its service provider and if specified, this value is ignored.",
            "example": false
          },
          "serviceProvider": {
            "type": "boolean",
            "description": "When creating a new tenant set this to true if the tenant is to be a service provider.",
            "example": true
          }
        },
        "description": "Parameters passed when creating a tenant."
      },
      "TenantsPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page with the list of tenants found.",
            "items": {
              "$ref": "#/components/schemas/Tenant"
            }
          }
        },
        "description": "Contains paging information and the results from a tenants search."
      },
      "Token": {
        "type": "object",
        "properties": {
          "algorithmType": {
            "type": "string",
            "description": "The algorithm type used by the token that was created or loaded into the system to generate OTP values.",
            "enum": [
              "AT",
              "OATH_HOTP",
              "OATH_OCRA",
              "OATH_TOTP",
              "VENDOR"
            ]
          },
          "allowedActions": {
            "type": "array",
            "description": "Actions that can be performed on this token.",
            "items": {
              "type": "string",
              "description": "Actions that can be performed on this token.",
              "enum": [
                "ACTIVATE",
                "REACTIVATE",
                "ACTIVATE_COMPLETE",
                "DELETE",
                "UNLOCK",
                "ENABLE",
                "DISABLE",
                "RESET",
                "ASSIGN",
                "UNASSIGN"
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "Optional text describing this token."
          },
          "groups": {
            "type": "array",
            "description": "The UUIDs of groups to which this token belongs.  This value is only used for unassigned tokens. Only groups to which the current administrator has access will be returned.",
            "items": {
              "type": "string",
              "description": "The UUIDs of groups to which this token belongs.  This value is only used for unassigned tokens. Only groups to which the current administrator has access will be returned."
            }
          },
          "id": {
            "type": "string",
            "description": "The unique UUID assigned to the token when it is created."
          },
          "label": {
            "type": "string",
            "description": "Optional label to identify an assigned token: a String up to 100 characters.",
            "example": "PENDING"
          },
          "lastUsedDate": {
            "type": "string",
            "description": "The date on which the token was last used for authentication.  This value will be null if the token has never been used.",
            "format": "date-time",
            "example": "2019-02-20T10:05:27Z"
          },
          "loadDate": {
            "type": "string",
            "description": "The date on which the token was created or loaded into the system.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "logo": {
            "type": "string",
            "description": "Base-64 encoded logo. If a custom logo is provided by the customer it is returned. Otherwise a system default logo is returned."
          },
          "name": {
            "type": "string",
            "description": "An optional name for the token."
          },
          "platform": {
            "type": "string",
            "description": "The mobile device platform on which an Entrust Soft Token was activated."
          },
          "registeredForTransactions": {
            "type": "boolean",
            "description": "A flag indicating if the Entrust Soft Token has registered for transactions. Only tokens that are registered can perform token push authentication."
          },
          "serialNumber": {
            "type": "string",
            "description": "The serial number of the token either generated when the token was created or loaded into the system."
          },
          "state": {
            "type": "string",
            "description": "The state of the token.  For most tokens, only tokens in the ACTIVE state can be used for authentication. Google Authenticator tokens in the ACTIVATING state can also be used for authentication.",
            "enum": [
              "NEW",
              "ACTIVATING",
              "ACTIVE",
              "INACTIVE",
              "UNASSIGNED"
            ]
          },
          "supportsChallengeResponse": {
            "type": "boolean",
            "description": "A flag indicating if the Token supports challenge response processing.",
            "example": false
          },
          "supportsResponse": {
            "type": "boolean",
            "description": "A flag indicating if the Token supports response processing.",
            "example": true
          },
          "supportsSignature": {
            "type": "boolean",
            "description": "A flag indicating if the Token supports signature processing.",
            "example": false
          },
          "supportsUnlock": {
            "type": "boolean",
            "description": "A flag indicating if the Token supports unlock processing.",
            "example": true
          },
          "supportsUnlockTOTP": {
            "type": "boolean",
            "description": "A flag indicating if the Token supports unlock using TOTP processing.",
            "example": false
          },
          "type": {
            "type": "string",
            "description": "The type of token specified when the token was created or loaded into the system.",
            "enum": [
              "ENTRUST_PHYSICAL_TOKEN",
              "ENTRUST_SOFT_TOKEN",
              "GOOGLE_AUTHENTICATOR",
              "OATH_PHYSICAL_TOKEN",
              "ENTRUST_LEGACY_TOKEN"
            ]
          },
          "userId": {
            "type": "string",
            "description": "If the token is assigned to a user, this value specifies that user's UUID."
          }
        },
        "description": "Information returned from the service about a token."
      },
      "TokenCreateParms": {
        "type": "object",
        "properties": {
          "activateParms": {
            "$ref": "#/components/schemas/ActivateParms"
          }
        },
        "description": "Optional arguments specifying if the new token is automatically activated. If these arguments are not specified, the token is activated using activation defaults."
      },
      "TokenParms": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "When modifying unassigned tokens the list of UUIDs of groups to which the tokens will belong. If an empty list is provided, the unassigned token will not belong to any groups.",
            "items": {
              "type": "string",
              "description": "When modifying unassigned tokens the list of UUIDs of groups to which the tokens will belong. If an empty list is provided, the unassigned token will not belong to any groups."
            }
          }
        },
        "description": "Arguments specified changes to the token."
      },
      "TokensPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page with the list of assigned tokens found.",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          }
        },
        "description": "Contains paging information and the results from an assigned tokens search."
      },
      "TransactionContext": {
        "required": [
          "name",
          "riskLimit",
          "riskPoint",
          "transactionRuleRisks"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of this transaction context."
          },
          "riskLimit": {
            "type": "integer",
            "description": "The risk points apply if the accumulated risk of each configured transaction rule is above this value.",
            "format": "int32"
          },
          "riskPoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The number of risk points that apply if this context applies.",
            "format": "int32"
          },
          "transactionRuleRisks": {
            "type": "array",
            "description": "The transaction rules associated with this context.",
            "items": {
              "$ref": "#/components/schemas/TransactionRuleRisk"
            }
          }
        },
        "description": "The transaction context specifies transaction rules. Risk is applied to the authentication 1if the accumulated risk score of the transaction rules is above the risk limit."
      },
      "TransactionDetail": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "The transaction detail name.",
            "example": "Amount"
          },
          "usage": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The transaction detail usage. If not provided, the attribute supports all usages. RBA indicates that the detail is used for risk-based authentication; TVS indicates that the detail is used for transaction verification.",
              "example": "RBA",
              "enum": [
                "RBA,TVS"
              ]
            }
          },
          "value": {
            "type": "string",
            "description": "The transaction detail value.",
            "example": "$10,001"
          }
        },
        "description": "Transaction detail item and its value used with push authenticators and with offline transaction verification."
      },
      "TransactionRuleDescription": {
        "required": [
          "description",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of this transaction rule."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this transaction rule."
          },
          "name": {
            "type": "string",
            "description": "The name of this transaction rule."
          }
        },
        "description": "Information stored for a transaction rule description."
      },
      "TransactionRuleRisk": {
        "required": [
          "riskScore",
          "transactionRuleId"
        ],
        "type": "object",
        "properties": {
          "riskScore": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "The risk score that applies if this transaction rule is triggered.",
            "format": "int32"
          },
          "transactionRuleId": {
            "type": "string",
            "description": "The id of the transaction rule associated with this risk definition."
          }
        },
        "description": "Information associated with the risk of a specific transaction rule within a transaction context."
      },
      "TravelVelocityContext": {
        "required": [
          "riskPoint"
        ],
        "type": "object",
        "properties": {
          "riskPoint": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "The number of risk points that apply if this context applies.",
            "format": "int32"
          }
        },
        "description": "Travel velocity checks to see if the time between authentications at different locations means the user has traveled faster than a given velocity. If the velocity is exceeded, risk applies."
      },
      "UnlockParms": {
        "required": [
          "unlockChallenge"
        ],
        "type": "object",
        "properties": {
          "unlockChallenge": {
            "type": "string",
            "description": "The unlock challenge generated by the token when it is locked."
          }
        },
        "description": "Parameters specifying parameters for the token unlock operation."
      },
      "UnlockResult": {
        "required": [
          "unlockCode"
        ],
        "type": "object",
        "properties": {
          "unlockCode": {
            "type": "string",
            "description": "The unlock code generated by the service in response to the unlock challenge. This value should be entered into the token to complete the unlock."
          }
        },
        "description": "The response returned from a token unlock operation."
      },
      "UnsyncUserParms": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user to be unsynchronized.  The type of the id is specified by idType.",
            "example": "jsmith"
          },
          "idType": {
            "type": "string",
            "description": "The type of the id identifying the user.  The value can be one of UUID (the user's internal UUID) or USERID (the user's userId). The value of EXTERNALID  is currently not supported.  If not specified, this defaults to USERID.",
            "enum": [
              "UUID",
              "USERID",
              "EXTERNALID"
            ]
          }
        },
        "description": "Parameters for unsynchronization."
      },
      "UpdateUserParms": {
        "required": [
          "id",
          "parms"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the user to be updated.  The type of the id is specified by idType."
          },
          "idType": {
            "type": "string",
            "description": "The type of the id identifying the user.  The value can be one of UUID (the user's internal UUID), USERID (the user's userId) or EXTERNALID (the externalId of the user). If not specified, this defaults to UUID.",
            "enum": [
              "UUID",
              "USERID",
              "EXTERNALID"
            ]
          },
          "parms": {
            "$ref": "#/components/schemas/UserParms"
          }
        },
        "description": "When updating multiple users in a single request, the UpdateUserParms value contains the update parameters for a single user.  It will include the id of the user to be updated and the parameters to be changed for that user."
      },
      "UpdateUserResult": {
        "required": [
          "success"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "success": {
            "type": "boolean",
            "description": "Indicates if the user was successfully updated (true) or not (false)."
          }
        },
        "description": "When updating multiple users in a single request, the UpdateUserResult value contains the result for a single user.  It will indicate if the operation succeeded and if it failed will include error information describing why the  operation failed."
      },
      "UpdateUsersParms": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "stopOnError": {
            "type": "boolean",
            "description": "If set to true, the operation stops on the first operation that fails.  Otherwise the operation continues for each specified user. If not specified, this defaults to false."
          },
          "users": {
            "type": "array",
            "description": "The list of users to be updated.",
            "items": {
              "$ref": "#/components/schemas/UpdateUserParms"
            }
          }
        },
        "description": "The list of users to update and the parameters to change for each user."
      },
      "UsageInfo": {
        "required": [
          "aggregationPeriod",
          "count",
          "endTime",
          "id",
          "startTime",
          "tenantId",
          "trial",
          "usageType"
        ],
        "type": "object",
        "properties": {
          "aggregationPeriod": {
            "type": "string",
            "description": "The aggregation period used.",
            "example": "DAILY",
            "enum": [
              "DAILY",
              "WEEKLY",
              "MONTHLY"
            ]
          },
          "bundleType": {
            "type": "string",
            "description": "The service bundle."
          },
          "count": {
            "type": "integer",
            "description": "The entitlements used in the aggregation period.",
            "format": "int64"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the aggregation period.",
            "example": "2019-02-19T00:00:00Z"
          },
          "id": {
            "type": "string",
            "description": "The unique UUID for this usage info."
          },
          "startTime": {
            "type": "string",
            "description": "The start time of the aggregation period.",
            "example": "2019-02-19T00:00:00Z"
          },
          "tenantId": {
            "type": "string",
            "description": "The unique UUID of the tenant."
          },
          "trial": {
            "type": "boolean",
            "description": "Whether the usage is associated to a trial tenant.",
            "example": true
          },
          "usageType": {
            "type": "string",
            "description": "The type of this entitlement.",
            "example": "USERS",
            "enum": [
              "USERS",
              "IDPROOFING",
              "ISSUANCE"
            ]
          }
        },
        "description": "Entitlement usage information of a tenant."
      },
      "UsageInfoPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page with the list of usage info found.",
            "items": {
              "$ref": "#/components/schemas/UsageInfo"
            }
          }
        },
        "description": "Contains paging information and the results from a tenant usage info search."
      },
      "User": {
        "type": "object",
        "properties": {
          "authenticatorLockoutStatus": {
            "type": "array",
            "description": "A list of all authenticators that the user has with their lockout status.",
            "items": {
              "$ref": "#/components/schemas/UserAuthenticatorLockoutStatus"
            }
          },
          "directoryDN": {
            "type": "string",
            "description": "The DN of the user in the directory the user was synchronized from."
          },
          "directoryId": {
            "type": "string",
            "description": "If the user was synchronized from a directory, the UUID of that directory."
          },
          "directoryName": {
            "type": "string",
            "description": "If the user was synchronized from a directory, the name of that directory."
          },
          "directoryObjectGUID": {
            "type": "string",
            "description": "The objectGUID of the user in the directory the user was synchronized from."
          },
          "directoryType": {
            "type": "string",
            "description": "The type of the directory user was synchronized from.",
            "enum": [
              "ON_PREM",
              "AZURE",
              "AD_CONNECTOR"
            ]
          },
          "email": {
            "type": "string",
            "description": "The email address of this user.  This value may or may not be required depending on configuration. It must be set to use EMAIL OTP authentication and other features that require an email address."
          },
          "externalId": {
            "type": "string",
            "description": "An optional external ID for this user.  This value can be used to track the external identity of an Identity as a Service user. ",
            "example": "John"
          },
          "externalSource": {
            "type": "string",
            "description": "An optional value that describes the source when the user is synchronized from an external source."
          },
          "fidoTokens": {
            "type": "array",
            "description": "A list of all the FIDO tokens owned by this user.",
            "items": {
              "$ref": "#/components/schemas/FIDOToken"
            }
          },
          "firstName": {
            "type": "string",
            "description": "The first name of this user.  This value may or may not be required depending on configuration."
          },
          "grids": {
            "type": "array",
            "description": "A list of all the grids owned by this user.",
            "items": {
              "$ref": "#/components/schemas/Grid"
            }
          },
          "groups": {
            "type": "array",
            "description": "A list of all groups to which this user belongs.",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "id": {
            "type": "string",
            "description": "The unique UUID for this user.  This value is generated by the service when a user is created."
          },
          "lastAuthTime": {
            "type": "string",
            "description": "The last time this user successfully authenticated.  Null if the user has never authenticated.",
            "format": "date-time"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of this user.  This value may or may not be required depending on configuration."
          },
          "locale": {
            "type": "string",
            "description": "The locale of this user.  If not set, the default account locale will be used."
          },
          "locked": {
            "type": "boolean",
            "description": "A flag indicating if this user is locked."
          },
          "lockedAuthenticatorTypes": {
            "type": "array",
            "description": "The user authenticators that are locked.",
            "items": {
              "type": "string",
              "description": "The user authenticators that are locked.",
              "enum": [
                "MACHINE",
                "PASSWORD",
                "EXTERNAL",
                "KBA",
                "TEMP_ACCESS_CODE",
                "OTP",
                "GRID",
                "TOKEN",
                "TOKENPUSH",
                "FIDO",
                "SMARTCREDENTIALPUSH",
                "PASSWORD_AND_SECONDFACTOR"
              ]
            }
          },
          "lockedAuthenticators": {
            "type": "array",
            "description": "The user authenticators that are locked. Deprecated: use lockedAuthenticatorTypes",
            "deprecated": true,
            "items": {
              "type": "string",
              "description": "The user authenticators that are locked. Deprecated: use lockedAuthenticatorTypes",
              "enum": [
                "PASSWORD",
                "KBA",
                "TEMP_ACCESS_CODE",
                "GRID",
                "OTP_EMAIL",
                "OTP_SMS",
                "OTP_VOICE",
                "ENTRUST_SOFT_TOKEN",
                "ENTRUST_SOFT_TOKEN_PUSH",
                "GOOGLE_AUTHENTICATOR",
                "HARDWARE_TOKEN",
                "FIDO",
                "SMARTCREDENTIALPUSH",
                "MACHINE"
              ]
            }
          },
          "lockoutExpiry": {
            "type": "string",
            "description": "If the user is locked, this value will specify the time at which the lockout will expire.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "migrated": {
            "type": "boolean",
            "description": "A flag indicating if this user was migrated from Entrust IdentityGuard."
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of this user.  This value may or may not be required depending on configuration. It must be set to use SMS OTP authentication."
          },
          "oauthRoles": {
            "type": "array",
            "description": "A list of all oauth roles to which this user belongs.",
            "items": {
              "$ref": "#/components/schemas/OAuthRole"
            }
          },
          "otpCreateTime": {
            "type": "string",
            "description": "If the user has an OTP, this attribute specifies when the user's OTP was created.",
            "format": "date-time",
            "example": "2019-02-11T11:45:27Z"
          },
          "passwordExpirationTime": {
            "type": "string",
            "description": "The password expiration time.",
            "format": "date-time"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of this user.  This value may or may not be required depending on configuration. It must be set to use VOICE OTP authentication."
          },
          "preferredOtpDelivery": {
            "type": "string",
            "description": "Preferred OTP delivery type (SMS, EMAIL or VOICE) or SYSTEM to use the system defined default.",
            "example": "SYSTEM",
            "enum": [
              "EMAIL",
              "SMS",
              "VOICE",
              "SYSTEM"
            ]
          },
          "preferredOtpDeliveryContactAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Preferred OTP delivery contact attribute for the given type (i.e., OTP_EMAIL, OTP_SMS, OTP_VOICE. An empty string means no override for that type).",
              "example": "{\"OTP_EMAIL\":\"Email\",\"OTP_SMS\":\"Personal Mobile\",\"OTP_VOICE\":\"default\"}"
            },
            "description": "Preferred OTP delivery contact attribute for the given type (i.e., OTP_EMAIL, OTP_SMS, OTP_VOICE. An empty string means no override for that type).",
            "example": {
              "OTP_EMAIL": "Email",
              "OTP_SMS": "Personal Mobile",
              "OTP_VOICE": "default"
            }
          },
          "registrationEnabled": {
            "type": "boolean",
            "description": "Indicates whether registration is enabled for this user.",
            "example": true
          },
          "registrationRequired": {
            "type": "boolean",
            "description": "Indicates whether self-registration is required. This attribute doesn't apply to administrators.",
            "example": true
          },
          "smartCredentials": {
            "type": "array",
            "description": "A list of all the smart credentials owned by this user.",
            "items": {
              "$ref": "#/components/schemas/SmartCredential"
            }
          },
          "state": {
            "type": "string",
            "description": "The state of this user.  Only users in the ACTIVE state can perform authentication.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "tempAccessCode": {
            "$ref": "#/components/schemas/TempAccessCode"
          },
          "tokens": {
            "type": "array",
            "description": "A list of all the tokens owned by this user.",
            "items": {
              "$ref": "#/components/schemas/Token"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of user.  A value of LDAP_AD means the user was synchronized from a directory. A value of MGMT_UI means the user was created in Identity as a Service. A value of EXTERNAL means the user was synchronized from an external source.",
            "enum": [
              "LDAP_AD",
              "MGMT_UI",
              "EXTERNAL"
            ]
          },
          "userAliases": {
            "type": "array",
            "description": "A list of user aliases for this user.",
            "items": {
              "$ref": "#/components/schemas/UserAlias"
            }
          },
          "userAttributeValues": {
            "type": "array",
            "description": "A list of user attribute values for this user.",
            "items": {
              "$ref": "#/components/schemas/UserAttributeValue"
            }
          },
          "userExtraAttributes": {
            "type": "array",
            "description": "A list of extra optional attributes for this user.",
            "items": {
              "$ref": "#/components/schemas/UserExtraAttribute"
            }
          },
          "userId": {
            "type": "string",
            "description": "The user ID for this user."
          },
          "userPrincipalName": {
            "type": "string",
            "description": "The user principal name of this user.  This value may or may not be required depending on configuration."
          },
          "verificationEnabled": {
            "type": "boolean",
            "description": "Indicates whether verification is enabled for this user.",
            "example": true
          },
          "verificationRequired": {
            "type": "boolean",
            "description": "Indicates whether verification is required. This attribute doesn't apply to administrators.",
            "example": true
          }
        },
        "description": "The values stored for a user.  This structure is passed when creating or modifying a user.  It is returned when querying a user."
      },
      "UserAlias": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of this user alias set when the user alias is created.",
            "example": "76234da-3cf2-4t6u-8d02-8234fdfc472"
          },
          "type": {
            "type": "string",
            "description": "The type of user alias. A value of USERID is used for an alias that will represent the actual user id value. A value of CUSTOM is used for aliases manually created by an administrator.  A value of DERIVED is defined for future use and should not be used at this time.",
            "enum": [
              "CUSTOM",
              "DERIVED",
              "USERID"
            ]
          },
          "userId": {
            "type": "string",
            "description": "The UUID of the user to which this user alias belongs.",
            "example": "42133ed4-3cf2-4t6u-8d02-8234fdfc472"
          },
          "value": {
            "type": "string",
            "description": "The value for the user alias.",
            "example": "some-alias"
          }
        },
        "description": "Specifies an alias for a particular user."
      },
      "UserAttribute": {
        "required": [
          "mandatory",
          "name",
          "systemDefined",
          "unique"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID for this user attribute.  Generated when the user attribute is created."
          },
          "mandatory": {
            "type": "boolean",
            "description": "A flag indicating if users must have a value for this user attribute."
          },
          "name": {
            "type": "string",
            "description": "The name of this user attribute."
          },
          "systemDefined": {
            "type": "boolean",
            "description": "A flag indicating if this user attribute is one of the system defined user attributes."
          },
          "type": {
            "type": "string",
            "description": "Type of user attribute. Currently only used to specify the type of contact if the attribute is to be used for OTP delivery.",
            "example": "OTP_EMAIL",
            "enum": [
              "NONE",
              "OTP_EMAIL",
              "OTP_SMS",
              "OTP_VOICE"
            ]
          },
          "unique": {
            "type": "boolean",
            "description": "A flag indicating if this attribute is intended to be unique."
          }
        },
        "description": "Information about user attribute definitions."
      },
      "UserAttributeParms": {
        "type": "object",
        "properties": {
          "mandatory": {
            "type": "boolean",
            "description": "A flag indicating if users must have a value for this user attribute. If not specified when creating a user attribute if defaults to false."
          },
          "name": {
            "type": "string",
            "description": "The name of this user attribute. This must be specified when creating a user attribute."
          },
          "type": {
            "type": "string",
            "description": "Type of user attribute.",
            "example": "OTP_EMAIL",
            "enum": [
              "NONE",
              "OTP_EMAIL",
              "OTP_SMS",
              "OTP_VOICE"
            ]
          },
          "unique": {
            "type": "boolean",
            "description": "A flag indicating if this attribute is intended to be unique. If not specified when creating a user attribute it defaults to false."
          }
        },
        "description": "The parameters for the new user attribute."
      },
      "UserAttributeValue": {
        "type": "object",
        "properties": {
          "editable": {
            "type": "boolean",
            "description": "A flag indicating if this user attribute value can be modified."
          },
          "id": {
            "type": "string",
            "description": "The UUID of this user attribute value set when the user attribute value is created.",
            "example": "76234da-3cf2-4t6u-8d02-8234fdfc472"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The last time the attribute value was updated.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "userAttribute": {
            "$ref": "#/components/schemas/UserAttribute"
          },
          "userAttributeId": {
            "type": "string",
            "description": "The UUID of the user attribute that defines this user attribute value.  The userAttributeId must be provided when creating or modifying a user attribute value.",
            "example": "76234da-3cf2-4t6u-8d02-8234fdfc472"
          },
          "userId": {
            "type": "string",
            "description": "The UUID of the user to which this user attribute value belongs.",
            "example": "John"
          },
          "value": {
            "type": "string",
            "description": "The value for the user attribute.",
            "example": "value"
          }
        },
        "description": "Specifies the value of a user attribute for a particular user."
      },
      "UserAuthenticatorLockoutStatus": {
        "type": "object",
        "properties": {
          "lockoutDate": {
            "type": "string",
            "description": "The date the user was locked. Null means the user is not locked.",
            "format": "date-time",
            "example": "2019-02-19T13:15:27Z"
          },
          "lockoutExpiryDate": {
            "type": "string",
            "description": "if remainingAuthenticationAttempts is 0 then a lockoutExpiryDate of null means the lockout never expires. Otherwise a value of null means the user isn't locked out.",
            "format": "date-time",
            "example": "2019-02-20T13:15:27Z"
          },
          "remainingAuthenticationAttempts": {
            "type": "integer",
            "description": "The number of authentication attempts remaining before the user is locked out.",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "The type of the authenticator.",
            "example": "OTP",
            "enum": [
              "MACHINE",
              "PASSWORD",
              "EXTERNAL",
              "KBA",
              "TEMP_ACCESS_CODE",
              "OTP",
              "GRID",
              "TOKEN",
              "TOKENPUSH",
              "FIDO",
              "SMARTCREDENTIALPUSH",
              "PASSWORD_AND_SECONDFACTOR"
            ]
          }
        },
        "description": "Detailed lockout information for each authenticator for a particular user."
      },
      "UserChangeStateParms": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "The new state of the user.",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          }
        },
        "description": "User parameters including the new state of the user."
      },
      "UserEntitlement": {
        "type": "object",
        "properties": {
          "allotment": {
            "type": "integer",
            "description": "The number of entitlements allotted to the current account.  If the account is an SP then entitlements can be allocated to child accounts. For subscriber accounts, the allotment is always the same as the quantity amount.",
            "format": "int32",
            "example": 130
          },
          "consumed": {
            "type": "integer",
            "description": "The used quantity of this entitlement.",
            "format": "int32",
            "example": 37
          },
          "endDate": {
            "type": "string",
            "description": "The date when the entitlement ends.",
            "format": "date-time",
            "example": "2020-02-18T23:59:59Z"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of entitlements purchased for the account.",
            "format": "int32",
            "example": 200
          },
          "startDate": {
            "type": "string",
            "description": "The date when the entitlement starts.",
            "format": "date-time",
            "example": "2019-02-19T00:00:00Z"
          }
        },
        "description": "User entitlements of a tenant."
      },
      "UserExpectedLocations": {
        "required": [
          "expectedLocations",
          "maximumExpectedLocations"
        ],
        "type": "object",
        "properties": {
          "expectedLocations": {
            "type": "array",
            "description": "The list of expected locations stored for this user.",
            "items": {
              "$ref": "#/components/schemas/ExpectedLocation"
            }
          },
          "maximumExpectedLocations": {
            "type": "integer",
            "description": "The maximum number of expected locations that can be stored for this user.",
            "format": "int32"
          }
        },
        "description": "Information about the expected locations stored for a user."
      },
      "UserExtraAttribute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The UUID of this extra user attribute.",
            "readOnly": true,
            "example": "76234da-3cf2-4t6u-8d02-8234fdfc472"
          },
          "name": {
            "type": "string",
            "description": "The name for the extra user attribute.",
            "example": "some-attr-name"
          },
          "type": {
            "type": "string",
            "description": "Type of custom user attribute.",
            "example": "OTP_SMS",
            "enum": [
              "NONE",
              "OTP_EMAIL",
              "OTP_SMS",
              "OTP_VOICE"
            ]
          },
          "value": {
            "type": "string",
            "description": "The value for the extra user attribute.",
            "example": "some-value"
          }
        },
        "description": "Specifies an extra optional attribute for a particular user."
      },
      "UserGetParms": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "If fetching a user by userId or alias, this value specifies, the userId or user alias of the user to be fetched. If fetching a user by externalId, this value specifies, the externalId of the user to be fetched.",
            "example": "John"
          }
        },
        "description": "The user Id or user alias of the user to be fetched."
      },
      "UserLocation": {
        "required": [
          "id",
          "lastAuthenticationTime",
          "numberOfAuthentications"
        ],
        "type": "object",
        "properties": {
          "city": {
            "type": "string",
            "description": "The city name--always returned in upper-case."
          },
          "countryCode": {
            "type": "string",
            "description": "A two-character (alpha-2) ISO 3166-1  country code."
          },
          "expiryDate": {
            "type": "string",
            "description": "The date this user location will expire.",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "The UUID of the user location."
          },
          "ipAddress": {
            "type": "string",
            "description": "The IPv4 Address."
          },
          "isp": {
            "type": "string",
            "description": " The ISP name--always returned in upper-case."
          },
          "lastAuthenticationTime": {
            "type": "string",
            "description": "The time of the last authentication from this location.",
            "format": "date-time"
          },
          "latitude": {
            "type": "number",
            "description": "The latitude.",
            "format": "float"
          },
          "longitude": {
            "type": "number",
            "description": "The longitude.",
            "format": "float"
          },
          "numberOfAuthentications": {
            "type": "integer",
            "description": "The number of times this location was used during authentication.",
            "format": "int32"
          },
          "privateIpAddress": {
            "type": "boolean",
            "description": "Whether the IP provided is a private IP Address."
          }
        },
        "description": "Information stored describing a user location."
      },
      "UserMachineAuthenticator": {
        "required": [
          "id",
          "label",
          "registrationTime"
        ],
        "type": "object",
        "properties": {
          "expiryTime": {
            "type": "string",
            "description": "When this machine secret expires in UTC time",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "description": "Identifies the device/machine"
          },
          "label": {
            "type": "string",
            "description": "Identifies the device/machine from the end-user point of view"
          },
          "lastUsedTime": {
            "type": "string",
            "description": "When this machine secret was last used",
            "format": "date-time"
          },
          "registrationTime": {
            "type": "string",
            "description": "When this machine secret was created in UTC time",
            "format": "date-time"
          }
        },
        "description": "UserMachineAuthenticator"
      },
      "UserParms": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of this user.  This value may or may not be required depending on configuration.  If it is required, it must be specified when creating the user.  If it is required, it must be specified when updating the user and a value is not currently set.  It must be set to use EMAIL OTP authentication and other features that require an email address.  To remove the existing value, set the value to an empty string.",
            "example": "johnsmith@organization.com"
          },
          "emailVerification": {
            "type": "boolean",
            "description": "Indicates if a verification email message should be sent to the user if the user now requires verification. The user's policy requiring user verification must also be enabled for the user. If not set, this value defaults to true.",
            "example": true
          },
          "externalId": {
            "type": "string",
            "description": "An optional external ID for this user.  This value can be used to track the external identity of an Identity as a Service user. To unset the external ID, specify an empty string."
          },
          "externalSource": {
            "type": "string",
            "description": "An optional value that describes the source when the user is synchronized from an external source. To unset the external source, specify an empty string."
          },
          "firstName": {
            "type": "string",
            "description": "The first name of this user.  This value may or may not be required depending on configuration.  If it is required, it must be specified when creating the user.  If it is required, it must be specified when updating the user and a value is not currently set.  To remove the existing value, set the value to an empty string.",
            "example": "John"
          },
          "groups": {
            "type": "array",
            "description": "A list of group UUIDs to be assigned to this user.  If specified, these groups replace existing groups.",
            "items": {
              "type": "string",
              "description": "A list of group UUIDs to be assigned to this user.  If specified, these groups replace existing groups."
            }
          },
          "lastName": {
            "type": "string",
            "description": "The last name of this user.    This value may or may not be required depending on configuration.  If it is required, it must be specified when creating the user.  If it is required, it must be specified when updating the user and a value is not currently set.  To remove the existing value, set the value to an empty string.",
            "example": "Smith"
          },
          "locale": {
            "type": "string",
            "description": "The locale of this user.  If not set, the default account locale will be used. To remove the existing value, set the value to an empty string.",
            "example": "en",
            "enum": [
              "da",
              "de",
              "en",
              "es",
              "fr",
              "it",
              "ja",
              "ko",
              "nl",
              "nb",
              "pl",
              "pt",
              "ru",
              "sv",
              "th",
              "tr",
              "zh-cn",
              "zh-tw"
            ]
          },
          "lock": {
            "type": "boolean",
            "description": "Indicates if all the user's authenticators are locked or not.",
            "example": true
          },
          "mobile": {
            "type": "string",
            "description": "The mobile number of this user.  This value may or may not be required depending on configuration.  If it is required, it must be specified when creating the user.  If it is required, it must be specified when updating the user and a value is not currently set.  It must be set to use SMS OTP authentication.  To remove the existing value, set the value to an empty string.",
            "example": "+16138691234"
          },
          "oauthRoles": {
            "type": "array",
            "description": "A list of oauth role UUIDs to be assigned to this user.  If specified, these oauth roles replace existing oauth roles.",
            "items": {
              "type": "string",
              "description": "A list of oauth role UUIDs to be assigned to this user.  If specified, these oauth roles replace existing oauth roles."
            }
          },
          "phone": {
            "type": "string",
            "description": "The phone number of this user.  This value may or may not be required depending on configuration.  If it is required, it must be specified when creating the user.  If it is required, it must be specified when updating the user and a value is not currently set.  It must be set to use VOICE OTP authentication.  To remove the existing value, set the value to an empty string.",
            "example": "+16138691234"
          },
          "preferredOtpDelivery": {
            "type": "string",
            "description": "Preferred OTP delivery type (SMS, EMAIL or VOICE) or SYSTEM to use the system defined default.",
            "example": "SYSTEM",
            "enum": [
              "EMAIL",
              "SMS",
              "VOICE",
              "SYSTEM"
            ]
          },
          "preferredOtpDeliveryContactAttributes": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Preferred OTP delivery contact attribute for the given type (i.e., OTP_EMAIL, OTP_SMS, OTP_VOICE. An empty string means no override for that type).",
              "example": "{\"OTP_EMAIL\":\"Email\",\"OTP_SMS\":\"Personal Mobile\",\"OTP_VOICE\":\"default\"}"
            },
            "description": "Preferred OTP delivery contact attribute for the given type (i.e., OTP_EMAIL, OTP_SMS, OTP_VOICE. An empty string means no override for that type).",
            "example": {
              "OTP_EMAIL": "Email",
              "OTP_SMS": "Personal Mobile",
              "OTP_VOICE": "default"
            }
          },
          "registrationRequired": {
            "type": "boolean",
            "description": "Indicates whether self-registration is required. If not set when the user is created, this value defaults to true.",
            "example": true
          },
          "state": {
            "type": "string",
            "description": "The state of this user.  Only users in the ACTIVE state can perform authentication. If not set when the user is created, this value defaults to ACTIVE.",
            "example": "ACTIVE",
            "enum": [
              "ACTIVE",
              "INACTIVE"
            ]
          },
          "userAliases": {
            "type": "array",
            "description": "A list of user aliases for this user. Alias values must be unique with respect to the userId and other aliases of this user and other users.",
            "items": {
              "$ref": "#/components/schemas/UserAlias"
            }
          },
          "userAttributeValues": {
            "type": "array",
            "description": "A list of user attribute values for this user.",
            "items": {
              "$ref": "#/components/schemas/UserAttributeValue"
            }
          },
          "userExtraAttributes": {
            "type": "array",
            "description": "A list of extra optional attributes for this user.",
            "items": {
              "$ref": "#/components/schemas/UserExtraAttribute"
            }
          },
          "userId": {
            "type": "string",
            "description": "The user ID for this user.  This value is required when creating the user, optional during update. The userId must be unique with respect to aliases of this user and the userId and aliases of all other users.",
            "example": "jsmith"
          },
          "userPrincipalName": {
            "type": "string",
            "description": "The user principal name of this user.  This value may or may not be required depending on configuration.  If it is required, it must be specified when creating the user.  If it is required, it must be specified when updating the user and a value is not currently set.  To remove the existing value, set the value to an empty string.",
            "example": "johnsmith@organization.com"
          },
          "verificationRequired": {
            "type": "boolean",
            "description": "Indicates whether verification is required. If not set when the user is created, this value defaults to true.",
            "example": true
          }
        },
        "description": "Attributes for the new user."
      },
      "UserPassword": {
        "type": "object",
        "properties": {
          "expiryTime": {
            "type": "string",
            "description": "The date at which the password will expire.",
            "format": "date-time"
          },
          "forceUpdate": {
            "type": "boolean",
            "description": "Indicates if the user will be forced to change their password the next time the user authenticates with it."
          },
          "lastChangedTime": {
            "type": "string",
            "description": "The last time the password was changed.",
            "format": "date-time"
          },
          "newPassword": {
            "type": "string",
            "description": "The value of the new password generated by IDaaS if requested by the client."
          },
          "present": {
            "type": "boolean",
            "description": "A flag that indicates if the user has a password."
          }
        },
        "description": "Information returned when a user password is queried."
      },
      "UserPasswordParms": {
        "type": "object",
        "properties": {
          "clearPasswordHistory": {
            "type": "boolean",
            "description": "If set to true, this flag indicates existing password history is cleared before the new password is created."
          },
          "currentPassword": {
            "type": "string",
            "description": "A value for the current password when changing the AD-User password. "
          },
          "emailPassword": {
            "type": "boolean",
            "description": "A flag indicating whether to email a new password to the user.  It defaults to true."
          },
          "expiryTime": {
            "type": "string",
            "description": "The date at which the password will expire.",
            "format": "date-time"
          },
          "forceUpdate": {
            "type": "boolean",
            "description": "If set to true, this value indicates the user will be forced to change their password upon next password authentication."
          },
          "generatePassword": {
            "type": "boolean",
            "description": "A flag indicating whether a new random password is generated. It defaults to false."
          },
          "password": {
            "type": "string",
            "description": "A value for the new password when setting the user password. This value is ignored if generatePassword is set to true."
          },
          "returnPassword": {
            "type": "boolean",
            "description": "A flag indicating if a password generated by IDaaS should be returned to the caller. This flag is ignored  if the password is passed from the client.  It defaults to false."
          }
        },
        "description": "Parameters specifying how the password is to be modified. This value may include an actual password or arguments specifying that the service should create a random password."
      },
      "UserPasswordSettings": {
        "type": "object",
        "properties": {
          "adComplexity": {
            "type": "boolean",
            "description": "A boolean flag indication if adComplexitiy is enabled."
          },
          "includeLowercase": {
            "type": "string",
            "description": "includeLowercase",
            "enum": [
              "REQUIRED",
              "ALLOWED",
              "NOT_ALLOWED"
            ]
          },
          "includeNonalphanumeric": {
            "type": "string",
            "description": "includeNonalphanumeric",
            "enum": [
              "REQUIRED",
              "ALLOWED",
              "NOT_ALLOWED"
            ]
          },
          "includeNumber": {
            "type": "string",
            "description": "includeNumber",
            "enum": [
              "REQUIRED",
              "ALLOWED",
              "NOT_ALLOWED"
            ]
          },
          "includeUppercase": {
            "type": "string",
            "description": "includeUppercase",
            "enum": [
              "REQUIRED",
              "ALLOWED",
              "NOT_ALLOWED"
            ]
          },
          "lifetimeDays": {
            "type": "integer",
            "description": "lifetimeDays",
            "format": "int32"
          },
          "maximumRepeated": {
            "type": "integer",
            "description": "Maximum number of repeated characters allowed",
            "format": "int32"
          },
          "minimumLength": {
            "type": "integer",
            "description": "minimumLength",
            "format": "int32"
          },
          "minimumLifetime": {
            "type": "integer",
            "description": "minimumLifetime",
            "format": "int32"
          },
          "minimumStrength": {
            "maximum": 4,
            "minimum": 0,
            "type": "integer",
            "description": "Minimum password strength. Password set/update will be rejected, if strength of the password is less than this value. 0: Disabled, 1: Weak protection from throttled online attacks: very guessable, 3: Good protection from offline attacks: safely unguessable, 4: Strong protection from offline attacks: very unguessable",
            "format": "int32",
            "example": 3
          },
          "numberOfLowercaseRequired": {
            "type": "integer",
            "description": "Number of lower case characters required.",
            "format": "int32"
          },
          "numberOfNonalphanumericRequired": {
            "type": "integer",
            "description": "Required number of non alpha numeric characters required.",
            "format": "int32"
          },
          "numberOfNumericRequired": {
            "type": "integer",
            "description": "Number of numeric characters required.",
            "format": "int32"
          },
          "numberOfUppercaseRequired": {
            "type": "integer",
            "description": "Number of upper case characters required.",
            "format": "int32"
          },
          "passwordHistorySize": {
            "type": "integer",
            "description": "Size of password history for a user.",
            "format": "int32"
          }
        },
        "description": "UserPasswordSettings"
      },
      "UserPasswordStrength": {
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "description": "Evaluated password strength score. <br><br> 0:very weak | 1:weak | 2:average | 3:good | 4:strong",
            "format": "int32",
            "example": 3
          },
          "suggestions": {
            "type": "array",
            "description": "Suggestions on how the password strength can be improved.",
            "example": "feedback.dictionary.suggestions.allUppercase",
            "items": {
              "type": "string",
              "description": "Suggestions on how the password strength can be improved.",
              "example": "feedback.dictionary.suggestions.allUppercase"
            }
          }
        },
        "description": "UserPasswordStrength"
      },
      "UserPasswordValidationParms": {
        "type": "object",
        "properties": {
          "ignorePasswordHistory": {
            "type": "boolean",
            "description": "If set to true, existing password history is ignored."
          },
          "password": {
            "type": "string",
            "description": "New password value that needs to be validated. ",
            "example": "newPassword123!"
          }
        },
        "description": "UserPasswordValidationParms"
      },
      "UserPasswordValidationResponse": {
        "type": "object",
        "properties": {
          "adComplexity": {
            "type": "boolean",
            "description": "True if password meets the active directory complexity requirements."
          },
          "alias": {
            "type": "boolean",
            "description": "True if password meets the userId requirements. Password must not contain user alias."
          },
          "alphaNumeric": {
            "type": "boolean",
            "description": "True if password meets the alpha numeric requirements."
          },
          "blacklisted": {
            "type": "boolean",
            "description": "True if password does not contain a blacklisted password."
          },
          "directoryType": {
            "type": "string",
            "description": "Type of the directory the user is associated with, ON_PREM, AZURE or AD Connector.",
            "enum": [
              "ON_PREM",
              "AZURE",
              "AD_CONNECTOR"
            ]
          },
          "fullName": {
            "type": "boolean",
            "description": "True if password meets the full name requirements. Full Name must not be in the password."
          },
          "length": {
            "type": "boolean",
            "description": "True if password meets the length requirements."
          },
          "lowerCase": {
            "type": "boolean",
            "description": "True if password meets the lower case requirements."
          },
          "nondeterministicValidations": {
            "type": "array",
            "description": "List of validations that cannot be determined mostly due to user is AD managed.",
            "items": {
              "type": "string",
              "description": "List of validations that cannot be determined mostly due to user is AD managed."
            }
          },
          "numeric": {
            "type": "boolean",
            "description": "True if password meets the numeric requirements."
          },
          "passwordHistory": {
            "type": "boolean",
            "description": "True if password does not match the history if enabled."
          },
          "repeatedCharacters": {
            "type": "boolean",
            "description": "True if password meets the repeated characters requirements."
          },
          "strength": {
            "type": "boolean",
            "description": "True if password meets the minimum strength requirements."
          },
          "upperCase": {
            "type": "boolean",
            "description": "True if password meets the upper case requirements."
          },
          "userID": {
            "type": "boolean",
            "description": "True if password meets the userId requirements. Password must not contain userId."
          },
          "userPasswordStrength": {
            "$ref": "#/components/schemas/UserPasswordStrength"
          }
        },
        "description": "UserPasswordValidationResponse"
      },
      "UserQuestion": {
        "type": "object",
        "properties": {
          "answer": {
            "type": "string",
            "description": "The question's answer."
          },
          "id": {
            "type": "string",
            "description": "The UUID of the KBA question/answer."
          },
          "question": {
            "type": "string",
            "description": "The question."
          }
        },
        "description": "A KBA question/answer stored for a user."
      },
      "UserRbaSettings": {
        "type": "object",
        "properties": {
          "locationHistoryIpCheckRequired": {
            "type": "boolean",
            "description": "A flag indicating if the IP address is considered when checking to see if two locations are the same."
          },
          "maximumLocationHistory": {
            "type": "integer",
            "description": "The maximum number of user locations stored in location history.",
            "format": "int32"
          },
          "velocityCheckRequired": {
            "type": "boolean",
            "description": "A flag indicating if a velocity check is performed when checking the current location against location history."
          }
        },
        "description": "The new RBA settings."
      },
      "UsersPage": {
        "required": [
          "results"
        ],
        "type": "object",
        "properties": {
          "paging": {
            "$ref": "#/components/schemas/Paging"
          },
          "results": {
            "type": "array",
            "description": "A single page with the list of users found.",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "description": "Contains paging information and the results from a user search."
      },
      "ZoneId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rules": {
            "$ref": "#/components/schemas/ZoneRules"
          }
        },
        "description": "The timezone offset in which dates and times are considered. For example, a value like -05:00 to specify EST.  Set the timezone value if you want to allow times 8am to 5pm in the customer's time zone and not the time zone of the service.  If not specified, the default is Z for UTC."
      },
      "ZoneOffset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rules": {
            "$ref": "#/components/schemas/ZoneRules"
          },
          "totalSeconds": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ZoneOffsetTransition": {
        "type": "object",
        "properties": {
          "dateTimeAfter": {
            "type": "string",
            "format": "date-time"
          },
          "dateTimeBefore": {
            "type": "string",
            "format": "date-time"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "gap": {
            "type": "boolean"
          },
          "instant": {
            "type": "string",
            "format": "date-time"
          },
          "offsetAfter": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "offsetBefore": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "overlap": {
            "type": "boolean"
          }
        }
      },
      "ZoneOffsetTransitionRule": {
        "type": "object",
        "properties": {
          "dayOfMonthIndicator": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "type": "string",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "localTime": {
            "type": "string"
          },
          "midnightEndOfDay": {
            "type": "boolean"
          },
          "month": {
            "type": "string",
            "enum": [
              "JANUARY",
              "FEBRUARY",
              "MARCH",
              "APRIL",
              "MAY",
              "JUNE",
              "JULY",
              "AUGUST",
              "SEPTEMBER",
              "OCTOBER",
              "NOVEMBER",
              "DECEMBER"
            ]
          },
          "offsetAfter": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "offsetBefore": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "standardOffset": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "timeDefinition": {
            "type": "string",
            "enum": [
              "UTC",
              "WALL",
              "STANDARD"
            ]
          }
        }
      },
      "ZoneRules": {
        "type": "object",
        "properties": {
          "fixedOffset": {
            "type": "boolean"
          },
          "transitionRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneOffsetTransitionRule"
            }
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneOffsetTransition"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "AdminAPIAuthentication": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}